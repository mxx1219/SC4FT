public void writeRecords(final Object iRecords,final String iFetchPlan,String iFormat,final String accept,final Map<String,Object> iAdditionalProperties,final String mode) throws IOException {
  if (iRecords == null) {
    send(OHttpUtils.STATUS_OK_NOCONTENT_CODE,"",OHttpUtils.CONTENT_TEXT_PLAIN,null,null);
    return;
  }
  if (!mode.equalsIgnoreCase("graph")) {
    super.writeRecords(iRecords,iFetchPlan,iFormat,accept,iAdditionalProperties,mode);
    return;
  }
  if (accept != null && accept.contains("text/csv"))   throw new IllegalArgumentException("Graph mode cannot accept '" + accept + "'");
  final OrientGraphNoTx graph=(OrientGraphNoTx)OrientGraphFactory.getNoTxGraphImplFactory().getGraph((ODatabaseDocumentTx)ODatabaseRecordThreadLocal.instance().get());
  try {
    final Set<OrientEdge> rsEdges=new HashSet<OrientEdge>();
    final Set<OrientVertex> vertices=new HashSet<OrientVertex>();
    final Iterator<Object> iIterator=OMultiValue.getMultiValueIterator(iRecords);
    while (iIterator.hasNext()) {
      Object entry=iIterator.next();
      if (entry == null || !(entry instanceof OIdentifiable))       continue;
      entry=((OIdentifiable)entry).getRecord();
      if (entry == null || !(entry instanceof OIdentifiable))       continue;
      if (entry instanceof ODocument) {
        OClass schemaClass=((ODocument)entry).getSchemaClass();
        if (schemaClass != null && schemaClass.isVertexType())         vertices.add(graph.getVertex(entry));
 else         if (schemaClass != null && schemaClass.isEdgeType()) {
          OrientEdge edge=graph.getEdge(entry);
          rsEdges.add(edge);
          vertices.add(graph.getVertex(edge.getVertex(Direction.IN)));
          vertices.add(graph.getVertex(edge.getVertex(Direction.OUT)));
        }
 else         continue;
      }
    }
    final StringWriter buffer=new StringWriter();
    final OJSONWriter json=new OJSONWriter(buffer,"");
    json.beginObject();
    json.beginObject("graph");
    json.beginCollection("vertices");
    for (    OrientVertex vertex : vertices) {
      json.beginObject();
      json.writeAttribute("@rid",vertex.getIdentity());
      json.writeAttribute("@class",vertex.getRecord().getClassName());
      for (      String field : vertex.getPropertyKeys()) {
        final Object v=vertex.getProperty(field);
        if (v != null)         json.writeAttribute(field,v);
      }
      json.endObject();
    }
    json.endCollection();
    json.beginCollection("edges");
    if (rsEdges.isEmpty()) {
      Set<ORID> edgeRids=new HashSet<ORID>();
      for (      OrientVertex vertex : vertices) {
        for (        Edge e : vertex.getEdges(Direction.BOTH)) {
          OrientEdge edge=(OrientEdge)e;
          if (edgeRids.contains(((OrientEdge)e).getIdentity())) {
            continue;
          }
          if (!vertices.contains(edge.getVertex(Direction.OUT)) || !vertices.contains(edge.getVertex(Direction.IN)))           continue;
          edgeRids.add(edge.getIdentity());
          writeEdge(edge,json);
        }
      }
    }
 else {
      for (      OrientEdge edge : rsEdges) {
        if (!vertices.contains(edge.getVertex(Direction.OUT)) || !vertices.contains(edge.getVertex(Direction.IN)))         continue;
        writeEdge(edge,json);
      }
    }
    json.endCollection();
    if (iAdditionalProperties != null) {
      for (      Map.Entry<String,Object> entry : iAdditionalProperties.entrySet()) {
        final Object v=entry.getValue();
        if (OMultiValue.isMultiValue(v)) {
          json.beginCollection(-1,true,entry.getKey());
          formatMultiValue(OMultiValue.getMultiValueIterator(v),buffer,null);
          json.endCollection(-1,true);
        }
 else         json.writeAttribute(entry.getKey(),v);
        if (Thread.currentThread().isInterrupted())         break;
      }
    }
    json.endObject();
    json.endObject();
    send(OHttpUtils.STATUS_OK_CODE,"OK",OHttpUtils.CONTENT_JSON,buffer.toString(),null);
  }
  finally {
    graph.shutdown();
  }
}
