private void lookup(){
  String lookup=input.getText();
  details.setText("Loading...");
  lookup=sanitize(lookup);
  if (Strings.isNullOrEmpty(lookup)) {
    return;
  }
  for (  JLabel label : skillLabels) {
    label.setText("--");
  }
  try {
    HiscoreEndpoint endpoint=HiscoreEndpoint.valueOf(endpointButtonGroup.getSelection().getActionCommand());
    log.debug("Hiscore endpoint " + endpoint.name() + " selected");
    result=hiscoreClient.lookup(lookup,endpoint);
  }
 catch (  IOException ex) {
    log.warn("Error fetching Hiscore data " + ex.getMessage());
    details.setText("Error fetching Hiscore data");
    return;
  }
  for (  JLabel label : skillLabels) {
    String skillName=(String)label.getClientProperty(SKILL_NAME);
    HiscoreSkill skill=(HiscoreSkill)label.getClientProperty(SKILL);
    if (skillName.equals("Combat")) {
      if (result.getPlayer() != null) {
        int combatLevel=Experience.getCombatLevel(result.getAttack().getLevel(),result.getStrength().getLevel(),result.getDefence().getLevel(),result.getHitpoints().getLevel(),result.getMagic().getLevel(),result.getRanged().getLevel(),result.getPrayer().getLevel());
        label.setText(Integer.toString(combatLevel));
      }
    }
 else     if (result.getSkill(skill) != null && result.getSkill(skill).getRank() != -1) {
      Skill s=result.getSkill(skill);
      int level;
      if (config.virtualLevels() && s.getExperience() >= 0) {
        level=Experience.getLevelForXp((int)s.getExperience());
      }
 else {
        level=s.getLevel();
      }
      label.setText(Integer.toString(level));
    }
  }
  details.setFont(UIManager.getFont("Label.font").deriveFont(Font.ITALIC));
  details.setText("Hover over a skill for details");
}
