private void test(String authKeyId,PrivateKey authPrivateKey,int msgBufferSize,final int nRows){
  WorkerPool sharedWorkerPool=new WorkerPool(new WorkerPoolConfiguration(){
    private final int[] affinity={-1,-1};
    @Override public boolean haltOnError(){
      return true;
    }
    @Override public int getWorkerCount(){
      return 2;
    }
    @Override public int[] getWorkerAffinity(){
      return affinity;
    }
  }
);
  final int bindIp=0;
  final int bindPort=9002;
  IODispatcherConfiguration ioDispatcherConfiguration=new DefaultIODispatcherConfiguration(){
    @Override public int getBindIPv4Address(){
      return bindIp;
    }
    @Override public int getBindPort(){
      return bindPort;
    }
  }
;
  LineTcpReceiverConfiguration lineConfiguration=new DefaultLineTcpReceiverConfiguration(){
    @Override public IODispatcherConfiguration getNetDispatcherConfiguration(){
      return ioDispatcherConfiguration;
    }
    @Override public int getWriterQueueSize(){
      return 4;
    }
    @Override public int getNetMsgBufferSize(){
      return msgBufferSize;
    }
    @Override public int getMaxMeasurementSize(){
      return 50;
    }
    @Override public int getNUpdatesPerLoadRebalance(){
      return 100;
    }
    @Override public double getMaxLoadRatio(){
      return 1;
    }
    @Override public String getAuthDbPath(){
      if (null == authKeyId) {
        return null;
      }
      URL u=getClass().getResource("authDb.txt");
      return u.getFile();
    }
  }
;
  final String[] tables={"weather1","weather2","weather3"};
  final String[] locations={"london","paris","rome"};
  final Random rand=new Random(0);
  final StringBuilder[] expectedSbs=new StringBuilder[tables.length];
  try (CairoEngine engine=new CairoEngine(configuration)){
    LineTcpServer tcpServer=LineTcpServer.create(lineConfiguration,sharedWorkerPool,LOG,engine);
    SOCountDownLatch tablesCreated=new SOCountDownLatch();
    tablesCreated.setCount(tables.length);
    Supplier<Path> pathSupplier=null;
    sharedWorkerPool.assign(new SynchronizedJob(){
      private final ThreadLocal<Path> tlPath=ThreadLocal.withInitial(pathSupplier);
      @Override public boolean runSerially(){
        int nTable=tables.length - tablesCreated.getCount();
        if (nTable < tables.length) {
          String tableName=tables[nTable];
          int status=engine.getStatus(AllowAllCairoSecurityContext.INSTANCE,tlPath.get(),tableName);
          if (status == TableUtils.TABLE_EXISTS) {
            tablesCreated.countDown();
          }
          return true;
        }
        return false;
      }
    }
);
    sharedWorkerPool.start(LOG);
    try {
      final LineProtoSender[] senders=new LineProtoSender[tables.length];
      for (int n=0; n < senders.length; n++) {
        if (null != authKeyId) {
          AuthenticatedLineTCPProtoSender sender=new AuthenticatedLineTCPProtoSender(authKeyId,authPrivateKey,Net.parseIPv4("127.0.0.1"),bindPort,4096);
          sender.authenticate();
          senders[n]=sender;
        }
 else {
          senders[n]=new LineTCPProtoSender(Net.parseIPv4("127.0.0.1"),bindPort,4096);
        }
        StringBuilder sb=new StringBuilder((nRows + 1) * lineConfiguration.getMaxMeasurementSize());
        sb.append("location\ttemp\ttimestamp\n");
        expectedSbs[n]=sb;
      }
      long ts=Os.currentTimeMicros();
      StringSink tsSink=new StringSink();
      for (int nRow=0; nRow < nRows; nRow++) {
        int nTable=nRow < tables.length ? nRow : rand.nextInt(tables.length);
        LineProtoSender sender=senders[nTable];
        StringBuilder sb=expectedSbs[nTable];
        String tableName=tables[nTable];
        sender.metric(tableName);
        String location=locations[rand.nextInt(locations.length)];
        sb.append(location);
        sb.append('\t');
        sender.tag("location",location);
        int temp=rand.nextInt(100);
        sb.append(temp);
        sb.append('\t');
        sender.field("temp",temp);
        tsSink.clear();
        TimestampFormatUtils.appendDateTimeUSec(tsSink,ts);
        sb.append(tsSink.toString());
        sb.append('\n');
        sender.$(ts * 1000);
        sender.flush();
        ts+=rand.nextInt(1000);
      }
      for (int n=0; n < senders.length; n++) {
        LineProtoSender sender=senders[n];
        sender.close();
      }
      tablesCreated.await();
      int nRowsWritten;
      do {
        Thread.yield();
        nRowsWritten=0;
        for (int n=0; n < tables.length; n++) {
          String tableName=tables[n];
          try (TableReader reader=new TableReader(configuration,tableName)){
            TableReaderRecordCursor cursor=reader.getCursor();
            while (cursor.hasNext()) {
              nRowsWritten++;
            }
          }
         }
      }
 while (nRowsWritten < nRows);
      LOG.info().$(nRowsWritten).$(" rows written").$();
    }
  finally {
      sharedWorkerPool.halt();
      Misc.free(tcpServer);
    }
  }
   for (int n=0; n < tables.length; n++) {
    String tableName=tables[n];
    LOG.info().$("checking table ").$(tableName).$();
    assertTable(expectedSbs[n].toString(),tableName);
  }
}
