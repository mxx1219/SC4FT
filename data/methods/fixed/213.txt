private void buildAnimationForKeyFrames(JSONArray keyframes,boolean closed){
  try {
    startFrame=keyframes.getJSONObject(0).getInt("t");
    int endFrame=keyframes.getJSONObject(keyframes.length() - 1).getInt("t");
    if (endFrame <= startFrame) {
      throw new IllegalArgumentException("End frame must be after start frame " + endFrame + " vs "+ startFrame);
    }
    durationFrames=endFrame - startFrame;
    duration=(long)(durationFrames / (float)frameRate * 1000);
    delay=(long)(startFrame / (float)frameRate * 1000);
    boolean addStartValue=true;
    boolean addTimePadding=false;
    LotteShapeData outShape=null;
    for (int i=0; i < keyframes.length(); i++) {
      JSONObject keyframe=keyframes.getJSONObject(i);
      int frame=keyframe.getInt("t");
      float timePercentage=(float)(frame - startFrame) / (float)durationFrames;
      if (outShape != null) {
        shapeKeyframes.add(outShape);
        interpolators.add(new LinearInterpolator());
        outShape=null;
      }
      LotteShapeData startShape=keyframe.has("s") ? bezierShapeFromValue(keyframe.getJSONArray("s"),closed) : null;
      if (addStartValue) {
        if (keyframe.has("s")) {
          if (i == 0) {
            initialShape=startShape;
          }
          shapeKeyframes.add(startShape);
          if (!interpolators.isEmpty()) {
            interpolators.add(new LinearInterpolator());
          }
        }
        addStartValue=false;
      }
      if (addTimePadding) {
        float holdPercentage=timePercentage - 0.00001f;
        keyTimes.add(holdPercentage);
        addTimePadding=false;
      }
      if (keyframe.has("e")) {
        JSONArray endShape=keyframe.getJSONArray("e");
        LotteShapeData shape=bezierShapeFromValue(endShape,closed);
        shapeKeyframes.add(shape);
        Interpolator interpolator;
        if (keyframe.has("o") && keyframe.has("i")) {
          PointF cp1=JsonUtils.pointValueFromDict(keyframe.getJSONObject("o"));
          PointF cp2=JsonUtils.pointValueFromDict(keyframe.getJSONObject("i"));
          interpolator=PathInterpolatorCompat.create(cp1.x,cp1.y,cp2.x,cp2.y);
        }
 else {
          interpolator=new LinearInterpolator();
        }
        interpolators.add(interpolator);
      }
      keyTimes.add(timePercentage);
      if (keyframe.has("h") && keyframe.getInt("h") == 1) {
        outShape=startShape;
        addStartValue=true;
        addTimePadding=true;
      }
    }
  }
 catch (  JSONException e) {
    throw new IllegalArgumentException("Unable to parse shape animation",e);
  }
}
