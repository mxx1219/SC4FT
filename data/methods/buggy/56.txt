public void setFromClauseTypedBindingPatternType(BLangFromClause fromClause){
  BType collectionType=fromClause.collection.type;
  BType varType;
switch (collectionType.tag) {
case TypeTags.STRING:
    varType=symTable.stringType;
  break;
case TypeTags.ARRAY:
BArrayType arrayType=(BArrayType)collectionType;
varType=arrayType.eType;
break;
case TypeTags.TUPLE:
BTupleType tupleType=(BTupleType)collectionType;
LinkedHashSet<BType> tupleTypes=new LinkedHashSet<>(tupleType.tupleTypes);
if (tupleType.restType != null) {
tupleTypes.add(tupleType.restType);
}
varType=tupleTypes.size() == 1 ? tupleTypes.iterator().next() : BUnionType.create(null,tupleTypes);
break;
case TypeTags.MAP:
BMapType bMapType=(BMapType)collectionType;
varType=bMapType.constraint;
break;
case TypeTags.RECORD:
BRecordType recordType=(BRecordType)collectionType;
varType=inferRecordFieldType(recordType);
break;
case TypeTags.XML:
varType=BUnionType.create(null,symTable.xmlType,symTable.stringType);
break;
case TypeTags.TABLE:
BTableType tableType=(BTableType)collectionType;
if (tableType.constraint.tag == TypeTags.NONE) {
varType=symTable.anydataType;
break;
}
varType=tableType.constraint;
break;
case TypeTags.OBJECT:
BUnionType nextMethodReturnType=getVarTypeFromIterableObject((BObjectType)collectionType);
if (nextMethodReturnType != null) {
fromClause.resultType=getRecordType(nextMethodReturnType);
fromClause.nillableResultType=nextMethodReturnType;
fromClause.varType=((BRecordType)fromClause.resultType).fields.get(0).type;
return;
}
dlog.error(fromClause.collection.pos,DiagnosticCode.INCOMPATIBLE_ITERATOR_FUNCTION_SIGNATURE);
case TypeTags.SEMANTIC_ERROR:
fromClause.varType=symTable.semanticError;
fromClause.resultType=symTable.semanticError;
fromClause.nillableResultType=symTable.semanticError;
return;
default :
fromClause.varType=symTable.semanticError;
fromClause.resultType=symTable.semanticError;
fromClause.nillableResultType=symTable.semanticError;
dlog.error(fromClause.collection.pos,DiagnosticCode.ITERABLE_NOT_SUPPORTED_COLLECTION,collectionType);
return;
}
BInvokableSymbol iteratorSymbol=(BInvokableSymbol)symResolver.lookupLangLibMethod(collectionType,names.fromString(BLangCompilerConstants.ITERABLE_COLLECTION_ITERATOR_FUNC));
BUnionType nextMethodReturnType=(BUnionType)getResultTypeOfNextInvocation((BObjectType)iteratorSymbol.retType);
fromClause.varType=varType;
fromClause.resultType=getRecordType(nextMethodReturnType);
fromClause.nillableResultType=nextMethodReturnType;
}
