private void buildAnimationForKeyframes(JSONArray keyframes){
  try {
    startFrame=keyframes.getJSONObject(0).getInt("t");
    int endFrame=keyframes.getJSONObject(keyframes.length() - 1).getInt("t");
    if (endFrame <= startFrame) {
      throw new IllegalArgumentException("End frame must be after start frame " + endFrame + " vs "+ startFrame);
    }
    durationFrames=endFrame - startFrame;
    duration=(long)(durationFrames / (float)frameRate * 1000);
    delay=(long)(startFrame / (float)frameRate * 1000);
    boolean addStartValue=true;
    boolean addTimePadding=false;
    LotteTransform3D outValue=null;
    for (int i=0; i < keyframes.length(); i++) {
      JSONObject keyframe=keyframes.getJSONObject(i);
      int frame=keyframe.getInt("t");
      float timePercentage=(frame - startFrame) / (float)durationFrames;
      if (outValue != null) {
        scaleKeyframes.add(outValue);
        interpolators.add(new LinearInterpolator());
        outValue=null;
      }
      LotteTransform3D startValue=null;
      if (addStartValue) {
        if (keyframe.has("s")) {
          startValue=xformForValueArray(keyframe.getJSONArray("s"));
          if (i == 0) {
            initialScale=startValue;
            observable.setValue(initialScale);
          }
          scaleKeyframes.add(startValue);
          if (!interpolators.isEmpty()) {
            interpolators.add(new LinearInterpolator());
          }
        }
        addStartValue=false;
      }
      if (addTimePadding) {
        float holdPercentage=timePercentage - 0.00001f;
        keyTimes.add(holdPercentage);
        addTimePadding=false;
      }
      if (keyframe.has("e")) {
        LotteTransform3D endValue=xformForValueArray(keyframe.getJSONArray("e"));
        scaleKeyframes.add(endValue);
        Interpolator interpolator;
        if (keyframe.has("o") && keyframe.has("i")) {
          PointF cp1=JsonUtils.pointValueFromDict(keyframe.getJSONObject("o"));
          PointF cp2=JsonUtils.pointValueFromDict(keyframe.getJSONObject("i"));
          interpolator=PathInterpolatorCompat.create(cp1.x,cp1.y,cp2.x,cp2.y);
        }
 else {
          interpolator=new LinearInterpolator();
        }
        interpolators.add(interpolator);
      }
      keyTimes.add(timePercentage);
      if (keyframe.has("h") && keyframe.getBoolean("h")) {
        outValue=startValue;
        addStartValue=true;
        addTimePadding=true;
      }
    }
  }
 catch (  JSONException e) {
    throw new IllegalArgumentException("Unable to parse scale animation " + keyframes,e);
  }
}
