@Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
  reads=in.readLong();
  puts=in.readLong();
  hits=in.readLong();
  misses=in.readLong();
  txCommits=in.readLong();
  txRollbacks=in.readLong();
  evicts=in.readLong();
  removes=in.readLong();
  putAvgTimeNanos=in.readFloat();
  getAvgTimeNanos=in.readFloat();
  rmvAvgTimeNanos=in.readFloat();
  commitAvgTimeNanos=in.readFloat();
  rollbackAvgTimeNanos=in.readFloat();
  offHeapGets=in.readLong();
  offHeapPuts=in.readLong();
  offHeapRemoves=in.readLong();
  offHeapEvicts=in.readLong();
  offHeapHits=in.readLong();
  offHeapMisses=in.readLong();
  offHeapEntriesCnt=in.readLong();
  heapEntriesCnt=in.readLong();
  offHeapPrimaryEntriesCnt=in.readLong();
  offHeapBackupEntriesCnt=in.readLong();
  offHeapAllocatedSize=in.readLong();
  dhtEvictQueueCurrSize=in.readInt();
  txThreadMapSize=in.readInt();
  txXidMapSize=in.readInt();
  txCommitQueueSize=in.readInt();
  txPrepareQueueSize=in.readInt();
  txStartVerCountsSize=in.readInt();
  txCommittedVersionsSize=in.readInt();
  txRolledbackVersionsSize=in.readInt();
  txDhtThreadMapSize=in.readInt();
  txDhtXidMapSize=in.readInt();
  txDhtCommitQueueSize=in.readInt();
  txDhtPrepareQueueSize=in.readInt();
  txDhtStartVerCountsSize=in.readInt();
  txDhtCommittedVersionsSize=in.readInt();
  txDhtRolledbackVersionsSize=in.readInt();
  writeBehindTotalCriticalOverflowCnt=in.readInt();
  writeBehindCriticalOverflowCnt=in.readInt();
  writeBehindErrorRetryCnt=in.readInt();
  totalPartitionsCnt=in.readInt();
  rebalancingPartitionsCnt=in.readInt();
  keysToRebalanceLeft=in.readLong();
  rebalancingBytesRate=in.readLong();
  rebalancingKeysRate=in.readLong();
  rebalancedKeys=in.readLong();
  estimatedRebalancingKeys=in.readLong();
  rebalanceStartTime=in.readLong();
  rebalanceFinishTime=in.readLong();
  rebalanceClearingPartitionsLeft=in.readLong();
  if (in.available() >= 108) {
    entryProcessorPuts=in.readLong();
    entryProcessorAverageInvocationTime=in.readFloat();
    entryProcessorInvocations=in.readLong();
    entryProcessorMaxInvocationTime=in.readFloat();
    entryProcessorMinInvocationTime=in.readFloat();
    entryProcessorReadOnlyInvocations=in.readLong();
    entryProcessorHitPercentage=in.readFloat();
    entryProcessorHits=in.readLong();
    entryProcessorMisses=in.readLong();
    entryProcessorMissPercentage=in.readFloat();
    entryProcessorRemovals=in.readLong();
  }
}
