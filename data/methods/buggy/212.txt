@Test public void testExecutingAggregateQueries_theResultsAreCorrect(){
  try (GraknClient.Transaction tx=remoteSession.transaction().write()){
    EntityType person=tx.putEntityType("person");
    AttributeType name=tx.putAttributeType("name",DataType.STRING);
    AttributeType age=tx.putAttributeType("age",DataType.INTEGER);
    AttributeType rating=tx.putAttributeType("rating",DataType.DOUBLE);
    person.has(name).has(age).has(rating);
    person.create().has(name.create("Alice")).has(age.create(20));
    person.create().has(name.create("Bob")).has(age.create(22));
    GraqlGet.Aggregate nullQuery=Graql.match(var("x").isa("person").has("rating",var("y"))).get().sum("y");
    assertTrue(tx.execute(nullQuery).isEmpty());
    GraqlGet.Aggregate countQuery=Graql.match(var("x").isa("person").has("age",var("y"))).get("y").count();
    assertEquals(2L,tx.execute(countQuery).get(0).number().longValue());
    GraqlGet.Aggregate sumAgeQuery=Graql.match(var("x").isa("person").has("age",var("y"))).get().sum("y");
    assertEquals(42,tx.execute(sumAgeQuery).get(0).number().intValue());
    GraqlGet.Aggregate minAgeQuery=Graql.match(var("x").isa("person").has("age",var("y"))).get().min("y");
    assertEquals(20,tx.execute(minAgeQuery).get(0).number().intValue());
    GraqlGet.Aggregate maxAgeQuery=Graql.match(var("x").isa("person").has("age",var("y"))).get().max("y");
    assertEquals(22,tx.execute(maxAgeQuery).get(0).number().intValue());
    GraqlGet.Aggregate meanAgeQuery=Graql.match(var("x").isa("person").has("age",var("y"))).get().mean("y");
    assertEquals(21.0d,tx.execute(meanAgeQuery).get(0).number().doubleValue(),0.01d);
    GraqlGet.Aggregate medianAgeQuery=Graql.match(var("x").isa("person").has("age",var("y"))).get().median("y");
    assertEquals(21.0d,tx.execute(medianAgeQuery).get(0).number().doubleValue(),0.01d);
    GraqlGet.Aggregate stdAgeQuery=Graql.match(var("x").isa("person").has("age",var("y"))).get().std("y");
    int n=2;
    double mean=(20 + 22) / n;
    double var=(Math.pow(20 - mean,2) + Math.pow(22 - mean,2)) / (n - 1);
    double std=Math.sqrt(var);
    assertEquals(std,tx.execute(stdAgeQuery).get(0).number().doubleValue(),0.0001d);
    List<AnswerGroup<ConceptMap>> groups=tx.execute(Graql.match(var("x").isa("person").has("name",var("y"))).get().group("y"));
    assertEquals(2,groups.size());
    groups.forEach(null);
    List<AnswerGroup<Numeric>> counts=tx.execute(Graql.match(var("x").isa("person").has("name",var("y"))).get().group("y").count());
    assertEquals(2,counts.size());
    counts.forEach(null);
  }
 }
