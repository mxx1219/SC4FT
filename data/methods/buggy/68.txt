@Test public void decodeMessage() throws Exception {
  ServerStoreOpCodec serverStoreOpCodec=mock(ServerStoreOpCodec.class);
  LifeCycleMessageCodec lifeCycleMessageCodec=mock(LifeCycleMessageCodec.class);
  StateRepositoryOpCodec stateRepositoryOpCodec=mock(StateRepositoryOpCodec.class);
  ClientIDTrackerMessageCodec clientIDTrackerMessageCodec=mock(ClientIDTrackerMessageCodec.class);
  EhcacheCodec codec=new EhcacheCodec(serverStoreOpCodec,lifeCycleMessageCodec,stateRepositoryOpCodec,null,clientIDTrackerMessageCodec);
  byte[] payload=new byte[1];
  for (byte i=1; i <= EhcacheEntityMessage.Type.LIFECYCLE_OP.getCode(); i++) {
    payload[0]=i;
    codec.decodeMessage(payload);
  }
  verify(lifeCycleMessageCodec,times(10)).decode(payload);
  verify(serverStoreOpCodec,never()).decode(payload);
  verify(stateRepositoryOpCodec,never()).decode(payload);
  verify(clientIDTrackerMessageCodec,never()).decode(payload);
  for (byte i=11; i <= EhcacheEntityMessage.Type.SERVER_STORE_OP.getCode(); i++) {
    payload[0]=i;
    codec.decodeMessage(payload);
  }
  verify(lifeCycleMessageCodec,times(10)).decode(payload);
  verify(serverStoreOpCodec,times(10)).decode(payload);
  verify(stateRepositoryOpCodec,never()).decode(payload);
  verify(clientIDTrackerMessageCodec,never()).decode(payload);
  for (byte i=21; i <= EhcacheEntityMessage.Type.STATE_REPO_OP.getCode(); i++) {
    payload[0]=i;
    codec.decodeMessage(payload);
  }
  verify(lifeCycleMessageCodec,times(10)).decode(payload);
  verify(serverStoreOpCodec,times(10)).decode(payload);
  verify(stateRepositoryOpCodec,times(10)).decode(payload);
  verify(clientIDTrackerMessageCodec,never()).decode(payload);
  for (byte i=31; i <= EhcacheEntityMessage.Type.REPLICATION_OP.getCode(); i++) {
    payload[0]=i;
    codec.decodeMessage(payload);
  }
  verify(lifeCycleMessageCodec,times(10)).decode(payload);
  verify(serverStoreOpCodec,times(10)).decode(payload);
  verify(stateRepositoryOpCodec,times(10)).decode(payload);
  verify(clientIDTrackerMessageCodec,times(10)).decode(payload);
}
