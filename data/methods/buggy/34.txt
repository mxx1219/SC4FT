@Override public boolean start() throws Exception {
  Cloud cloud=Jenkins.getInstance().getCloud(cloudName);
  if (cloud == null) {
    throw new AbortException(String.format("Cloud does not exist: %s",cloudName));
  }
  if (!(cloud instanceof KubernetesCloud)) {
    throw new AbortException(String.format("Cloud is not a Kubernetes cloud: %s (%s)",cloudName,cloud.getClass().getName()));
  }
  KubernetesCloud kubernetesCloud=(KubernetesCloud)cloud;
  Run<?,?> run=getContext().get(Run.class);
  if (kubernetesCloud.isUsageRestricted()) {
    checkAccess(run,kubernetesCloud);
  }
  PodTemplateContext podTemplateContext=getContext().get(PodTemplateContext.class);
  String parentTemplates=podTemplateContext != null ? podTemplateContext.getName() : null;
  String label=step.getLabel();
  if (label == null) {
    label=labelify(run.getExternalizableId());
  }
  String randString=RandomStringUtils.random(5,"bcdfghjklmnpqrstvwxz0123456789");
  String stepName=step.getName();
  if (stepName == null) {
    stepName=label;
  }
  String name=String.format(NAME_FORMAT,stepName,randString);
  String namespace=checkNamespace(kubernetesCloud,podTemplateContext);
  newTemplate=new PodTemplate();
  newTemplate.setName(name);
  newTemplate.setNamespace(namespace);
  if (step.getInheritFrom() == null) {
    newTemplate.setInheritFrom(Strings.emptyToNull(parentTemplates));
  }
 else {
    newTemplate.setInheritFrom(Strings.emptyToNull(step.getInheritFrom()));
  }
  newTemplate.setInstanceCap(step.getInstanceCap());
  newTemplate.setIdleMinutes(step.getIdleMinutes());
  newTemplate.setSlaveConnectTimeout(step.getSlaveConnectTimeout());
  newTemplate.setLabel(label);
  newTemplate.setEnvVars(step.getEnvVars());
  newTemplate.setVolumes(step.getVolumes());
  newTemplate.setCustomWorkspaceVolumeEnabled(step.getWorkspaceVolume() != null);
  newTemplate.setWorkspaceVolume(step.getWorkspaceVolume());
  newTemplate.setContainers(step.getContainers());
  newTemplate.setNodeSelector(step.getNodeSelector());
  newTemplate.setNodeUsageMode(step.getNodeUsageMode());
  newTemplate.setServiceAccount(step.getServiceAccount());
  newTemplate.setAnnotations(step.getAnnotations());
  newTemplate.setYamlMergeStrategy(step.getYamlMergeStrategy());
  if (run != null) {
    newTemplate.getAnnotations().add(new PodAnnotation("buildUrl",((KubernetesCloud)cloud).getJenkinsUrlOrDie() + run.getUrl()));
  }
  newTemplate.setImagePullSecrets(step.getImagePullSecrets().stream().map(null).collect(toList()));
  newTemplate.setYaml(step.getYaml());
  newTemplate.setShowRawYaml(step.isShowRawYaml());
  newTemplate.setPodRetention(step.getPodRetention());
  if (step.getActiveDeadlineSeconds() != 0) {
    newTemplate.setActiveDeadlineSeconds(step.getActiveDeadlineSeconds());
  }
  for (  ContainerTemplate container : newTemplate.getContainers()) {
    if (!PodTemplateUtils.validateContainerName(container.getName())) {
      throw new AbortException(Messages.RFC1123_error(container.getName()));
    }
  }
  Collection<String> errors=PodTemplateUtils.validateYamlContainerNames(newTemplate.getYamls());
  if (!errors.isEmpty()) {
    throw new AbortException(Messages.RFC1123_error(String.join(", ",errors)));
  }
  if (!PodTemplateUtils.validateLabel(newTemplate.getLabel())) {
    throw new AbortException(Messages.label_error(newTemplate.getLabel()));
  }
  kubernetesCloud.addDynamicTemplate(newTemplate);
  BodyInvoker invoker=getContext().newBodyInvoker().withContexts(step,new PodTemplateContext(namespace,name)).withCallback(new PodTemplateCallback(newTemplate));
  if (step.getLabel() == null) {
    invoker.withContext(EnvironmentExpander.merge(getContext().get(EnvironmentExpander.class),EnvironmentExpander.constant(Collections.singletonMap("POD_LABEL",label))));
  }
  invoker.start();
  return false;
}
