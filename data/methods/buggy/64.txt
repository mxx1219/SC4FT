@Test public void testInboundConnection() throws Exception {
  LOG.info("Creating producer 1");
  @Cleanup PulsarClient client1=PulsarClient.builder().serviceUrl(proxyService.getServiceUrl()).operationTimeout(1000,TimeUnit.MILLISECONDS).build();
  @Cleanup Producer<byte[]> producer1=client1.newProducer(Schema.BYTES).topic("persistent://sample/test/local/producer-topic-1").create();
  LOG.info("Creating producer 2");
  @Cleanup PulsarClient client2=PulsarClient.builder().serviceUrl(proxyService.getServiceUrl()).operationTimeout(1000,TimeUnit.MILLISECONDS).build();
  Assert.assertEquals(ProxyService.rejectedConnections.get(),0.0d);
  try {
    @Cleanup Producer<byte[]> producer2=client2.newProducer(Schema.BYTES).topic("persistent://sample/test/local/producer-topic-1").create();
    producer2.send("Message 1".getBytes());
    Assert.fail("Should have failed since max num of connections is 2 and the first producer used them all up - one for discovery and other for producing.");
  }
 catch (  Exception ex) {
  }
  Assert.assertEquals(ProxyService.rejectedConnections.get(),11.0d);
}
