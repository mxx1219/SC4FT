package com.spotify.helios.servicescommon;
import com.google.common.base.Optional;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
public class KafkaSender {
  private static final Logger log=LoggerFactory.getLogger(KafkaSender.class);
  private static final int KAFKA_SEND_TIMEOUT=5;
  private final Optional<KafkaProducer<String,byte[]>> kafkaProducer;
  public KafkaSender(  final Optional<KafkaProducer<String,byte[]>> kafkaProducer){
    this.kafkaProducer=kafkaProducer;
  }
  public void send(  final KafkaRecord record){
    if (kafkaProducer.isPresent()) {
      try {
        final Future<RecordMetadata> future=kafkaProducer.get().send(new ProducerRecord<String,byte[]>(record.getKafkaTopic(),record.getKafkaData()));
        final RecordMetadata metadata=future.get(KAFKA_SEND_TIMEOUT,TimeUnit.SECONDS);
        log.debug("Sent an event to Kafka, meta: {}",metadata);
      }
 catch (      ExecutionException|InterruptedException|TimeoutException e) {
        log.error("Unable to send an event to Kafka",e);
      }
    }
 else {
      log.debug("KafkaProducer isn't set. Not sending anything.");
    }
  }
}
