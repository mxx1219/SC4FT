package org.graylog.plugins.pipelineprocessor.functions.strings;
import com.google.common.collect.ForwardingMap;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Iterables;
import org.graylog.plugins.pipelineprocessor.EvaluationContext;
import org.graylog.plugins.pipelineprocessor.ast.functions.AbstractFunction;
import org.graylog.plugins.pipelineprocessor.ast.functions.FunctionArgs;
import org.graylog.plugins.pipelineprocessor.ast.functions.FunctionDescriptor;
import org.graylog.plugins.pipelineprocessor.ast.functions.ParameterDescriptor;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.regex.MatchResult;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import com.google.common.collect.ImmutableList.of;
public class RegexMatch extends AbstractFunction<RegexMatch.RegexMatchResult> {
  public static final String NAME="regex";
  private final ParameterDescriptor<String,Pattern> pattern;
  private final ParameterDescriptor<String,String> value;
  private final ParameterDescriptor<List,List> optionalGroupNames;
  public RegexMatch(){
    pattern=ParameterDescriptor.string("pattern",Pattern.class).transform(null).build();
    value=ParameterDescriptor.string("value").build();
    optionalGroupNames=ParameterDescriptor.type("group_names",List.class).optional().build();
  }
  @Override public RegexMatchResult evaluate(  FunctionArgs args,  EvaluationContext context){
    final Pattern regex=pattern.required(args,context);
    final String value=this.value.required(args,context);
    if (regex == null || value == null) {
      throw new IllegalArgumentException();
    }
    final List<String> groupNames=(List<String>)optionalGroupNames.optional(args,context).orElse(Collections.emptyList());
    final Matcher matcher=regex.matcher(value);
    final boolean matches=matcher.matches();
    return new RegexMatchResult(matches,matcher.toMatchResult(),groupNames);
  }
  @Override public FunctionDescriptor<RegexMatchResult> descriptor(){
    return FunctionDescriptor.<RegexMatchResult>builder().name(NAME).pure(true).returnType(RegexMatchResult.class).params(of(pattern,value,optionalGroupNames)).build();
  }
public static class RegexMatchResult extends ForwardingMap<String,String> {
    private final boolean matches;
    private final ImmutableMap<String,String> groups;
    public RegexMatchResult(    boolean matches,    MatchResult matchResult,    List<String> groupNames){
      this.matches=matches;
      ImmutableMap.Builder<String,String> builder=ImmutableMap.<String,String>builder();
      if (matches) {
        final int groupCount=matchResult.groupCount();
        for (int i=1; i <= groupCount; i++) {
          final String groupValue=matchResult.group(i);
          final String groupName=Iterables.get(groupNames,i - 1,null);
          builder.put(groupName != null ? groupName : String.valueOf(i - 1),groupValue);
        }
      }
      groups=builder.build();
    }
    public boolean isMatches(){
      return matches;
    }
    public Map<String,String> getGroups(){
      return groups;
    }
    @Override protected Map<String,String> delegate(){
      return getGroups();
    }
  }
}
