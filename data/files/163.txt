package org.springframework.web.accept;
import org.junit.Assert.assertEquals;
import org.junit.Assert.assertTrue;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.junit.Before;
import org.junit.Test;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.context.request.ServletWebRequest;
public class PathExtensionContentNegotiationStrategyTests {
  private NativeWebRequest webRequest;
  private MockHttpServletRequest servletRequest;
  @Before public void setup(){
    this.servletRequest=new MockHttpServletRequest();
    this.webRequest=new ServletWebRequest(servletRequest);
  }
  @Test public void resolveMediaTypesFromMapping(){
    this.servletRequest.setRequestURI("test.html");
    PathExtensionContentNegotiationStrategy strategy=new PathExtensionContentNegotiationStrategy();
    List<MediaType> mediaTypes=strategy.resolveMediaTypes(this.webRequest);
    assertEquals(Arrays.asList(new MediaType("text","html")),mediaTypes);
    strategy=new PathExtensionContentNegotiationStrategy(Collections.singletonMap("HTML","application/xhtml+xml"));
    mediaTypes=strategy.resolveMediaTypes(this.webRequest);
    assertEquals(Arrays.asList(new MediaType("application","xhtml+xml")),mediaTypes);
  }
  @Test public void resolveMediaTypesFromJaf(){
    this.servletRequest.setRequestURI("test.xls");
    PathExtensionContentNegotiationStrategy strategy=new PathExtensionContentNegotiationStrategy();
    List<MediaType> mediaTypes=strategy.resolveMediaTypes(this.webRequest);
    assertEquals(Arrays.asList(new MediaType("application","vnd.ms-excel")),mediaTypes);
  }
  @Test public void getMediaTypeFromFilenameNoJaf(){
    this.servletRequest.setRequestURI("test.xls");
    PathExtensionContentNegotiationStrategy strategy=new PathExtensionContentNegotiationStrategy();
    strategy.setUseJaf(false);
    List<MediaType> mediaTypes=strategy.resolveMediaTypes(this.webRequest);
    assertEquals(Arrays.asList(MediaType.APPLICATION_OCTET_STREAM),mediaTypes);
  }
  @Test public void getMediaTypeFilenameWithContextPath(){
    this.servletRequest.setContextPath("/project-1.0.0.M3");
    this.servletRequest.setRequestURI("/project-1.0.0.M3/");
    PathExtensionContentNegotiationStrategy strategy=new PathExtensionContentNegotiationStrategy();
    assertTrue("Context path should be excluded",strategy.resolveMediaTypes(webRequest).isEmpty());
    this.servletRequest.setRequestURI("/project-1.0.0.M3");
    assertTrue("Context path should be excluded",strategy.resolveMediaTypes(webRequest).isEmpty());
  }
  @Test public void getMediaTypeFilenameWithEncodedURI(){
    this.servletRequest.setRequestURI("/quo%20vadis%3f.html");
    PathExtensionContentNegotiationStrategy strategy=new PathExtensionContentNegotiationStrategy();
    List<MediaType> result=strategy.resolveMediaTypes(webRequest);
    assertEquals("Invalid content type",Collections.singletonList(new MediaType("text","html")),result);
  }
}
