package org.voltdb;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import org.voltdb.CatalogContext.ProcedurePartitionInfo;
import org.voltdb.catalog.Catalog;
import org.voltdb.catalog.CatalogMap;
import org.voltdb.catalog.Column;
import org.voltdb.catalog.ColumnRef;
import org.voltdb.catalog.Constraint;
import org.voltdb.catalog.Database;
import org.voltdb.catalog.ProcParameter;
import org.voltdb.catalog.Procedure;
import org.voltdb.catalog.Table;
import org.voltdb.types.ConstraintType;
import org.voltdb.utils.CatalogUtil;
public class DefaultProcedureManager {
  Map<String,Procedure> m_defaultProcMap=new HashMap<>();
  final Database m_db;
  final Database m_fakeDb;
  public DefaultProcedureManager(  Database db){
    m_db=db;
    m_fakeDb=new Catalog().getClusters().add("cluster").getDatabases().add("database");
    build();
  }
  public Procedure checkForDefaultProcedure(  String name){
    return m_defaultProcMap.get(name.toLowerCase());
  }
  private void build(){
    for (    Table table : m_db.getTables()) {
      String prefix=table.getTypeName() + '.';
      if (CatalogUtil.isTableExportOnly(m_db,table)) {
        continue;
      }
      if (table.getMaterializer() != null) {
        continue;
      }
      final CatalogMap<Constraint> constraints=table.getConstraints();
      final Iterator<Constraint> it=constraints.iterator();
      Constraint pkey=null;
      while (it.hasNext()) {
        Constraint constraint=it.next();
        if (constraint.getType() == ConstraintType.PRIMARY_KEY.getValue()) {
          pkey=constraint;
          break;
        }
      }
      if (table.getIsreplicated()) {
        addShimProcedure(prefix + "insert",table,null,true,-1,null,false);
        if (pkey != null) {
          addShimProcedure(prefix + "delete",table,pkey,false,-1,null,false);
          addShimProcedure(prefix + "update",table,pkey,true,-1,null,false);
          addShimProcedure(prefix + "upsert",table,null,true,-1,null,false);
        }
        continue;
      }
      final Column partitioncolumn=table.getPartitioncolumn();
      final int partitionIndex=partitioncolumn.getIndex();
      addShimProcedure(prefix + "insert",table,null,true,partitionIndex,partitioncolumn,false);
      if (pkey == null) {
        continue;
      }
      int pkeyPartitionIndex=-1;
      CatalogMap<ColumnRef> pkeycols=pkey.getIndex().getColumns();
      Iterator<ColumnRef> pkeycolsit=pkeycols.iterator();
      while (pkeycolsit.hasNext()) {
        ColumnRef colref=pkeycolsit.next();
        if (colref.getColumn().equals(partitioncolumn)) {
          pkeyPartitionIndex=colref.getIndex();
          break;
        }
      }
      if (pkeyPartitionIndex < 0) {
        continue;
      }
      int columnCount=table.getColumns().size();
      addShimProcedure(prefix + "select",table,pkey,false,pkeyPartitionIndex,partitioncolumn,true);
      addShimProcedure(prefix + "delete",table,pkey,false,pkeyPartitionIndex,partitioncolumn,false);
      addShimProcedure(prefix + "update",table,pkey,true,columnCount + pkeyPartitionIndex,partitioncolumn,false);
      addShimProcedure(prefix + "upsert",table,null,true,partitionIndex,partitioncolumn,false);
    }
  }
  public String sqlForDefaultProc(  Procedure defaultProc){
    String name=defaultProc.getClassname();
    String[] parts=name.split("\\.");
    String action=parts[1];
    Table table=defaultProc.getPartitiontable();
    Column partitionColumn=defaultProc.getPartitioncolumn();
    final CatalogMap<Constraint> constraints=table.getConstraints();
    final Iterator<Constraint> it=constraints.iterator();
    Constraint pkey=null;
    while (it.hasNext()) {
      Constraint constraint=it.next();
      if (constraint.getType() == ConstraintType.PRIMARY_KEY.getValue()) {
        pkey=constraint;
        break;
      }
    }
switch (action) {
case "select":
      assert(defaultProc.getSinglepartition());
    return generateCrudSelect(table,partitionColumn,pkey);
case "insert":
  if (defaultProc.getSinglepartition()) {
    return generateCrudInsert(table,partitionColumn);
  }
 else {
    return generateCrudReplicatedInsert(table);
  }
case "update":
if (defaultProc.getSinglepartition()) {
  return generateCrudUpdate(table,partitionColumn,pkey);
}
 else {
  return generateCrudReplicatedUpdate(table,pkey);
}
case "delete":
if (defaultProc.getSinglepartition()) {
return generateCrudDelete(table,partitionColumn,pkey);
}
 else {
return generateCrudReplicatedDelete(table,pkey);
}
case "upsert":
if (defaultProc.getSinglepartition()) {
return generateCrudUpsert(table,partitionColumn);
}
 else {
return generateCrudReplicatedUpsert(table,pkey);
}
default :
throw new RuntimeException("Invalid input to default proc SQL generator.");
}
}
private static class TableColumnComparator implements Comparator<Column> {
public TableColumnComparator(){
}
@Override public int compare(Column o1,Column o2){
return o1.getIndex() - o2.getIndex();
}
}
private static class ColumnRefComparator implements Comparator<ColumnRef> {
public ColumnRefComparator(){
}
@Override public int compare(ColumnRef o1,ColumnRef o2){
return o1.getIndex() - o2.getIndex();
}
}
private int generateCrudPKeyWhereClause(Column partitioncolumn,Constraint pkey,StringBuilder sb){
ArrayList<ColumnRef> indexColumns=new ArrayList<ColumnRef>(pkey.getIndex().getColumns().size());
for (ColumnRef c : pkey.getIndex().getColumns()) {
indexColumns.add(c);
}
Collections.sort(indexColumns,new ColumnRefComparator());
boolean first=true;
int partitionOffset=-1;
sb.append(" WHERE ");
for (ColumnRef pkc : indexColumns) {
if (!first) sb.append(" AND ");
first=false;
sb.append("(" + pkc.getColumn().getName() + " = ?"+ ")");
if (pkc.getColumn() == partitioncolumn) {
partitionOffset=pkc.getIndex();
}
}
return partitionOffset;
}
private void generateCrudExpressionColumns(Table table,StringBuilder sb){
boolean first=true;
ArrayList<Column> tableColumns=new ArrayList<Column>(table.getColumns().size());
for (Column c : table.getColumns()) {
tableColumns.add(c);
}
Collections.sort(tableColumns,new TableColumnComparator());
for (Column c : tableColumns) {
if (!first) sb.append(", ");
first=false;
sb.append(c.getName() + " = ?");
}
}
private void generateCrudColumnList(Table table,StringBuilder sb){
boolean first=true;
sb.append("(");
ArrayList<Column> tableColumns=new ArrayList<Column>(table.getColumns().size());
for (Column c : table.getColumns()) {
tableColumns.add(c);
}
Collections.sort(tableColumns,new TableColumnComparator());
for (Column c : tableColumns) {
assert(c.getIndex() >= 0);
if (!first) sb.append(", ");
first=false;
sb.append("?");
}
sb.append(")");
}
private String generateCrudDelete(Table table,Column partitioncolumn,Constraint pkey){
StringBuilder sb=new StringBuilder();
sb.append("DELETE FROM " + table.getTypeName());
generateCrudPKeyWhereClause(partitioncolumn,pkey,sb);
sb.append(';');
return sb.toString();
}
private String generateCrudUpdate(Table table,Column partitioncolumn,Constraint pkey){
StringBuilder sb=new StringBuilder();
sb.append("UPDATE " + table.getTypeName() + " SET ");
generateCrudExpressionColumns(table,sb);
generateCrudPKeyWhereClause(partitioncolumn,pkey,sb);
sb.append(';');
return sb.toString();
}
private String generateCrudInsert(Table table,Column partitioncolumn){
StringBuilder sb=new StringBuilder();
sb.append("INSERT INTO " + table.getTypeName() + " VALUES ");
generateCrudColumnList(table,sb);
sb.append(";");
return sb.toString();
}
private String generateCrudUpsert(Table table,Column partitioncolumn){
StringBuilder sb=new StringBuilder();
sb.append("UPSERT INTO " + table.getTypeName() + " VALUES ");
generateCrudColumnList(table,sb);
sb.append(";");
return sb.toString();
}
private String generateCrudReplicatedInsert(Table table){
StringBuilder sb=new StringBuilder();
sb.append("INSERT INTO " + table.getTypeName() + " VALUES ");
generateCrudColumnList(table,sb);
sb.append(";");
return sb.toString();
}
private String generateCrudReplicatedUpdate(Table table,Constraint pkey){
StringBuilder sb=new StringBuilder();
sb.append("UPDATE " + table.getTypeName() + " SET ");
generateCrudExpressionColumns(table,sb);
generateCrudPKeyWhereClause(null,pkey,sb);
sb.append(';');
return sb.toString();
}
private String generateCrudReplicatedDelete(Table table,Constraint pkey){
StringBuilder sb=new StringBuilder();
sb.append("DELETE FROM " + table.getTypeName());
generateCrudPKeyWhereClause(null,pkey,sb);
sb.append(';');
return sb.toString();
}
private String generateCrudReplicatedUpsert(Table table,Constraint pkey){
StringBuilder sb=new StringBuilder();
sb.append("UPSERT INTO " + table.getTypeName() + " VALUES ");
generateCrudColumnList(table,sb);
sb.append(";");
return sb.toString();
}
private String generateCrudSelect(Table table,Column partitioncolumn,Constraint pkey){
StringBuilder sb=new StringBuilder();
sb.append("SELECT * FROM " + table.getTypeName());
generateCrudPKeyWhereClause(partitioncolumn,pkey,sb);
sb.append(';');
return sb.toString();
}
private void addShimProcedure(String name,Table table,Constraint pkey,boolean tableCols,int partitionParamIndex,Column partitionColumn,boolean readOnly){
Procedure proc=m_fakeDb.getProcedures().add(name);
proc.setClassname(name);
proc.setDefaultproc(true);
proc.setHasjava(false);
proc.setHasseqscans(false);
proc.setSinglepartition(partitionParamIndex >= 0);
proc.setPartitioncolumn(partitionColumn);
proc.setPartitionparameter(partitionParamIndex);
proc.setReadonly(readOnly);
proc.setEverysite(false);
proc.setSystemproc(false);
proc.setPartitiontable(table);
if (partitionParamIndex >= 0) {
proc.setAttachment(new ProcedurePartitionInfo(VoltType.get((byte)partitionColumn.getType()),partitionParamIndex));
}
int paramCount=0;
if (tableCols) {
for (Column col : table.getColumns()) {
ProcParameter procParam=proc.getParameters().add("param" + String.valueOf(paramCount));
procParam.setIndex(col.getIndex());
procParam.setIsarray(false);
procParam.setType(col.getType());
paramCount++;
}
}
if (pkey != null) {
CatalogMap<ColumnRef> pkeycols=pkey.getIndex().getColumns();
int paramCount2=paramCount;
for (ColumnRef cref : pkeycols) {
ProcParameter procParam=proc.getParameters().add("param" + String.valueOf(paramCount2));
procParam.setIndex(cref.getIndex() + paramCount);
procParam.setIsarray(false);
procParam.setType(cref.getColumn().getType());
paramCount2++;
}
}
m_defaultProcMap.put(name.toLowerCase(),proc);
}
}
