package com.android.internal.policy.impl;
import android.provider.Settings.System.SCREEN_OFF_TIMEOUT;
import com.android.internal.policy.impl.KeyguardUpdateMonitor.InfoCallbackImpl;
import com.android.internal.telephony.IccCard;
import com.android.internal.widget.LockPatternUtils;
import android.app.ActivityManagerNative;
import android.app.AlarmManager;
import android.app.PendingIntent;
import android.app.StatusBarManager;
import android.content.BroadcastReceiver;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.media.AudioManager;
import android.media.SoundPool;
import android.os.Handler;
import android.os.LocalPowerManager;
import android.os.Message;
import android.os.PowerManager;
import android.os.RemoteException;
import android.os.SystemClock;
import android.os.SystemProperties;
import android.provider.Settings;
import android.telephony.TelephonyManager;
import android.util.EventLog;
import android.util.Log;
import android.view.KeyEvent;
import android.view.WindowManagerImpl;
import android.view.WindowManagerPolicy;
public class KeyguardViewMediator implements KeyguardViewCallback, KeyguardUpdateMonitor.SimStateCallback {
  private static final int KEYGUARD_DISPLAY_TIMEOUT_DELAY_DEFAULT=30000;
  private final static boolean DEBUG=false;
  private final static boolean DBG_WAKE=false;
  private final static String TAG="KeyguardViewMediator";
  private static final String DELAYED_KEYGUARD_ACTION="com.android.internal.policy.impl.PhoneWindowManager.DELAYED_KEYGUARD";
  private static final int TIMEOUT=1;
  private static final int SHOW=2;
  private static final int HIDE=3;
  private static final int RESET=4;
  private static final int VERIFY_UNLOCK=5;
  private static final int NOTIFY_SCREEN_OFF=6;
  private static final int NOTIFY_SCREEN_ON=7;
  private static final int WAKE_WHEN_READY=8;
  private static final int KEYGUARD_DONE=9;
  private static final int KEYGUARD_DONE_DRAWING=10;
  private static final int KEYGUARD_DONE_AUTHENTICATING=11;
  private static final int SET_HIDDEN=12;
  private static final int KEYGUARD_TIMEOUT=13;
  protected static final int AWAKE_INTERVAL_DEFAULT_MS=10000;
  private static final int KEYGUARD_LOCK_AFTER_DELAY_DEFAULT=5000;
  private static final int KEYGUARD_DONE_DRAWING_TIMEOUT_MS=2000;
  private static final boolean ENABLE_INSECURE_STATUS_BAR_EXPAND=true;
  private int mMasterStreamType;
  private Context mContext;
  private AlarmManager mAlarmManager;
  private AudioManager mAudioManager;
  private StatusBarManager mStatusBarManager;
  private boolean mShowLockIcon;
  private boolean mShowingLockIcon;
  private boolean mSystemReady;
  private boolean mSuppressNextLockSound=true;
  LocalPowerManager mRealPowerManager;
  private PowerManager mPM;
  private PowerManager.WakeLock mWakeLock;
  private PowerManager.WakeLock mShowKeyguardWakeLock;
  private PowerManager.WakeLock mWakeAndHandOff;
  private KeyguardViewManager mKeyguardViewManager;
  private boolean mExternallyEnabled=true;
  private boolean mNeedToReshowWhenReenabled=false;
  private boolean mShowing=false;
  private boolean mHidden=false;
  private int mDelayedShowingSequence;
  private int mWakelockSequence;
  private PhoneWindowManager mCallback;
  private WindowManagerPolicy.OnKeyguardExitResult mExitSecureCallback;
  private KeyguardViewProperties mKeyguardViewProperties;
  private KeyguardUpdateMonitor mUpdateMonitor;
  private boolean mScreenOn=false;
  private String mPhoneState=TelephonyManager.EXTRA_STATE_IDLE;
  private Intent mUserPresentIntent;
  private boolean mWaitingUntilKeyguardVisible=false;
  private LockPatternUtils mLockPatternUtils;
  private SoundPool mLockSounds;
  private int mLockSoundId;
  private int mUnlockSoundId;
  private int mLockSoundStreamId;
  private final float mLockSoundVolume;
  InfoCallbackImpl mInfoCallback=new InfoCallbackImpl(){
    @Override public void onClockVisibilityChanged(){
      adjustStatusBarLocked();
    }
    @Override public void onDeviceProvisioned(){
      mContext.sendBroadcast(mUserPresentIntent);
    }
  }
;
  public KeyguardViewMediator(  Context context,  PhoneWindowManager callback,  LocalPowerManager powerManager){
    mContext=context;
    mRealPowerManager=powerManager;
    mPM=(PowerManager)context.getSystemService(Context.POWER_SERVICE);
    mWakeLock=mPM.newWakeLock(PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP,"keyguard");
    mWakeLock.setReferenceCounted(false);
    mShowKeyguardWakeLock=mPM.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,"show keyguard");
    mShowKeyguardWakeLock.setReferenceCounted(false);
    mWakeAndHandOff=mPM.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,"keyguardWakeAndHandOff");
    mWakeAndHandOff.setReferenceCounted(false);
    IntentFilter filter=new IntentFilter();
    filter.addAction(DELAYED_KEYGUARD_ACTION);
    filter.addAction(TelephonyManager.ACTION_PHONE_STATE_CHANGED);
    context.registerReceiver(mBroadCastReceiver,filter);
    mAlarmManager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);
    mCallback=callback;
    mUpdateMonitor=new KeyguardUpdateMonitor(context);
    mUpdateMonitor.registerInfoCallback(mInfoCallback);
    mUpdateMonitor.registerSimStateCallback(this);
    mLockPatternUtils=new LockPatternUtils(mContext);
    mKeyguardViewProperties=new LockPatternKeyguardViewProperties(mLockPatternUtils,mUpdateMonitor);
    mKeyguardViewManager=new KeyguardViewManager(context,WindowManagerImpl.getDefault(),this,mKeyguardViewProperties,mUpdateMonitor);
    mUserPresentIntent=new Intent(Intent.ACTION_USER_PRESENT);
    mUserPresentIntent.addFlags(Intent.FLAG_RECEIVER_REPLACE_PENDING | Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT);
    final ContentResolver cr=mContext.getContentResolver();
    mShowLockIcon=(Settings.System.getInt(cr,"show_status_bar_lock",0) == 1);
    mLockSounds=new SoundPool(1,AudioManager.STREAM_SYSTEM,0);
    String soundPath=Settings.System.getString(cr,Settings.System.LOCK_SOUND);
    if (soundPath != null) {
      mLockSoundId=mLockSounds.load(soundPath,1);
    }
    if (soundPath == null || mLockSoundId == 0) {
      if (DEBUG)       Log.d(TAG,"failed to load sound from " + soundPath);
    }
    soundPath=Settings.System.getString(cr,Settings.System.UNLOCK_SOUND);
    if (soundPath != null) {
      mUnlockSoundId=mLockSounds.load(soundPath,1);
    }
    if (soundPath == null || mUnlockSoundId == 0) {
      if (DEBUG)       Log.d(TAG,"failed to load sound from " + soundPath);
    }
    int lockSoundDefaultAttenuation=context.getResources().getInteger(com.android.internal.R.integer.config_lockSoundVolumeDb);
    mLockSoundVolume=(float)Math.pow(10,lockSoundDefaultAttenuation / 20);
    IntentFilter userFilter=new IntentFilter();
    userFilter.addAction(Intent.ACTION_USER_SWITCHED);
    userFilter.addAction(Intent.ACTION_USER_REMOVED);
    mContext.registerReceiver(mUserChangeReceiver,userFilter);
  }
  public void onSystemReady(){
synchronized (this) {
      if (DEBUG)       Log.d(TAG,"onSystemReady");
      mSystemReady=true;
      doKeyguardLocked();
    }
  }
  public void onScreenTurnedOff(  int why){
synchronized (this) {
      mScreenOn=false;
      if (DEBUG)       Log.d(TAG,"onScreenTurnedOff(" + why + ")");
      final boolean lockImmediately=mLockPatternUtils.getPowerButtonInstantlyLocks() || !mLockPatternUtils.isSecure();
      if (mExitSecureCallback != null) {
        if (DEBUG)         Log.d(TAG,"pending exit secure callback cancelled");
        mExitSecureCallback.onKeyguardExitResult(false);
        mExitSecureCallback=null;
        if (!mExternallyEnabled) {
          hideLocked();
        }
      }
 else       if (mShowing) {
        notifyScreenOffLocked();
        resetStateLocked();
      }
 else       if (why == WindowManagerPolicy.OFF_BECAUSE_OF_TIMEOUT || (why == WindowManagerPolicy.OFF_BECAUSE_OF_USER && !lockImmediately)) {
        final ContentResolver cr=mContext.getContentResolver();
        long displayTimeout=Settings.System.getInt(cr,SCREEN_OFF_TIMEOUT,KEYGUARD_DISPLAY_TIMEOUT_DELAY_DEFAULT);
        final long lockAfterTimeout=Settings.Secure.getInt(cr,Settings.Secure.LOCK_SCREEN_LOCK_AFTER_TIMEOUT,KEYGUARD_LOCK_AFTER_DELAY_DEFAULT);
        final long policyTimeout=mLockPatternUtils.getDevicePolicyManager().getMaximumTimeToLock(null);
        long timeout;
        if (policyTimeout > 0) {
          displayTimeout=Math.max(displayTimeout,0);
          timeout=Math.min(policyTimeout - displayTimeout,lockAfterTimeout);
        }
 else {
          timeout=lockAfterTimeout;
        }
        if (timeout <= 0) {
          mSuppressNextLockSound=true;
          doKeyguardLocked();
        }
 else {
          long when=SystemClock.elapsedRealtime() + timeout;
          Intent intent=new Intent(DELAYED_KEYGUARD_ACTION);
          intent.putExtra("seq",mDelayedShowingSequence);
          PendingIntent sender=PendingIntent.getBroadcast(mContext,0,intent,PendingIntent.FLAG_CANCEL_CURRENT);
          mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender);
          if (DEBUG)           Log.d(TAG,"setting alarm to turn off keyguard, seq = " + mDelayedShowingSequence);
        }
      }
 else       if (why == WindowManagerPolicy.OFF_BECAUSE_OF_PROX_SENSOR) {
      }
 else {
        doKeyguardLocked();
      }
    }
  }
  public void onScreenTurnedOn(  KeyguardViewManager.ShowListener showListener){
synchronized (this) {
      mScreenOn=true;
      mDelayedShowingSequence++;
      if (DEBUG)       Log.d(TAG,"onScreenTurnedOn, seq = " + mDelayedShowingSequence);
      if (showListener != null) {
        notifyScreenOnLocked(showListener);
      }
    }
  }
  public void setKeyguardEnabled(  boolean enabled){
synchronized (this) {
      if (DEBUG)       Log.d(TAG,"setKeyguardEnabled(" + enabled + ")");
      mExternallyEnabled=enabled;
      if (!enabled && mShowing) {
        if (mExitSecureCallback != null) {
          if (DEBUG)           Log.d(TAG,"in process of verifyUnlock request, ignoring");
          return;
        }
        if (DEBUG)         Log.d(TAG,"remembering to reshow, hiding keyguard, " + "disabling status bar expansion");
        mNeedToReshowWhenReenabled=true;
        hideLocked();
      }
 else       if (enabled && mNeedToReshowWhenReenabled) {
        if (DEBUG)         Log.d(TAG,"previously hidden, reshowing, reenabling " + "status bar expansion");
        mNeedToReshowWhenReenabled=false;
        if (mExitSecureCallback != null) {
          if (DEBUG)           Log.d(TAG,"onKeyguardExitResult(false), resetting");
          mExitSecureCallback.onKeyguardExitResult(false);
          mExitSecureCallback=null;
          resetStateLocked();
        }
 else {
          showLocked();
          mWaitingUntilKeyguardVisible=true;
          mHandler.sendEmptyMessageDelayed(KEYGUARD_DONE_DRAWING,KEYGUARD_DONE_DRAWING_TIMEOUT_MS);
          if (DEBUG)           Log.d(TAG,"waiting until mWaitingUntilKeyguardVisible is false");
          while (mWaitingUntilKeyguardVisible) {
            try {
              wait();
            }
 catch (            InterruptedException e) {
              Thread.currentThread().interrupt();
            }
          }
          if (DEBUG)           Log.d(TAG,"done waiting for mWaitingUntilKeyguardVisible");
        }
      }
    }
  }
  public void verifyUnlock(  WindowManagerPolicy.OnKeyguardExitResult callback){
synchronized (this) {
      if (DEBUG)       Log.d(TAG,"verifyUnlock");
      if (!mUpdateMonitor.isDeviceProvisioned()) {
        if (DEBUG)         Log.d(TAG,"ignoring because device isn't provisioned");
        callback.onKeyguardExitResult(false);
      }
 else       if (mExternallyEnabled) {
        Log.w(TAG,"verifyUnlock called when not externally disabled");
        callback.onKeyguardExitResult(false);
      }
 else       if (mExitSecureCallback != null) {
        callback.onKeyguardExitResult(false);
      }
 else {
        mExitSecureCallback=callback;
        verifyUnlockLocked();
      }
    }
  }
  public boolean isShowing(){
    return mShowing;
  }
  public boolean isShowingAndNotHidden(){
    return mShowing && !mHidden;
  }
  public void setHidden(  boolean isHidden){
    if (DEBUG)     Log.d(TAG,"setHidden " + isHidden);
    mHandler.removeMessages(SET_HIDDEN);
    Message msg=mHandler.obtainMessage(SET_HIDDEN,(isHidden ? 1 : 0),0);
    mHandler.sendMessage(msg);
  }
  private void handleSetHidden(  boolean isHidden){
synchronized (KeyguardViewMediator.this) {
      if (mHidden != isHidden) {
        mHidden=isHidden;
        updateActivityLockScreenState();
        adjustUserActivityLocked();
        adjustStatusBarLocked();
      }
    }
  }
  public void doKeyguardTimeout(){
    mHandler.removeMessages(KEYGUARD_TIMEOUT);
    Message msg=mHandler.obtainMessage(KEYGUARD_TIMEOUT);
    mHandler.sendMessage(msg);
  }
  public boolean isInputRestricted(){
    return mShowing || mNeedToReshowWhenReenabled || !mUpdateMonitor.isDeviceProvisioned();
  }
  private void doKeyguardLocked(){
    if (!mExternallyEnabled) {
      if (DEBUG)       Log.d(TAG,"doKeyguard: not showing because externally disabled");
      return;
    }
    if (mKeyguardViewManager.isShowing()) {
      if (DEBUG)       Log.d(TAG,"doKeyguard: not showing because it is already showing");
      return;
    }
    final boolean requireSim=!SystemProperties.getBoolean("keyguard.no_require_sim",false);
    final boolean provisioned=mUpdateMonitor.isDeviceProvisioned();
    final IccCard.State state=mUpdateMonitor.getSimState();
    final boolean lockedOrMissing=state.isPinLocked() || ((state == IccCard.State.ABSENT || state == IccCard.State.PERM_DISABLED) && requireSim);
    if (!lockedOrMissing && !provisioned) {
      if (DEBUG)       Log.d(TAG,"doKeyguard: not showing because device isn't provisioned" + " and the sim is not locked or missing");
      return;
    }
    if (mLockPatternUtils.isLockScreenDisabled() && !lockedOrMissing) {
      if (DEBUG)       Log.d(TAG,"doKeyguard: not showing because lockscreen is off");
      return;
    }
    if (DEBUG)     Log.d(TAG,"doKeyguard: showing the lock screen");
    showLocked();
  }
  private void resetStateLocked(){
    if (DEBUG)     Log.d(TAG,"resetStateLocked");
    Message msg=mHandler.obtainMessage(RESET);
    mHandler.sendMessage(msg);
  }
  private void verifyUnlockLocked(){
    if (DEBUG)     Log.d(TAG,"verifyUnlockLocked");
    mHandler.sendEmptyMessage(VERIFY_UNLOCK);
  }
  private void notifyScreenOffLocked(){
    if (DEBUG)     Log.d(TAG,"notifyScreenOffLocked");
    mHandler.sendEmptyMessage(NOTIFY_SCREEN_OFF);
  }
  private void notifyScreenOnLocked(  KeyguardViewManager.ShowListener showListener){
    if (DEBUG)     Log.d(TAG,"notifyScreenOnLocked");
    Message msg=mHandler.obtainMessage(NOTIFY_SCREEN_ON,showListener);
    mHandler.sendMessage(msg);
  }
  private void wakeWhenReadyLocked(  int keyCode){
    if (DBG_WAKE)     Log.d(TAG,"wakeWhenReadyLocked(" + keyCode + ")");
    mWakeAndHandOff.acquire();
    Message msg=mHandler.obtainMessage(WAKE_WHEN_READY,keyCode,0);
    mHandler.sendMessage(msg);
  }
  private void showLocked(){
    if (DEBUG)     Log.d(TAG,"showLocked");
    mShowKeyguardWakeLock.acquire();
    Message msg=mHandler.obtainMessage(SHOW);
    mHandler.sendMessage(msg);
  }
  private void hideLocked(){
    if (DEBUG)     Log.d(TAG,"hideLocked");
    Message msg=mHandler.obtainMessage(HIDE);
    mHandler.sendMessage(msg);
  }
  public void onSimStateChanged(  IccCard.State simState){
    if (DEBUG)     Log.d(TAG,"onSimStateChanged: " + simState);
switch (simState) {
case ABSENT:
synchronized (this) {
        if (!mUpdateMonitor.isDeviceProvisioned()) {
          if (!isShowing()) {
            if (DEBUG)             Log.d(TAG,"ICC_ABSENT isn't showing," + " we need to show the keyguard since the " + "device isn't provisioned yet.");
            doKeyguardLocked();
          }
 else {
            resetStateLocked();
          }
        }
      }
    break;
case PIN_REQUIRED:
case PUK_REQUIRED:
synchronized (this) {
    if (!isShowing()) {
      if (DEBUG)       Log.d(TAG,"INTENT_VALUE_ICC_LOCKED and keygaurd isn't showing, " + "we need to show keyguard so user can enter their sim pin");
      doKeyguardLocked();
    }
 else {
      resetStateLocked();
    }
  }
break;
case PERM_DISABLED:
synchronized (this) {
if (!isShowing()) {
  if (DEBUG)   Log.d(TAG,"PERM_DISABLED and " + "keygaurd isn't showing.");
  doKeyguardLocked();
}
 else {
  if (DEBUG)   Log.d(TAG,"PERM_DISABLED, resetStateLocked to" + "show permanently disabled message in lockscreen.");
  resetStateLocked();
}
}
break;
case READY:
synchronized (this) {
if (isShowing()) {
resetStateLocked();
}
}
break;
}
}
public boolean isSecure(){
return mKeyguardViewProperties.isSecure();
}
private void onUserSwitched(int userId){
mLockPatternUtils.setCurrentUser(userId);
synchronized (KeyguardViewMediator.this) {
resetStateLocked();
}
}
private void onUserRemoved(int userId){
mLockPatternUtils.removeUser(userId);
}
private BroadcastReceiver mUserChangeReceiver=new BroadcastReceiver(){
@Override public void onReceive(Context context,Intent intent){
String action=intent.getAction();
if (Intent.ACTION_USER_SWITCHED.equals(action)) {
onUserSwitched(intent.getIntExtra(Intent.EXTRA_USERID,0));
}
 else if (Intent.ACTION_USER_REMOVED.equals(action)) {
onUserRemoved(intent.getIntExtra(Intent.EXTRA_USERID,0));
}
}
}
;
private BroadcastReceiver mBroadCastReceiver=new BroadcastReceiver(){
@Override public void onReceive(Context context,Intent intent){
final String action=intent.getAction();
if (action.equals(DELAYED_KEYGUARD_ACTION)) {
int sequence=intent.getIntExtra("seq",0);
if (DEBUG) Log.d(TAG,"received DELAYED_KEYGUARD_ACTION with seq = " + sequence + ", mDelayedShowingSequence = "+ mDelayedShowingSequence);
synchronized (KeyguardViewMediator.this) {
if (mDelayedShowingSequence == sequence) {
mSuppressNextLockSound=true;
doKeyguardLocked();
}
}
}
 else if (TelephonyManager.ACTION_PHONE_STATE_CHANGED.equals(action)) {
mPhoneState=intent.getStringExtra(TelephonyManager.EXTRA_STATE);
synchronized (KeyguardViewMediator.this) {
if (TelephonyManager.EXTRA_STATE_IDLE.equals(mPhoneState) && !mScreenOn && mExternallyEnabled) {
if (DEBUG) Log.d(TAG,"screen is off and call ended, let's make sure the " + "keyguard is showing");
doKeyguardLocked();
}
}
}
}
}
;
public boolean onWakeKeyWhenKeyguardShowingTq(int keyCode,boolean isDocked){
if (DEBUG) Log.d(TAG,"onWakeKeyWhenKeyguardShowing(" + keyCode + ")");
if (isWakeKeyWhenKeyguardShowing(keyCode,isDocked)) {
wakeWhenReadyLocked(keyCode);
return true;
}
 else {
return false;
}
}
private boolean isWakeKeyWhenKeyguardShowing(int keyCode,boolean isDocked){
switch (keyCode) {
case KeyEvent.KEYCODE_VOLUME_UP:
case KeyEvent.KEYCODE_VOLUME_DOWN:
case KeyEvent.KEYCODE_VOLUME_MUTE:
return isDocked;
case KeyEvent.KEYCODE_MUTE:
case KeyEvent.KEYCODE_HEADSETHOOK:
case KeyEvent.KEYCODE_MEDIA_PLAY:
case KeyEvent.KEYCODE_MEDIA_PAUSE:
case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
case KeyEvent.KEYCODE_MEDIA_STOP:
case KeyEvent.KEYCODE_MEDIA_NEXT:
case KeyEvent.KEYCODE_MEDIA_PREVIOUS:
case KeyEvent.KEYCODE_MEDIA_REWIND:
case KeyEvent.KEYCODE_MEDIA_RECORD:
case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:
case KeyEvent.KEYCODE_CAMERA:
return false;
}
return true;
}
public boolean onWakeMotionWhenKeyguardShowingTq(){
if (DEBUG) Log.d(TAG,"onWakeMotionWhenKeyguardShowing()");
wakeWhenReadyLocked(KeyEvent.KEYCODE_UNKNOWN);
return true;
}
public void pokeWakelock(){
pokeWakelock(AWAKE_INTERVAL_DEFAULT_MS);
}
public void pokeWakelock(int holdMs){
synchronized (this) {
if (DBG_WAKE) Log.d(TAG,"pokeWakelock(" + holdMs + ")");
mWakeLock.acquire();
mHandler.removeMessages(TIMEOUT);
mWakelockSequence++;
Message msg=mHandler.obtainMessage(TIMEOUT,mWakelockSequence,0);
mHandler.sendMessageDelayed(msg,holdMs);
}
}
public void keyguardDone(boolean authenticated){
keyguardDone(authenticated,true);
}
public void keyguardDone(boolean authenticated,boolean wakeup){
synchronized (this) {
EventLog.writeEvent(70000,2);
if (DEBUG) Log.d(TAG,"keyguardDone(" + authenticated + ")");
Message msg=mHandler.obtainMessage(KEYGUARD_DONE);
msg.arg1=wakeup ? 1 : 0;
mHandler.sendMessage(msg);
if (authenticated) {
mUpdateMonitor.clearFailedAttempts();
}
if (mExitSecureCallback != null) {
mExitSecureCallback.onKeyguardExitResult(authenticated);
mExitSecureCallback=null;
if (authenticated) {
mExternallyEnabled=true;
mNeedToReshowWhenReenabled=false;
}
}
}
}
public void keyguardDoneDrawing(){
mHandler.sendEmptyMessage(KEYGUARD_DONE_DRAWING);
}
private Handler mHandler=new Handler(){
@Override public void handleMessage(Message msg){
switch (msg.what) {
case TIMEOUT:
handleTimeout(msg.arg1);
return;
case SHOW:
handleShow();
return;
case HIDE:
handleHide();
return;
case RESET:
handleReset();
return;
case VERIFY_UNLOCK:
handleVerifyUnlock();
return;
case NOTIFY_SCREEN_OFF:
handleNotifyScreenOff();
return;
case NOTIFY_SCREEN_ON:
handleNotifyScreenOn((KeyguardViewManager.ShowListener)msg.obj);
return;
case WAKE_WHEN_READY:
handleWakeWhenReady(msg.arg1);
return;
case KEYGUARD_DONE:
handleKeyguardDone(msg.arg1 != 0);
return;
case KEYGUARD_DONE_DRAWING:
handleKeyguardDoneDrawing();
return;
case KEYGUARD_DONE_AUTHENTICATING:
keyguardDone(true);
return;
case SET_HIDDEN:
handleSetHidden(msg.arg1 != 0);
break;
case KEYGUARD_TIMEOUT:
synchronized (KeyguardViewMediator.this) {
doKeyguardLocked();
}
break;
}
}
}
;
private void handleKeyguardDone(boolean wakeup){
if (DEBUG) Log.d(TAG,"handleKeyguardDone");
handleHide();
if (wakeup) {
mPM.userActivity(SystemClock.uptimeMillis(),true);
}
mWakeLock.release();
mContext.sendBroadcast(mUserPresentIntent);
}
private void handleKeyguardDoneDrawing(){
synchronized (this) {
if (false) Log.d(TAG,"handleKeyguardDoneDrawing");
if (mWaitingUntilKeyguardVisible) {
if (DEBUG) Log.d(TAG,"handleKeyguardDoneDrawing: notifying mWaitingUntilKeyguardVisible");
mWaitingUntilKeyguardVisible=false;
notifyAll();
mHandler.removeMessages(KEYGUARD_DONE_DRAWING);
}
}
}
private void handleTimeout(int seq){
synchronized (KeyguardViewMediator.this) {
if (DEBUG) Log.d(TAG,"handleTimeout");
if (seq == mWakelockSequence) {
mWakeLock.release();
}
}
}
private void playSounds(boolean locked){
if (mSuppressNextLockSound) {
mSuppressNextLockSound=false;
return;
}
final ContentResolver cr=mContext.getContentResolver();
if (Settings.System.getInt(cr,Settings.System.LOCKSCREEN_SOUNDS_ENABLED,1) == 1) {
final int whichSound=locked ? mLockSoundId : mUnlockSoundId;
mLockSounds.stop(mLockSoundStreamId);
if (mAudioManager == null) {
mAudioManager=(AudioManager)mContext.getSystemService(Context.AUDIO_SERVICE);
if (mAudioManager == null) return;
mMasterStreamType=mAudioManager.getMasterStreamType();
}
if (mAudioManager.isStreamMute(mMasterStreamType)) return;
mLockSoundStreamId=mLockSounds.play(whichSound,mLockSoundVolume,mLockSoundVolume,1,0,1.0f);
}
}
private void updateActivityLockScreenState(){
try {
ActivityManagerNative.getDefault().setLockScreenShown(mShowing && !mHidden);
}
 catch (RemoteException e) {
}
}
private void handleShow(){
synchronized (KeyguardViewMediator.this) {
if (DEBUG) Log.d(TAG,"handleShow");
if (!mSystemReady) return;
mKeyguardViewManager.show();
mShowing=true;
updateActivityLockScreenState();
adjustUserActivityLocked();
adjustStatusBarLocked();
try {
ActivityManagerNative.getDefault().closeSystemDialogs("lock");
}
 catch (RemoteException e) {
}
playSounds(true);
mShowKeyguardWakeLock.release();
}
}
private void handleHide(){
synchronized (KeyguardViewMediator.this) {
if (DEBUG) Log.d(TAG,"handleHide");
if (mWakeAndHandOff.isHeld()) {
Log.w(TAG,"attempt to hide the keyguard while waking, ignored");
return;
}
if (TelephonyManager.EXTRA_STATE_IDLE.equals(mPhoneState)) {
playSounds(false);
}
mKeyguardViewManager.hide();
mShowing=false;
updateActivityLockScreenState();
adjustUserActivityLocked();
adjustStatusBarLocked();
}
}
private void adjustUserActivityLocked(){
if (DEBUG) Log.d(TAG,"adjustUserActivityLocked mShowing: " + mShowing + " mHidden: "+ mHidden);
boolean enabled=!mShowing || mHidden;
mRealPowerManager.enableUserActivity(enabled);
if (!enabled && mScreenOn) {
pokeWakelock();
}
}
private void adjustStatusBarLocked(){
if (mStatusBarManager == null) {
mStatusBarManager=(StatusBarManager)mContext.getSystemService(Context.STATUS_BAR_SERVICE);
}
if (mStatusBarManager == null) {
Log.w(TAG,"Could not get status bar manager");
}
 else {
if (mShowLockIcon) {
if (mShowing && isSecure()) {
if (!mShowingLockIcon) {
String contentDescription=mContext.getString(com.android.internal.R.string.status_bar_device_locked);
mStatusBarManager.setIcon("secure",com.android.internal.R.drawable.stat_sys_secure,0,contentDescription);
mShowingLockIcon=true;
}
}
 else {
if (mShowingLockIcon) {
mStatusBarManager.removeIcon("secure");
mShowingLockIcon=false;
}
}
}
int flags=StatusBarManager.DISABLE_NONE;
if (mShowing) {
flags|=StatusBarManager.DISABLE_RECENT;
if (isSecure() || !ENABLE_INSECURE_STATUS_BAR_EXPAND) {
flags|=StatusBarManager.DISABLE_EXPAND;
}
if (isSecure()) {
flags|=StatusBarManager.DISABLE_NOTIFICATION_TICKER;
}
}
if (DEBUG) {
Log.d(TAG,"adjustStatusBarLocked: mShowing=" + mShowing + " mHidden="+ mHidden+ " isSecure="+ isSecure()+ " --> flags=0x"+ Integer.toHexString(flags));
}
mStatusBarManager.disable(flags);
}
}
private void handleWakeWhenReady(int keyCode){
synchronized (KeyguardViewMediator.this) {
if (DBG_WAKE) Log.d(TAG,"handleWakeWhenReady(" + keyCode + ")");
if (!mKeyguardViewManager.wakeWhenReadyTq(keyCode)) {
Log.w(TAG,"mKeyguardViewManager.wakeWhenReadyTq did not poke wake lock, so poke it ourselves");
pokeWakelock();
}
mWakeAndHandOff.release();
if (!mWakeLock.isHeld()) {
Log.w(TAG,"mWakeLock not held in mKeyguardViewManager.wakeWhenReadyTq");
}
}
}
private void handleReset(){
synchronized (KeyguardViewMediator.this) {
if (DEBUG) Log.d(TAG,"handleReset");
mKeyguardViewManager.reset();
}
}
private void handleVerifyUnlock(){
synchronized (KeyguardViewMediator.this) {
if (DEBUG) Log.d(TAG,"handleVerifyUnlock");
mKeyguardViewManager.verifyUnlock();
mShowing=true;
updateActivityLockScreenState();
}
}
private void handleNotifyScreenOff(){
synchronized (KeyguardViewMediator.this) {
if (DEBUG) Log.d(TAG,"handleNotifyScreenOff");
mKeyguardViewManager.onScreenTurnedOff();
}
}
private void handleNotifyScreenOn(KeyguardViewManager.ShowListener showListener){
synchronized (KeyguardViewMediator.this) {
if (DEBUG) Log.d(TAG,"handleNotifyScreenOn");
mKeyguardViewManager.onScreenTurnedOn(showListener);
}
}
}
