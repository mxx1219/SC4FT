package com.sun.tools.javac.comp;
import com.sun.tools.javac.util.*;
import com.sun.tools.javac.util.List;
import com.sun.tools.javac.code.*;
import com.sun.tools.javac.code.Type.*;
import com.sun.tools.javac.util.JCDiagnostic;
import com.sun.tools.javac.code.TypeTags.*;
public class Infer {
  protected static final Context.Key<Infer> inferKey=new Context.Key<Infer>();
  public static final Type anyPoly=new Type(NONE,null);
  Symtab syms;
  Types types;
  JCDiagnostic.Factory diags;
  public static Infer instance(  Context context){
    Infer instance=context.get(inferKey);
    if (instance == null)     instance=new Infer(context);
    return instance;
  }
  protected Infer(  Context context){
    context.put(inferKey,this);
    syms=Symtab.instance(context);
    types=Types.instance(context);
    diags=JCDiagnostic.Factory.instance(context);
    ambiguousNoInstanceException=new NoInstanceException(true,diags);
    unambiguousNoInstanceException=new NoInstanceException(false,diags);
  }
public static class NoInstanceException extends RuntimeException {
    private static final long serialVersionUID=0;
    boolean isAmbiguous;
    JCDiagnostic diagnostic;
    JCDiagnostic.Factory diags;
    NoInstanceException(    boolean isAmbiguous,    JCDiagnostic.Factory diags){
      this.diagnostic=null;
      this.isAmbiguous=isAmbiguous;
      this.diags=diags;
    }
    NoInstanceException setMessage(    String key){
      this.diagnostic=diags.fragment(key);
      return this;
    }
    NoInstanceException setMessage(    String key,    Object arg1){
      this.diagnostic=diags.fragment(key,arg1);
      return this;
    }
    NoInstanceException setMessage(    String key,    Object arg1,    Object arg2){
      this.diagnostic=diags.fragment(key,arg1,arg2);
      return this;
    }
    NoInstanceException setMessage(    String key,    Object arg1,    Object arg2,    Object arg3){
      this.diagnostic=diags.fragment(key,arg1,arg2,arg3);
      return this;
    }
    public JCDiagnostic getDiagnostic(){
      return diagnostic;
    }
  }
  private final NoInstanceException ambiguousNoInstanceException;
  private final NoInstanceException unambiguousNoInstanceException;
  Mapping fromTypeVarFun=new Mapping("fromTypeVarFun"){
    public Type apply(    Type t){
      if (t.tag == TYPEVAR)       return new UndetVar(t);
 else       return t.map(this);
    }
  }
;
  Mapping getInstFun=new Mapping("getInstFun"){
    public Type apply(    Type t){
switch (t.tag) {
case UNKNOWN:
        throw ambiguousNoInstanceException.setMessage("undetermined.type");
case UNDETVAR:
      UndetVar that=(UndetVar)t;
    if (that.inst == null)     throw ambiguousNoInstanceException.setMessage("type.variable.has.undetermined.type",that.qtype);
  return apply(that.inst);
default :
return t.map(this);
}
}
}
;
void maximizeInst(UndetVar that,Warner warn) throws NoInstanceException {
if (that.inst == null) {
if (that.hibounds.isEmpty()) that.inst=syms.objectType;
 else if (that.hibounds.tail.isEmpty()) that.inst=that.hibounds.head;
 else that.inst=types.glb(that.hibounds);
}
if (that.inst == null || that.inst.isErroneous() || !types.isSubtypeUnchecked(that.inst,that.hibounds,warn)) throw ambiguousNoInstanceException.setMessage("no.unique.maximal.instance.exists",that.qtype,that.hibounds);
}
private boolean isSubClass(Type t,final List<Type> ts){
t=t.baseType();
if (t.tag == TYPEVAR) {
List<Type> bounds=types.getBounds((TypeVar)t);
for (Type s : ts) {
if (!types.isSameType(t,s.baseType())) {
for (Type bound : bounds) {
  if (!isSubClass(bound,List.of(s.baseType())))   return false;
}
}
}
}
 else {
for (Type s : ts) {
if (!t.tsym.isSubClass(s.baseType().tsym,types)) return false;
}
}
return true;
}
void minimizeInst(UndetVar that,Warner warn) throws NoInstanceException {
if (that.inst == null) {
if (that.lobounds.isEmpty()) that.inst=syms.botType;
 else if (that.lobounds.tail.isEmpty()) that.inst=that.lobounds.head.isPrimitive() ? syms.errType : that.lobounds.head;
 else {
that.inst=types.lub(that.lobounds);
}
if (that.inst == null || that.inst.tag == ERROR) throw ambiguousNoInstanceException.setMessage("no.unique.minimal.instance.exists",that.qtype,that.lobounds);
if (that.hibounds.isEmpty()) return;
Type hb=null;
if (that.hibounds.tail.isEmpty()) hb=that.hibounds.head;
 else for (List<Type> bs=that.hibounds; bs.nonEmpty() && hb == null; bs=bs.tail) {
if (isSubClass(bs.head,that.hibounds)) hb=types.fromUnknownFun.apply(bs.head);
}
if (hb == null || !types.isSubtypeUnchecked(hb,that.hibounds,warn) || !types.isSubtypeUnchecked(that.inst,hb,warn)) throw ambiguousNoInstanceException;
}
}
public Type instantiateExpr(ForAll that,Type to,Warner warn) throws NoInstanceException {
List<Type> undetvars=Type.map(that.tvars,fromTypeVarFun);
for (List<Type> l=undetvars; l.nonEmpty(); l=l.tail) {
UndetVar v=(UndetVar)l.head;
ListBuffer<Type> hibounds=new ListBuffer<Type>();
for (List<Type> l1=types.getBounds((TypeVar)v.qtype); l1.nonEmpty(); l1=l1.tail) {
if (!l1.head.containsSome(that.tvars)) {
hibounds.append(l1.head);
}
}
v.hibounds=hibounds.toList();
}
Type qtype1=types.subst(that.qtype,that.tvars,undetvars);
if (!types.isSubtype(qtype1,to)) {
throw unambiguousNoInstanceException.setMessage("no.conforming.instance.exists",that.tvars,that.qtype,to);
}
for (List<Type> l=undetvars; l.nonEmpty(); l=l.tail) maximizeInst((UndetVar)l.head,warn);
List<Type> targs=Type.map(undetvars,getInstFun);
targs=types.subst(targs,that.tvars,targs);
checkWithinBounds(that.tvars,targs,warn);
return getInstFun.apply(qtype1);
}
public Type instantiateMethod(List<Type> tvars,MethodType mt,List<Type> argtypes,boolean allowBoxing,boolean useVarargs,Warner warn) throws NoInstanceException {
List<Type> undetvars=Type.map(tvars,fromTypeVarFun);
List<Type> formals=mt.argtypes;
Type varargsFormal=useVarargs ? formals.last() : null;
while (argtypes.nonEmpty() && formals.head != varargsFormal) {
Type ft=formals.head;
Type at=argtypes.head.baseType();
if (at.tag == FORALL) at=instantiateArg((ForAll)at,ft,tvars,warn);
Type sft=types.subst(ft,tvars,undetvars);
boolean works=allowBoxing ? types.isConvertible(at,sft,warn) : types.isSubtypeUnchecked(at,sft,warn);
if (!works) {
throw unambiguousNoInstanceException.setMessage("no.conforming.assignment.exists",tvars,at,ft);
}
formals=formals.tail;
argtypes=argtypes.tail;
}
if (formals.head != varargsFormal || !useVarargs && argtypes.nonEmpty()) {
throw unambiguousNoInstanceException.setMessage("arg.length.mismatch");
}
if (useVarargs) {
Type elt=types.elemtype(varargsFormal);
Type sft=types.subst(elt,tvars,undetvars);
while (argtypes.nonEmpty()) {
Type ft=sft;
Type at=argtypes.head.baseType();
if (at.tag == FORALL) at=instantiateArg((ForAll)at,ft,tvars,warn);
boolean works=types.isConvertible(at,sft,warn);
if (!works) {
throw unambiguousNoInstanceException.setMessage("no.conforming.assignment.exists",tvars,at,ft);
}
argtypes=argtypes.tail;
}
}
for (Type t : undetvars) minimizeInst((UndetVar)t,warn);
ListBuffer<Type> restvars=new ListBuffer<Type>();
ListBuffer<Type> insttypes=new ListBuffer<Type>();
ListBuffer<Type> undettypes=new ListBuffer<Type>();
for (Type t : undetvars) {
UndetVar uv=(UndetVar)t;
if (uv.inst.tag == BOT) {
restvars.append(uv.qtype);
insttypes.append(uv.qtype);
undettypes.append(uv);
uv.inst=null;
}
 else {
insttypes.append(uv.inst);
undettypes.append(uv.inst);
}
}
checkWithinBounds(tvars,undettypes.toList(),warn);
if (!restvars.isEmpty()) {
mt=new MethodType(mt.argtypes,new ForAll(restvars.toList(),mt.restype),mt.thrown,syms.methodClass);
}
return types.subst(mt,tvars,insttypes.toList());
}
private Type instantiateArg(ForAll that,Type to,List<Type> tvars,Warner warn) throws NoInstanceException {
List<Type> targs;
try {
return instantiateExpr(that,to,warn);
}
 catch (NoInstanceException ex) {
Type to1=to;
for (List<Type> l=tvars; l.nonEmpty(); l=l.tail) to1=types.subst(to1,List.of(l.head),List.of(syms.unknownType));
return instantiateExpr(that,to1,warn);
}
}
private void checkWithinBounds(List<Type> tvars,List<Type> arguments,Warner warn) throws NoInstanceException {
for (List<Type> tvs=tvars, args=arguments; tvs.nonEmpty(); tvs=tvs.tail, args=args.tail) {
if (args.head instanceof UndetVar) continue;
List<Type> bounds=types.subst(types.getBounds((TypeVar)tvs.head),tvars,arguments);
if (!types.isSubtypeUnchecked(args.head,bounds,warn)) throw unambiguousNoInstanceException.setMessage("inferred.do.not.conform.to.bounds",arguments,tvars);
}
}
}
