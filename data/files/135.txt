package im.vector.adapters;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import org.matrix.androidsdk.util.Log;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import im.vector.R;
import im.vector.util.RoomDirectoryData;
public class RoomDirectoryAdapter extends RecyclerView.Adapter<RoomDirectoryAdapter.RoomDirectoryViewHolder> {
  private static final String LOG_TAG="RoomDirectoryAdapter";
  private final List<RoomDirectoryData> mList;
  private final OnSelectRoomDirectoryListener mListener;
  public RoomDirectoryAdapter(  final List<RoomDirectoryData> serversList,  final OnSelectRoomDirectoryListener listener){
    mList=(null == serversList) ? new ArrayList<RoomDirectoryData>() : new ArrayList<>(serversList);
    mListener=listener;
  }
  public void updateDirectoryServersList(  List<RoomDirectoryData> serversList){
    mList.clear();
    mList.addAll(serversList);
    notifyDataSetChanged();
  }
  @Override public RoomDirectoryViewHolder onCreateViewHolder(  ViewGroup viewGroup,  int viewType){
    final LayoutInflater layoutInflater=LayoutInflater.from(viewGroup.getContext());
    final View itemView=layoutInflater.inflate(R.layout.item_room_directory,viewGroup,false);
    return new RoomDirectoryAdapter.RoomDirectoryViewHolder(itemView);
  }
  @Override public void onBindViewHolder(  RoomDirectoryAdapter.RoomDirectoryViewHolder viewHolder,  int position){
    viewHolder.populateViews(mList.get(position));
  }
  @Override public int getItemCount(){
    return mList.size();
  }
class RoomDirectoryViewHolder extends RecyclerView.ViewHolder {
    final View vMainView;
    final ImageView vAvatarView;
    final TextView vServerTextView;
    final TextView vDescriptionTextView;
    private RoomDirectoryViewHolder(    final View itemView){
      super(itemView);
      vMainView=itemView;
      vAvatarView=(ImageView)itemView.findViewById(R.id.room_directory_avatar);
      vServerTextView=(TextView)itemView.findViewById(R.id.room_directory_display_name);
      vDescriptionTextView=(TextView)itemView.findViewById(R.id.room_directory_description);
    }
    private void populateViews(    final RoomDirectoryData server){
      vServerTextView.setText(server.getDisplayName());
      String description=null;
      if (server.isIncludedAllNetworks()) {
        description=vServerTextView.getContext().getString(R.string.directory_server_all_rooms_on_server,server.getDisplayName());
      }
 else       if (TextUtils.equals("Matrix",server.getDisplayName())) {
        description=vServerTextView.getContext().getString(R.string.directory_server_native_rooms,server.getDisplayName());
      }
      vDescriptionTextView.setText(description);
      vDescriptionTextView.setVisibility(!TextUtils.isEmpty(description) ? View.VISIBLE : View.GONE);
      setAvatar(vAvatarView,server.getAvatarUrl(),server.isIncludedAllNetworks() ? null : vServerTextView.getContext().getResources().getDrawable(R.drawable.network_matrix));
      vMainView.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          mListener.onSelectRoomDirectory(server);
        }
      }
);
    }
  }
  private static final Map<String,Bitmap> mAvatarByUrl=new HashMap<>();
  private static final Map<String,List<WeakReference<ImageView>>> mPendingDownloadByUrl=new HashMap<>();
  private void setAvatar(  final ImageView imageView,  final String avatarURL,  Drawable defaultAvatar){
    imageView.setImageDrawable(defaultAvatar);
    imageView.setTag(null);
    if (null != avatarURL) {
      Bitmap bitmap=mAvatarByUrl.get(avatarURL);
      if (null == bitmap) {
        downloadAvatar(imageView,avatarURL);
      }
 else {
        imageView.setImageBitmap(bitmap);
      }
    }
  }
  private void downloadAvatar(  final ImageView imageView,  final String avatarURL){
    if ((null == imageView) || (null == avatarURL)) {
      return;
    }
    imageView.setTag(avatarURL);
    WeakReference<ImageView> weakImageView=new WeakReference<>(imageView);
    if (mPendingDownloadByUrl.containsKey(avatarURL)) {
      mPendingDownloadByUrl.get(avatarURL).add(weakImageView);
      return;
    }
    mPendingDownloadByUrl.put(avatarURL,new ArrayList<>(Arrays.asList(weakImageView)));
    AsyncTask<Void,Void,Bitmap> task=new AsyncTask<Void,Void,Bitmap>(){
      @Override protected Bitmap doInBackground(      Void... params){
        Bitmap bitmap=null;
        try {
          URL url=new URL(avatarURL);
          bitmap=BitmapFactory.decodeStream((InputStream)url.getContent());
        }
 catch (        Exception e) {
          Log.e(LOG_TAG,"## downloadAvatar() : cannot load the avatar " + avatarURL);
        }
        return bitmap;
      }
      @Override protected void onPostExecute(      Bitmap bitmap){
        if ((null != bitmap) && !mAvatarByUrl.containsKey(avatarURL)) {
          mAvatarByUrl.put(avatarURL,bitmap);
        }
        if (mPendingDownloadByUrl.containsKey(avatarURL)) {
          List<WeakReference<ImageView>> weakImageViews=mPendingDownloadByUrl.get(avatarURL);
          mPendingDownloadByUrl.remove(avatarURL);
          for (          WeakReference<ImageView> weakImageView : weakImageViews) {
            ImageView imageViewToUpdate=weakImageView.get();
            if ((null != imageViewToUpdate) && TextUtils.equals((String)imageView.getTag(),avatarURL)) {
              imageViewToUpdate.setImageBitmap(bitmap);
            }
          }
        }
      }
    }
;
    try {
      task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
    }
 catch (    Exception e) {
      Log.e(LOG_TAG,"## downloadAvatar() failed " + e.getMessage());
      task.cancel(true);
    }
  }
public interface OnSelectRoomDirectoryListener {
    void onSelectRoomDirectory(    RoomDirectoryData roomDirectory);
  }
}
