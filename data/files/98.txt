package org.springframework.context.event;
import java.util.concurrent.Executor;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.context.ApplicationEvent;
import org.springframework.context.ApplicationListener;
import org.springframework.core.ResolvableType;
import org.springframework.util.ErrorHandler;
public class SimpleApplicationEventMulticaster extends AbstractApplicationEventMulticaster {
  private Executor taskExecutor;
  private ErrorHandler errorHandler;
  public SimpleApplicationEventMulticaster(){
  }
  public SimpleApplicationEventMulticaster(  BeanFactory beanFactory){
    setBeanFactory(beanFactory);
  }
  public void setTaskExecutor(  Executor taskExecutor){
    this.taskExecutor=taskExecutor;
  }
  protected Executor getTaskExecutor(){
    return this.taskExecutor;
  }
  public void setErrorHandler(  ErrorHandler errorHandler){
    this.errorHandler=errorHandler;
  }
  protected ErrorHandler getErrorHandler(){
    return this.errorHandler;
  }
  @Override public void multicastEvent(  ApplicationEvent event){
    multicastEvent(event,resolveDefaultEventType(event));
  }
  @Override public void multicastEvent(  final ApplicationEvent event,  ResolvableType eventType){
    ResolvableType type=(eventType != null ? eventType : resolveDefaultEventType(event));
    for (    final ApplicationListener<?> listener : getApplicationListeners(event,type)) {
      Executor executor=getTaskExecutor();
      if (executor != null) {
        executor.execute(new Runnable(){
          @Override public void run(){
            invokeListener(listener,event);
          }
        }
);
      }
 else {
        invokeListener(listener,event);
      }
    }
  }
  private ResolvableType resolveDefaultEventType(  ApplicationEvent event){
    return ResolvableType.forInstance(event);
  }
  @SuppressWarnings({"unchecked","rawtypes"}) protected void invokeListener(  ApplicationListener listener,  ApplicationEvent event){
    ErrorHandler errorHandler=getErrorHandler();
    if (errorHandler != null) {
      try {
        listener.onApplicationEvent(event);
      }
 catch (      Throwable err) {
        errorHandler.handleError(err);
      }
    }
 else {
      try {
        listener.onApplicationEvent(event);
      }
 catch (      ClassCastException ex) {
        String msg=ex.getMessage();
        if (msg != null && msg.startsWith(event.getClass().getName())) {
          Log logger=LogFactory.getLog(getClass());
          if (logger.isDebugEnabled()) {
            logger.debug("Non-matching event type for listener: " + listener,ex);
          }
        }
 else {
          throw ex;
        }
      }
    }
  }
}
