package org.jboss.as.ejb3.component;
import java.lang.reflect.Constructor;
import java.lang.reflect.Modifier;
import org.jboss.as.ee.component.ComponentConfiguration;
import org.jboss.as.ee.component.ComponentConfigurator;
import org.jboss.as.ee.component.ComponentDescription;
import org.jboss.as.ee.component.ViewDescription;
import org.jboss.as.ejb3.logging.EjbLogger;
import org.jboss.as.server.deployment.Attachments;
import org.jboss.as.server.deployment.DeploymentPhaseContext;
import org.jboss.as.server.deployment.DeploymentUnitProcessingException;
import org.jboss.as.server.deployment.reflect.ClassReflectionIndex;
import org.jboss.as.server.deployment.reflect.DeploymentReflectionIndex;
public class EJBValidationConfigurator implements ComponentConfigurator {
  public static final EJBValidationConfigurator INSTANCE=new EJBValidationConfigurator();
  private EJBValidationConfigurator(){
  }
  @Override public void configure(  final DeploymentPhaseContext context,  final ComponentDescription description,  final ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
    final DeploymentReflectionIndex deploymentReflectionIndex=context.getDeploymentUnit().getAttachment(Attachments.REFLECTION_INDEX);
    final ClassReflectionIndex<?> classIndex=deploymentReflectionIndex.getClassIndex(configuration.getComponentClass());
    final Constructor<?> ctor=classIndex.getConstructor(new String[0]);
    boolean noInterface=false;
    for (    ViewDescription view : description.getViews()) {
      if (view.getViewClassName().equals(description.getComponentClassName())) {
        noInterface=true;
      }
    }
    if (ctor == null && noInterface) {
      throw EjbLogger.ROOT_LOGGER.ejbMustHavePublicDefaultConstructor(description.getComponentName(),description.getComponentClassName());
    }
    if (configuration.getComponentClass().getEnclosingClass() != null) {
      throw EjbLogger.ROOT_LOGGER.ejbMustNotBeInnerClass(description.getComponentName(),description.getComponentClassName());
    }
    if (!Modifier.isPublic(configuration.getComponentClass().getModifiers())) {
      throw EjbLogger.ROOT_LOGGER.ejbMustBePublicClass(description.getComponentName(),description.getComponentClassName());
    }
    if (Modifier.isFinal(configuration.getComponentClass().getModifiers())) {
      throw EjbLogger.ROOT_LOGGER.ejbMustNotBeFinalClass(description.getComponentName(),description.getComponentClassName());
    }
  }
}
