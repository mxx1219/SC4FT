package im.vector.adapters;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.TextView;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.regex.Pattern;
import im.vector.R;
import im.vector.VectorApp;
public class LanguagesAdapter extends RecyclerView.Adapter<LanguagesAdapter.LanguageViewHolder> implements Filterable {
  private final List<Locale> mLocalesList;
  private final List<Locale> mFilteredLocalesList;
  private final OnSelectLocaleListener mListener;
  public LanguagesAdapter(  final List<Locale> locales,  final OnSelectLocaleListener listener){
    mLocalesList=locales;
    mFilteredLocalesList=new ArrayList<>(locales);
    mListener=listener;
  }
  @Override public LanguageViewHolder onCreateViewHolder(  ViewGroup viewGroup,  int viewType){
    final LayoutInflater layoutInflater=LayoutInflater.from(viewGroup.getContext());
    final View itemView=layoutInflater.inflate(R.layout.item_locale,viewGroup,false);
    return new LanguagesAdapter.LanguageViewHolder(itemView);
  }
  @Override public void onBindViewHolder(  LanguagesAdapter.LanguageViewHolder viewHolder,  int position){
    viewHolder.populateViews(mFilteredLocalesList.get(position));
  }
  @Override public int getItemCount(){
    return mFilteredLocalesList.size();
  }
  @Override public Filter getFilter(){
    return new Filter(){
      @Override protected FilterResults performFiltering(      CharSequence constraint){
        mFilteredLocalesList.clear();
        final FilterResults results=new FilterResults();
        if (TextUtils.isEmpty(constraint)) {
          mFilteredLocalesList.addAll(mLocalesList);
        }
 else {
          final String filterPattern=constraint.toString().trim();
          Pattern pattern=Pattern.compile(Pattern.quote(filterPattern),Pattern.CASE_INSENSITIVE);
          for (          Locale locale : mLocalesList) {
            if (pattern.matcher(VectorApp.localeToLocalisedString(locale)).find()) {
              mFilteredLocalesList.add(locale);
            }
          }
        }
        results.values=mFilteredLocalesList;
        results.count=mFilteredLocalesList.size();
        return results;
      }
      @Override protected void publishResults(      CharSequence constraint,      FilterResults results){
        notifyDataSetChanged();
      }
    }
;
  }
class LanguageViewHolder extends RecyclerView.ViewHolder {
    private final TextView vLocaleNameTextView;
    private LanguageViewHolder(    final View itemView){
      super(itemView);
      vLocaleNameTextView=(TextView)itemView.findViewById(R.id.locale_text_view);
    }
    private void populateViews(    final Locale locale){
      vLocaleNameTextView.setText(VectorApp.localeToLocalisedString(locale));
      itemView.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          mListener.onSelectLocale(locale);
        }
      }
);
    }
  }
public interface OnSelectLocaleListener {
    void onSelectLocale(    Locale locale);
  }
}
