package org.broadleafcommerce.core.web.controller.cart;
import org.apache.commons.lang3.StringUtils;
import org.broadleafcommerce.common.util.BLCMessageUtils;
import org.broadleafcommerce.core.catalog.domain.Product;
import org.broadleafcommerce.core.offer.domain.OfferCode;
import org.broadleafcommerce.core.offer.service.exception.OfferAlreadyAddedException;
import org.broadleafcommerce.core.offer.service.exception.OfferException;
import org.broadleafcommerce.core.offer.service.exception.OfferExpiredException;
import org.broadleafcommerce.core.offer.service.exception.OfferMaxUseExceededException;
import org.broadleafcommerce.core.order.domain.DiscreteOrderItem;
import org.broadleafcommerce.core.order.domain.NullOrderImpl;
import org.broadleafcommerce.core.order.domain.Order;
import org.broadleafcommerce.core.order.domain.OrderItem;
import org.broadleafcommerce.core.order.service.call.AddToCartItem;
import org.broadleafcommerce.core.order.service.call.ConfigurableOrderItemRequest;
import org.broadleafcommerce.core.order.service.call.OrderItemRequestDTO;
import org.broadleafcommerce.core.order.service.exception.AddToCartException;
import org.broadleafcommerce.core.order.service.exception.IllegalCartOperationException;
import org.broadleafcommerce.core.order.service.exception.RemoveFromCartException;
import org.broadleafcommerce.core.order.service.exception.UpdateCartException;
import org.broadleafcommerce.core.pricing.service.exception.PricingException;
import org.broadleafcommerce.core.web.order.CartState;
import org.broadleafcommerce.profile.web.core.CustomerState;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.ui.Model;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
public class BroadleafCartController extends AbstractCartController {
  protected static String cartView="cart/cart";
  protected static String cartPageRedirect="redirect:/cart";
  protected static String configureView="configure/partials/configure";
  protected static String configurePageRedirect="redirect:/cart/configure";
  protected static String ALL_PRODUCTS_ATTRIBUTE_NAME="blcAllDisplayedProducts";
  @Value("${solr.index.use.sku}") protected boolean useSku;
  @Value("${automatically.add.complete.items}") protected boolean automaticallyAddCompleteItems;
  public String cart(  HttpServletRequest request,  HttpServletResponse response,  Model model) throws PricingException {
    Order cart=CartState.getCart();
    if (cart != null && !(cart instanceof NullOrderImpl)) {
      model.addAttribute("paymentRequestDTO",dtoTranslationService.translateOrder(CartState.getCart()));
    }
    return getCartView();
  }
  public String add(  HttpServletRequest request,  HttpServletResponse response,  Model model,  OrderItemRequestDTO itemRequest) throws IOException, AddToCartException, PricingException, NumberFormatException, RemoveFromCartException, IllegalArgumentException {
    Order cart=CartState.getCart();
    if (cart == null || cart instanceof NullOrderImpl) {
      cart=orderService.createNewCartForCustomer(CustomerState.getCustomer(request));
    }
    updateCartService.validateAddToCartRequest(itemRequest,cart);
    if (isUpdateRequest(request)) {
      String originalOrderItem=request.getParameter("originalOrderItem");
      if (StringUtils.isNotEmpty(originalOrderItem)) {
        Long originalOrderItemId=Long.parseLong(originalOrderItem);
        updateAddRequestQuantities(itemRequest,originalOrderItemId);
        cart=orderService.removeItem(cart.getId(),originalOrderItemId,false);
        cart=orderService.save(cart,true);
      }
    }
    cart=orderService.addItem(cart.getId(),itemRequest,false);
    cart=orderService.save(cart,true);
    return isAjaxRequest(request) ? getCartView() : getCartPageRedirect();
  }
  protected void updateAddRequestQuantities(  OrderItemRequestDTO itemRequest,  Long originalOrderItemId){
    OrderItem orderItem=orderItemService.readOrderItemById(originalOrderItemId);
    itemRequest.setQuantity(orderItem.getQuantity());
    for (    OrderItemRequestDTO childDTO : itemRequest.getChildOrderItems()) {
      childDTO.setQuantity(childDTO.getQuantity() * orderItem.getQuantity());
    }
  }
  protected boolean isUpdateRequest(  HttpServletRequest request){
    return request.getParameter("isUpdateRequest") != null && Boolean.parseBoolean(request.getParameter("isUpdateRequest"));
  }
  public String addWithPriceOverride(  HttpServletRequest request,  HttpServletResponse response,  Model model,  OrderItemRequestDTO itemRequest) throws IOException, AddToCartException, PricingException {
    Order cart=CartState.getCart();
    if (cart == null || cart instanceof NullOrderImpl) {
      cart=orderService.createNewCartForCustomer(CustomerState.getCustomer(request));
    }
    updateCartService.validateAddToCartRequest(itemRequest,cart);
    cart=orderService.addItemWithPriceOverrides(cart.getId(),itemRequest,false);
    cart=orderService.save(cart,true);
    return isAjaxRequest(request) ? getCartView() : getCartPageRedirect();
  }
  @Deprecated public String addWithPriceOverride(  HttpServletRequest request,  HttpServletResponse response,  Model model,  AddToCartItem itemRequest) throws IOException, AddToCartException, PricingException {
    return addWithPriceOverride(request,response,model,(OrderItemRequestDTO)itemRequest);
  }
  public String configure(  HttpServletRequest request,  HttpServletResponse response,  Model model,  Long productId) throws IOException, AddToCartException, PricingException, Exception {
    Product product=catalogService.findProductById(productId);
    ConfigurableOrderItemRequest itemRequest=orderItemService.createConfigurableOrderItemRequestFromProduct(product);
    orderItemService.modifyOrderItemRequest(itemRequest);
    if (isSafeToAdd(itemRequest)) {
      return add(request,response,model,itemRequest);
    }
    model.addAttribute("baseItem",itemRequest);
    model.addAttribute("isUpdateRequest",Boolean.TRUE);
    model.addAttribute(ALL_PRODUCTS_ATTRIBUTE_NAME,orderItemService.findAllProductsInRequest(itemRequest));
    return isAjaxRequest(request) ? getConfigureView() : getConfigurePageRedirect();
  }
  public String reconfigure(  HttpServletRequest request,  HttpServletResponse response,  Model model,  Long orderItemId) throws IOException, AddToCartException, PricingException, Exception {
    DiscreteOrderItem orderItem=(DiscreteOrderItem)orderItemService.readOrderItemById(orderItemId);
    Long productId=orderItem.getProduct().getId();
    Product product=catalogService.findProductById(productId);
    ConfigurableOrderItemRequest itemRequest=orderItemService.createConfigurableOrderItemRequestFromProduct(product);
    orderItemService.modifyOrderItemRequest(itemRequest);
    orderItemService.mergeOrderItemRequest(itemRequest,orderItem);
    itemRequest.setQuantity(orderItem.getQuantity());
    model.addAttribute("baseItem",itemRequest);
    model.addAttribute("isUpdateRequest",Boolean.TRUE);
    model.addAttribute("originalOrderItem",orderItemId);
    model.addAttribute(ALL_PRODUCTS_ATTRIBUTE_NAME,orderItemService.findAllProductsInRequest(itemRequest));
    return isAjaxRequest(request) ? getConfigureView() : getConfigurePageRedirect();
  }
  public String updateQuantity(  HttpServletRequest request,  HttpServletResponse response,  Model model,  OrderItemRequestDTO itemRequest) throws IOException, UpdateCartException, PricingException, RemoveFromCartException {
    Order cart=CartState.getCart();
    cart=orderService.updateItemQuantity(cart.getId(),itemRequest,true);
    cart=orderService.save(cart,false);
    if (isAjaxRequest(request)) {
      Map<String,Object> extraData=new HashMap<>();
      if (useSku) {
        extraData.put("skuId",itemRequest.getSkuId());
      }
 else {
        extraData.put("productId",itemRequest.getProductId());
      }
      extraData.put("cartItemCount",cart.getItemCount());
      model.addAttribute("blcextradata",new ObjectMapper().writeValueAsString(extraData));
      return getCartView();
    }
 else {
      return getCartPageRedirect();
    }
  }
  @Deprecated public String updateQuantity(  HttpServletRequest request,  HttpServletResponse response,  Model model,  AddToCartItem itemRequest) throws IOException, UpdateCartException, PricingException, RemoveFromCartException {
    return updateQuantity(request,response,model,(OrderItemRequestDTO)itemRequest);
  }
  public String remove(  HttpServletRequest request,  HttpServletResponse response,  Model model,  OrderItemRequestDTO itemRequest) throws IOException, PricingException, RemoveFromCartException {
    Order cart=CartState.getCart();
    cart=orderService.removeItem(cart.getId(),itemRequest.getOrderItemId(),false);
    cart=orderService.save(cart,true);
    if (isAjaxRequest(request)) {
      Map<String,Object> extraData=new HashMap<>();
      extraData.put("cartItemCount",cart.getItemCount());
      if (useSku) {
        extraData.put("skuId",itemRequest.getSkuId());
      }
 else {
        extraData.put("productId",itemRequest.getProductId());
      }
      model.addAttribute("blcextradata",new ObjectMapper().writeValueAsString(extraData));
      return getCartView();
    }
 else {
      return getCartPageRedirect();
    }
  }
  @Deprecated public String remove(  HttpServletRequest request,  HttpServletResponse response,  Model model,  AddToCartItem itemRequest) throws IOException, PricingException, RemoveFromCartException {
    return remove(request,response,model,(OrderItemRequestDTO)itemRequest);
  }
  public String empty(  HttpServletRequest request,  HttpServletResponse response,  Model model) throws PricingException {
    Order cart=CartState.getCart();
    orderService.cancelOrder(cart);
    CartState.setCart(null);
    return "redirect:/";
  }
  public String addPromo(  HttpServletRequest request,  HttpServletResponse response,  Model model,  String customerOffer) throws IOException, PricingException {
    Order cart=CartState.getCart();
    Boolean promoAdded=false;
    String exception="";
    if (cart != null && !(cart instanceof NullOrderImpl)) {
      List<OfferCode> offerCodes=offerService.lookupAllOfferCodesByCode(customerOffer);
      for (      OfferCode offerCode : offerCodes) {
        if (offerCode != null) {
          try {
            orderService.addOfferCode(cart,offerCode,false);
            promoAdded=true;
          }
 catch (          OfferException e) {
            if (e instanceof OfferMaxUseExceededException) {
              exception="Use Limit Exceeded";
            }
 else             if (e instanceof OfferExpiredException) {
              exception="Offer Has Expired";
            }
 else             if (e instanceof OfferAlreadyAddedException) {
              exception="Offer Has Already Been Added";
            }
 else {
              exception="An Unknown Offer Error Has Occured";
            }
          }
        }
 else {
          exception="Invalid Code";
        }
      }
      cart=orderService.save(cart,true);
    }
 else {
      exception="Invalid Cart";
    }
    if (isAjaxRequest(request)) {
      Map<String,Object> extraData=new HashMap<>();
      extraData.put("promoAdded",promoAdded);
      extraData.put("exception",exception);
      model.addAttribute("blcextradata",new ObjectMapper().writeValueAsString(extraData));
      return getCartView();
    }
 else {
      model.addAttribute("exception",exception);
      return getCartView();
    }
  }
  public String removePromo(  HttpServletRequest request,  HttpServletResponse response,  Model model,  Long offerCodeId) throws IOException, PricingException {
    Order cart=CartState.getCart();
    OfferCode offerCode=offerService.findOfferCodeById(offerCodeId);
    orderService.removeOfferCode(cart,offerCode,false);
    cart=orderService.save(cart,true);
    return isAjaxRequest(request) ? getCartView() : getCartPageRedirect();
  }
  public String getCartView(){
    return cartView;
  }
  public String getCartPageRedirect(){
    return cartPageRedirect;
  }
  public String getConfigureView(){
    return configureView;
  }
  public String getConfigurePageRedirect(){
    return configurePageRedirect;
  }
  public Map<String,String> handleIllegalCartOpException(  IllegalCartOperationException ex){
    Map<String,String> returnMap=new HashMap<>();
    returnMap.put("error","illegalCartOperation");
    returnMap.put("exception",BLCMessageUtils.getMessage(ex.getType()));
    return returnMap;
  }
  protected boolean isSafeToAdd(  ConfigurableOrderItemRequest itemRequest){
    if (!automaticallyAddCompleteItems) {
      return false;
    }
    boolean canSafelyAdd=true;
    for (    OrderItemRequestDTO child : itemRequest.getChildOrderItems()) {
      ConfigurableOrderItemRequest configurableRequest=(ConfigurableOrderItemRequest)child;
      Product childProduct=configurableRequest.getProduct();
      if (childProduct == null) {
        return false;
      }
      int minQty=configurableRequest.getMinQuantity();
      if (minQty == 0 || childProduct.getProductOptionXrefs().size() > 0) {
        return false;
      }
      canSafelyAdd=isSafeToAdd(configurableRequest);
    }
    return canSafelyAdd;
  }
}
