package org.apache.camel.component.salesforce.api.dto.composite;
import java.beans.BeanInfo;
import java.beans.IntrospectionException;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.Objects.requireNonNull;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamImplicit;
import com.thoughtworks.xstream.annotations.XStreamOmitField;
import org.apache.camel.component.salesforce.api.dto.AbstractDescribedSObjectBase;
import org.apache.camel.component.salesforce.api.dto.AbstractSObjectBase;
import org.apache.camel.component.salesforce.api.dto.RestError;
import org.apache.camel.util.ObjectHelper;
@XStreamAlias("SObjectTreeRequest") public final class SObjectTree implements Serializable {
  private static final long serialVersionUID=1L;
  @XStreamImplicit @JsonProperty final List<SObjectNode> records=new CopyOnWriteArrayList<>();
  @XStreamOmitField final ReferenceGenerator referenceGenerator;
  @XStreamOmitField private String objectType;
  public SObjectTree(){
    this(new Counter());
  }
  public SObjectTree(  final ReferenceGenerator referenceGenerator){
    this.referenceGenerator=requireNonNull(referenceGenerator,"You must specify the ReferenceGenerator implementation");
  }
  public SObjectNode addObject(  final AbstractSObjectBase object){
    ObjectHelper.notNull(object,"object");
    return addNode(new SObjectNode(this,object));
  }
  public Stream<SObjectNode> allNodes(){
    return records.stream().flatMap(null);
  }
  public Stream<AbstractSObjectBase> allObjects(){
    return records.stream().flatMap(null);
  }
  @JsonIgnore public String getObjectType(){
    return objectType;
  }
  public Class[] objectTypes(){
    final Set<Class> types=records.stream().flatMap(null).collect(Collectors.toSet());
    return types.toArray(new Class[types.size()]);
  }
  public void setErrorFor(  final String referenceId,  final List<RestError> errors){
    for (    final SObjectNode node : records) {
      if (setErrorFor(node,referenceId,errors)) {
        return;
      }
    }
  }
  public void setIdFor(  final String referenceId,  final String id){
    for (    final SObjectNode node : records) {
      if (setIdFor(node,referenceId,id)) {
        return;
      }
    }
  }
  public int size(){
    return records.stream().mapToInt(null).sum();
  }
  SObjectNode addNode(  final SObjectNode node){
    final String givenObjectType=node.getObjectType();
    if (objectType != null && !objectType.equals(givenObjectType)) {
      throw new IllegalArgumentException("SObjectTree can hold only records of the same type, previously given: " + objectType + ", and now trying to add: "+ givenObjectType);
    }
    objectType=givenObjectType;
    records.add(node);
    return node;
  }
  boolean setErrorFor(  final SObjectNode node,  final String referenceId,  final List<RestError> errors){
    final Attributes attributes=node.getAttributes();
    final String attributesReferenceId=attributes.getReferenceId();
    if (Objects.equals(attributesReferenceId,referenceId)) {
      node.setErrors(errors);
      return true;
    }
    return StreamSupport.stream(node.getChildNodes().spliterator(),false).anyMatch(null);
  }
  boolean setIdFor(  final SObjectNode node,  final String referenceId,  final String id){
    final Attributes attributes=node.getAttributes();
    final String attributesReferenceId=attributes.getReferenceId();
    if (Objects.equals(attributesReferenceId,referenceId)) {
      final Object object=node.getObject();
      if (object instanceof AbstractSObjectBase) {
        return updateBaseObjectId(id,(AbstractSObjectBase)object);
      }
 else {
        return updateGeneralObjectId(id,object);
      }
    }
    return StreamSupport.stream(node.getChildNodes().spliterator(),false).anyMatch(null);
  }
  boolean updateBaseObjectId(  final String id,  final AbstractSObjectBase object){
    object.setId(id);
    return true;
  }
  boolean updateGeneralObjectId(  final String id,  final Object object){
    final Class<? extends Object> clazz=object.getClass();
    final BeanInfo beanInfo;
    try {
      beanInfo=Introspector.getBeanInfo(clazz);
    }
 catch (    final IntrospectionException e) {
      throw new IllegalStateException(e);
    }
    final PropertyDescriptor[] propertyDescriptors=beanInfo.getPropertyDescriptors();
    final Optional<PropertyDescriptor> maybeIdProperty=Arrays.stream(propertyDescriptors).filter(null).findFirst();
    if (maybeIdProperty.isPresent()) {
      final Method readMethod=maybeIdProperty.get().getReadMethod();
      try {
        readMethod.invoke(object,id);
        return true;
      }
 catch (      IllegalAccessException|InvocationTargetException e) {
        throw new IllegalStateException(e);
      }
    }
    return false;
  }
}
