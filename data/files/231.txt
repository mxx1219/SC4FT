package org.atmosphere.cpr;
import org.atmosphere.di.InjectorProvider;
import org.atmosphere.util.AbstractBroadcasterProxy;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.Collection;
import java.util.Collections;
import java.util.Enumeration;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import org.atmosphere.cpr.BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.*;
public class DefaultBroadcasterFactory extends BroadcasterFactory {
  private static final Logger logger=LoggerFactory.getLogger(DefaultBroadcasterFactory.class);
  private final ConcurrentHashMap<Object,Broadcaster> store=new ConcurrentHashMap<Object,Broadcaster>();
  private final Class<? extends Broadcaster> clazz;
  private BroadcasterLifeCyclePolicy policy=new BroadcasterLifeCyclePolicy.Builder().policy(NEVER).build();
  protected DefaultBroadcasterFactory(  Class<? extends Broadcaster> clazz,  String broadcasterLifeCyclePolicy){
    this.clazz=clazz;
    if (factory == null) {
      this.factory=this;
    }
    configure(broadcasterLifeCyclePolicy);
  }
  private void configure(  String broadcasterLifeCyclePolicy){
    if (EMPTY.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
      policy=new BroadcasterLifeCyclePolicy.Builder().policy(EMPTY).build();
    }
 else     if (EMPTY_DESTROY.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
      policy=new BroadcasterLifeCyclePolicy.Builder().policy(EMPTY_DESTROY).build();
    }
 else     if (IDLE.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
      policy=new BroadcasterLifeCyclePolicy.Builder().policy(IDLE).idleTimeInMS(5 * 60 * 100).build();
    }
 else     if (IDLE_DESTROY.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
      policy=new BroadcasterLifeCyclePolicy.Builder().policy(IDLE_DESTROY).idleTimeInMS(5 * 60 * 100).build();
    }
 else     if (NEVER.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
      policy=new BroadcasterLifeCyclePolicy.Builder().policy(NEVER).build();
    }
 else {
      logger.warn("Unsupported BroadcasterLifeCyclePolicy policy {}",broadcasterLifeCyclePolicy);
    }
  }
  public Broadcaster get() throws IllegalAccessException, InstantiationException {
    Broadcaster b=clazz.newInstance();
    InjectorProvider.getInjector().inject(b);
    if (AbstractBroadcasterProxy.class.isAssignableFrom(b.getClass())) {
      AbstractBroadcasterProxy.class.cast(b).configure(config);
    }
    b.setBroadcasterConfig(new BroadcasterConfig(AtmosphereServlet.broadcasterFilters,config));
    b.setID(clazz.getSimpleName() + "-" + UUID.randomUUID());
    b.setBroadcasterLifeCyclePolicy(policy);
    store.put(b.getID(),b);
    return b;
  }
  public final Broadcaster get(  Class<? extends Broadcaster> c,  Object id) throws IllegalAccessException, InstantiationException {
    if (id == null)     throw new NullPointerException("id is null");
    if (c == null)     throw new NullPointerException("Class is null");
    if (getBroadcaster(id) != null)     throw new IllegalStateException("Broadcaster already existing. Use BroadcasterFactory.lookup instead");
    Broadcaster b=c.newInstance();
    InjectorProvider.getInjector().inject(b);
    if (AbstractBroadcasterProxy.class.isAssignableFrom(b.getClass())) {
      AbstractBroadcasterProxy.class.cast(b).configure(config);
    }
    b.setBroadcasterConfig(new BroadcasterConfig(AtmosphereServlet.broadcasterFilters,config));
    b.setID(id.toString());
    b.setBroadcasterLifeCyclePolicy(policy);
    store.put(id,b);
    return b;
  }
  private Broadcaster getBroadcaster(  Object name){
    return store.get(name);
  }
  public boolean add(  Broadcaster b,  Object id){
    return (store.put(id,b) == null);
  }
  public boolean remove(  Broadcaster b,  Object id){
    return (store.remove(id) != null);
  }
  public final Broadcaster lookup(  Class<? extends Broadcaster> c,  Object id){
    return lookup(c,id,false);
  }
  @Override public Broadcaster lookup(  Class<? extends Broadcaster> c,  Object id,  boolean createIfNull){
    Broadcaster b=getBroadcaster(id);
    if (b != null && !c.isAssignableFrom(b.getClass())) {
      String msg="Invalid lookup class " + c.getName() + ". Cached class is: "+ b.getClass().getName();
      logger.debug("{}",msg);
      throw new IllegalStateException(msg);
    }
    if (b == null && createIfNull) {
      try {
        b=get(c,id);
      }
 catch (      IllegalAccessException e) {
        throw new IllegalStateException(e);
      }
catch (      InstantiationException e) {
        throw new IllegalStateException(e);
      }
    }
    return b;
  }
  @Override public void removeAllAtmosphereResource(  AtmosphereResource<?,?> r){
    try {
synchronized (r) {
        if (store.size() > 0) {
          for (          Broadcaster b : lookupAll()) {
            b.removeAtmosphereResource(r);
          }
        }
      }
    }
 catch (    Exception ex) {
      logger.warn(ex.getMessage(),ex);
    }
  }
  @Override public Collection<Broadcaster> lookupAll(){
    return Collections.unmodifiableCollection(store.values());
  }
  public void destroy(){
    Enumeration<Broadcaster> e=store.elements();
    while (e.hasMoreElements()) {
      e.nextElement().destroy();
    }
    store.clear();
    factory=null;
  }
  public static BroadcasterFactory buildAndReplaceDefaultfactory(  Class<? extends Broadcaster> clazz,  AtmosphereServlet.AtmosphereConfig c) throws InstantiationException, IllegalAccessException {
    factory=new DefaultBroadcasterFactory(clazz,"NEVER");
    config=c;
    return factory;
  }
}
