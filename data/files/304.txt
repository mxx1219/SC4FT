package org.graalvm.compiler.replacements;
import org.graalvm.compiler.api.replacements.SnippetReflectionProvider;
import org.graalvm.compiler.core.common.type.StampPair;
import org.graalvm.compiler.nodes.ConstantNode;
import org.graalvm.compiler.nodes.calc.FloatingNode;
import org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderTool;
import org.graalvm.compiler.nodes.graphbuilderconf.ParameterPlugin;
import jdk.vm.ci.meta.Constant;
import jdk.vm.ci.meta.MetaAccessProvider;
public class ConstantBindingParameterPlugin implements ParameterPlugin {
  private final Object[] constantArgs;
  private final MetaAccessProvider metaAccess;
  private final SnippetReflectionProvider snippetReflection;
  public ConstantBindingParameterPlugin(  Object[] constantArgs,  MetaAccessProvider metaAccess,  SnippetReflectionProvider snippetReflection){
    this.constantArgs=constantArgs;
    this.metaAccess=metaAccess;
    this.snippetReflection=snippetReflection;
  }
  @Override public FloatingNode interceptParameter(  GraphBuilderTool b,  int index,  StampPair stamp){
    Object arg=constantArgs[index];
    if (arg != null) {
      ConstantNode constantNode;
      if (arg instanceof ConstantNode) {
        ConstantNode otherCon=(ConstantNode)arg;
        if (otherCon.graph() != b.getGraph()) {
          constantNode=ConstantNode.forConstant(stamp.getTrustedStamp(),otherCon.getValue(),otherCon.getStableDimension(),otherCon.isDefaultStable(),metaAccess);
        }
 else {
          constantNode=otherCon;
        }
      }
 else       if (arg instanceof Constant) {
        constantNode=ConstantNode.forConstant(stamp.getTrustedStamp(),(Constant)arg,metaAccess);
      }
 else {
        constantNode=ConstantNode.forConstant(snippetReflection.forBoxed(stamp.getTrustedStamp().getStackKind(),arg),metaAccess);
      }
      return constantNode;
    }
    return null;
  }
}
