package org.opensolaris.opengrok.history;
import java.beans.Encoder;
import java.beans.Expression;
import java.beans.PersistenceDelegate;
import java.beans.XMLDecoder;
import java.beans.XMLEncoder;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;
import org.opensolaris.opengrok.configuration.RuntimeEnvironment;
class FileHistoryCache implements HistoryCache {
  private final Object lock=new Object();
static class FilePersistenceDelegate extends PersistenceDelegate {
    protected Expression instantiate(    Object oldInstance,    Encoder out){
      File f=(File)oldInstance;
      return new Expression(oldInstance,f.getClass(),"new",new Object[]{f.toString()});
    }
  }
  private static File getCachedFile(  File file){
    RuntimeEnvironment env=RuntimeEnvironment.getInstance();
    StringBuilder sb=new StringBuilder();
    sb.append(env.getDataRootPath());
    sb.append(File.separatorChar);
    sb.append("historycache");
    String sourceRoot=env.getSourceRootPath();
    if (sourceRoot == null) {
      return null;
    }
    try {
      String add=file.getCanonicalPath().substring(sourceRoot.length());
      if (add.length() == 0) {
        add=File.separator;
      }
      sb.append(add);
    }
 catch (    IOException ex) {
      ex.printStackTrace();
    }
    sb.append(".gz");
    return new File(sb.toString());
  }
  private static History readCache(  File file) throws IOException {
    XMLDecoder d=new XMLDecoder(new BufferedInputStream(new GZIPInputStream(new FileInputStream(file))));
    Object obj=d.readObject();
    d.close();
    return (History)obj;
  }
  public void store(  History history,  File file) throws Exception {
    File cache=getCachedFile(file);
    File dir=cache.getParentFile();
    if (!dir.isDirectory()) {
      if (!dir.mkdirs()) {
        throw new IOException("Unable to create cache directory '" + dir + "'.");
      }
    }
    File output=File.createTempFile("oghist",null,dir);
    XMLEncoder e=new XMLEncoder(new BufferedOutputStream(new GZIPOutputStream(new FileOutputStream(output))));
    e.setPersistenceDelegate(File.class,new FilePersistenceDelegate());
    e.writeObject(history);
    e.close();
synchronized (lock) {
      if (!cache.delete() && cache.exists()) {
        output.delete();
        throw new IOException("Cachefile exists, and I could not delete it.");
      }
      if (!output.renameTo(cache)) {
        output.delete();
        throw new IOException("Failed to rename cache tmpfile.");
      }
    }
  }
  public History get(  File file,  Repository repository) throws Exception {
    Class<? extends HistoryParser> parserClass;
    parserClass=repository.getHistoryParser();
    File cache=getCachedFile(file);
    boolean hasCache=(cache != null) && cache.exists();
    if (hasCache && file.lastModified() < cache.lastModified()) {
      try {
        return readCache(cache);
      }
 catch (      Exception e) {
        System.err.println("Error when reading cache file '" + cache + "':");
        e.printStackTrace();
      }
    }
    HistoryParser parser=parserClass.newInstance();
    History history=null;
    long time;
    try {
      time=System.currentTimeMillis();
      history=parser.parse(file,repository);
      time=System.currentTimeMillis() - time;
    }
 catch (    UnsupportedOperationException e) {
      return null;
    }
catch (    Exception e) {
      System.err.println("Failed to parse " + file.getAbsolutePath());
      e.printStackTrace();
      throw e;
    }
    if (repository != null && repository.isCacheable() && !file.isDirectory()) {
      RuntimeEnvironment env=RuntimeEnvironment.getInstance();
      if (env.useHistoryCache()) {
        if ((cache != null) && (cache.exists() || (time > env.getHistoryReaderTimeLimit()))) {
          try {
            store(history,cache);
          }
 catch (          Exception e) {
            System.err.println("Error when writing cache file '" + cache + "':");
            e.printStackTrace();
          }
        }
      }
    }
    return history;
  }
}
