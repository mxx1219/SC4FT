package org.apache.shardingsphere.core.parse.old.parser.clause;
import com.google.common.base.Optional;
import com.google.common.base.Preconditions;
import org.apache.shardingsphere.core.parse.antlr.sql.statement.dml.InsertStatement;
import org.apache.shardingsphere.core.parse.antlr.sql.token.InsertColumnToken;
import org.apache.shardingsphere.core.parse.antlr.sql.token.InsertSetToken;
import org.apache.shardingsphere.core.parse.antlr.sql.token.InsertValuesToken;
import org.apache.shardingsphere.core.parse.antlr.sql.token.ItemsToken;
import org.apache.shardingsphere.core.parse.antlr.sql.token.SQLToken;
import org.apache.shardingsphere.core.parse.old.lexer.LexerEngine;
import org.apache.shardingsphere.core.parse.old.lexer.token.Keyword;
import org.apache.shardingsphere.core.parse.old.lexer.token.Symbol;
import org.apache.shardingsphere.core.parse.old.parser.clause.expression.BasicExpressionParser;
import org.apache.shardingsphere.core.parse.old.parser.context.condition.Column;
import org.apache.shardingsphere.core.parse.old.parser.context.condition.Condition;
import org.apache.shardingsphere.core.parse.old.parser.context.insertvalue.InsertValue;
import org.apache.shardingsphere.core.parse.old.parser.dialect.ExpressionParserFactory;
import org.apache.shardingsphere.core.parse.old.parser.expression.SQLExpression;
import org.apache.shardingsphere.core.parse.old.parser.expression.SQLIdentifierExpression;
import org.apache.shardingsphere.core.parse.old.parser.expression.SQLIgnoreExpression;
import org.apache.shardingsphere.core.parse.old.parser.expression.SQLNumberExpression;
import org.apache.shardingsphere.core.parse.old.parser.expression.SQLPlaceholderExpression;
import org.apache.shardingsphere.core.parse.old.parser.expression.SQLPropertyExpression;
import org.apache.shardingsphere.core.parse.old.parser.expression.SQLTextExpression;
import org.apache.shardingsphere.core.parse.util.SQLUtil;
import org.apache.shardingsphere.core.rule.ShardingRule;
import java.util.Iterator;
import java.util.LinkedList;
public abstract class InsertSetClauseParser implements SQLClauseParser {
  private final ShardingRule shardingRule;
  private final LexerEngine lexerEngine;
  private final BasicExpressionParser basicExpressionParser;
  public InsertSetClauseParser(  final ShardingRule shardingRule,  final LexerEngine lexerEngine){
    this.shardingRule=shardingRule;
    this.lexerEngine=lexerEngine;
    basicExpressionParser=ExpressionParserFactory.createBasicExpressionParser(lexerEngine);
  }
  public void parse(  final InsertStatement insertStatement){
    if (!lexerEngine.skipIfEqual(getCustomizedInsertKeywords())) {
      return;
    }
    removeUnnecessaryToken(insertStatement);
    Optional<InsertValuesToken> insertValuesToken=insertStatement.findSQLToken(InsertValuesToken.class);
    Preconditions.checkState(insertValuesToken.isPresent());
    insertStatement.getSQLTokens().remove(insertValuesToken.get());
    insertStatement.addSQLToken(new InsertSetToken(insertValuesToken.get().getStartIndex()));
    do {
      SQLExpression left=basicExpressionParser.parse(insertStatement);
      Column column=null;
      if (left instanceof SQLPropertyExpression) {
        column=new Column(SQLUtil.getExactlyValue(((SQLPropertyExpression)left).getName()),insertStatement.getTables().getSingleTableName());
      }
      if (left instanceof SQLIdentifierExpression) {
        column=new Column(SQLUtil.getExactlyValue(((SQLIdentifierExpression)left).getName()),insertStatement.getTables().getSingleTableName());
      }
      if (left instanceof SQLIgnoreExpression) {
        column=new Column(SQLUtil.getExactlyValue(((SQLIgnoreExpression)left).getExpression()),insertStatement.getTables().getSingleTableName());
      }
      Preconditions.checkNotNull(column);
      lexerEngine.accept(Symbol.EQ);
      SQLExpression right=basicExpressionParser.parse(insertStatement);
      if (shardingRule.isShardingColumn(column.getName(),column.getTableName()) && (right instanceof SQLNumberExpression || right instanceof SQLTextExpression || right instanceof SQLPlaceholderExpression)) {
        insertStatement.getRouteConditions().add(new Condition(column,right));
      }
    }
 while (lexerEngine.skipIfEqual(Symbol.COMMA));
    InsertValue insertValue=new InsertValue(insertStatement.getParametersIndex(),new LinkedList<SQLExpression>());
    insertStatement.getValues().add(insertValue);
  }
  private void removeUnnecessaryToken(  final InsertStatement insertStatement){
    Iterator<SQLToken> sqlTokens=insertStatement.getSQLTokens().iterator();
    while (sqlTokens.hasNext()) {
      SQLToken sqlToken=sqlTokens.next();
      if (sqlToken instanceof InsertColumnToken || sqlToken instanceof ItemsToken) {
        sqlTokens.remove();
      }
    }
  }
  protected abstract Keyword[] getCustomizedInsertKeywords();
}
