package me.xiaopan.sketch.util;
import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.ActivityManager;
import android.content.Context;
import android.content.pm.ConfigurationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Point;
import android.graphics.PointF;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.LayerDrawable;
import android.opengl.EGL14;
import android.opengl.GLES10;
import android.opengl.GLES20;
import android.os.Build;
import android.os.Environment;
import android.os.Looper;
import android.os.StatFs;
import android.os.storage.StorageManager;
import android.text.TextUtils;
import android.text.format.Formatter;
import android.util.Log;
import android.view.ViewGroup;
import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.net.URLEncoder;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import javax.microedition.khronos.egl.EGL10;
import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.egl.EGLContext;
import javax.microedition.khronos.egl.EGLDisplay;
import javax.microedition.khronos.egl.EGLSurface;
import me.xiaopan.sketch.Sketch;
import me.xiaopan.sketch.decode.ImageFormat;
import me.xiaopan.sketch.drawable.LoadingDrawable;
import me.xiaopan.sketch.drawable.SketchDrawable;
import me.xiaopan.sketch.feature.large.Tile;
import me.xiaopan.sketch.request.DisplayRequest;
import me.xiaopan.sketch.request.DownloadOptions;
import me.xiaopan.sketch.request.ImageViewInterface;
import me.xiaopan.sketch.request.LoadRequest;
import pl.droidsonroids.gif.GifDrawable;
public class SketchUtils {
  private static final float[] MATRIX_VALUES=new float[9];
  public static Bitmap readApkIcon(  Context context,  String apkFilePath,  boolean lowQualityImage,  String logName){
    PackageManager packageManager=context.getPackageManager();
    PackageInfo packageInfo=packageManager.getPackageArchiveInfo(apkFilePath,PackageManager.GET_ACTIVITIES);
    if (packageInfo == null) {
      if (Sketch.isDebugMode()) {
        Log.w(Sketch.TAG,SketchUtils.concat(logName,". get packageInfo is null",". ",apkFilePath));
      }
      return null;
    }
    packageInfo.applicationInfo.sourceDir=apkFilePath;
    packageInfo.applicationInfo.publicSourceDir=apkFilePath;
    Drawable drawable=null;
    try {
      drawable=packageManager.getApplicationIcon(packageInfo.applicationInfo);
    }
 catch (    Resources.NotFoundException e) {
      e.printStackTrace();
    }
    if (drawable == null) {
      if (Sketch.isDebugMode()) {
        Log.w(Sketch.TAG,SketchUtils.concat(logName,". app icon is null",". ",apkFilePath));
      }
      return null;
    }
    return drawableToBitmap(drawable,lowQualityImage);
  }
  public static Bitmap drawableToBitmap(  Drawable drawable,  boolean lowQualityImage){
    if (drawable == null || drawable.getIntrinsicWidth() == 0 || drawable.getIntrinsicHeight() == 0) {
      return null;
    }
    drawable.setBounds(0,0,drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight());
    Bitmap bitmap=Bitmap.createBitmap(drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight(),lowQualityImage ? Bitmap.Config.ARGB_4444 : Bitmap.Config.ARGB_8888);
    Canvas canvas=new Canvas(bitmap);
    drawable.draw(canvas);
    return bitmap;
  }
  @SuppressWarnings("WeakerAccess") public static boolean cleanDir(  File dir){
    if (dir == null || !dir.exists() || !dir.isDirectory()) {
      return true;
    }
    File[] files=dir.listFiles();
    boolean cleanSuccess=true;
    if (files != null) {
      for (      File tempFile : files) {
        if (tempFile.isDirectory()) {
          cleanSuccess&=cleanDir(tempFile);
        }
        cleanSuccess&=tempFile.delete();
      }
    }
    return cleanSuccess;
  }
  @SuppressWarnings("unused") public static boolean deleteFile(  File file){
    if (file == null || !file.exists()) {
      return true;
    }
    if (file.isDirectory()) {
      cleanDir(file);
    }
    return file.delete();
  }
  public static boolean checkSuffix(  String fileName,  String suffix){
    if (fileName == null) {
      return false;
    }
    String fileNameSuffix;
    int lastIndex=fileName.lastIndexOf(".");
    if (lastIndex > -1) {
      fileNameSuffix=fileName.substring(lastIndex);
    }
 else {
      return false;
    }
    return suffix.equalsIgnoreCase(fileNameSuffix);
  }
  public static String concat(  Object... strings){
    if (strings == null || strings.length == 0) {
      return null;
    }
    StringBuilder builder=new StringBuilder();
    for (    Object string : strings) {
      builder.append(string);
    }
    return builder.toString();
  }
  public static void mapping(  int sourceWidth,  int sourceHeight,  int targetWidth,  int targetHeight,  Rect rect){
    float widthScale=(float)sourceWidth / targetWidth;
    float heightScale=(float)sourceHeight / targetHeight;
    float finalScale=widthScale < heightScale ? widthScale : heightScale;
    int srcWidth=(int)(targetWidth * finalScale);
    int srcHeight=(int)(targetHeight * finalScale);
    int srcLeft=(sourceWidth - srcWidth) / 2;
    int srcTop=(sourceHeight - srcHeight) / 2;
    rect.set(srcLeft,srcTop,srcLeft + srcWidth,srcTop + srcHeight);
  }
  public static void close(  Closeable closeable){
    if (closeable == null) {
      return;
    }
    if (closeable instanceof OutputStream) {
      try {
        ((OutputStream)closeable).flush();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    try {
      closeable.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  public static boolean isGifImage(  Drawable drawable){
    if (drawable != null) {
      LayerDrawable layerDrawable;
      while (drawable instanceof LayerDrawable) {
        layerDrawable=(LayerDrawable)drawable;
        if (layerDrawable.getNumberOfLayers() > 0) {
          drawable=layerDrawable.getDrawable(layerDrawable.getNumberOfLayers() - 1);
        }
 else {
          drawable=null;
        }
      }
      return drawable instanceof SketchDrawable && ImageFormat.GIF.getMimeType().equals(((SketchDrawable)drawable).getMimeType());
    }
    return false;
  }
  public static String viewLayoutFormatted(  int size){
    if (size >= 0) {
      return String.valueOf(size);
    }
 else     if (size == ViewGroup.LayoutParams.MATCH_PARENT) {
      return "MATCH_PARENT";
    }
 else     if (size == ViewGroup.LayoutParams.WRAP_CONTENT) {
      return "WRAP_CONTENT";
    }
 else {
      return "Unknown";
    }
  }
  public static boolean isMainThread(){
    return Looper.getMainLooper().getThread() == Thread.currentThread();
  }
  @SuppressWarnings("WeakerAccess") public static String getProcessName(  Context context){
    int pid=android.os.Process.myPid();
    ActivityManager am=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);
    List<ActivityManager.RunningAppProcessInfo> runningApps=am.getRunningAppProcesses();
    if (runningApps == null) {
      return null;
    }
    for (    ActivityManager.RunningAppProcessInfo procInfo : runningApps) {
      if (procInfo.pid == pid) {
        return procInfo.processName;
      }
    }
    return null;
  }
  @SuppressWarnings("unused") public static boolean isMainProcess(  Context context){
    return context.getPackageName().equalsIgnoreCase(getProcessName(context));
  }
  @SuppressWarnings({"unused","WeakerAccess"}) public static String getSimpleProcessName(  Context context){
    String processName=getProcessName(context);
    if (processName == null) {
      return null;
    }
    String packageName=context.getPackageName();
    int lastIndex=processName.lastIndexOf(packageName);
    return lastIndex != -1 ? processName.substring(lastIndex + packageName.length()) : null;
  }
  @SuppressWarnings("WeakerAccess") public static File getAppCacheDir(  Context context){
    File appCacheDir=null;
    if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
      appCacheDir=context.getExternalCacheDir();
    }
    if (appCacheDir == null) {
      appCacheDir=context.getCacheDir();
    }
    return appCacheDir;
  }
  @SuppressWarnings("WeakerAccess") public static long getAvailableBytes(  File dir){
    if (!dir.exists() && !dir.mkdirs()) {
      return 0;
    }
    StatFs dirStatFs=new StatFs(dir.getPath());
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
      return dirStatFs.getAvailableBytes();
    }
 else {
      return (long)dirStatFs.getAvailableBlocks() * dirStatFs.getBlockSize();
    }
  }
  @SuppressWarnings("unused") public static long getTotalBytes(  File dir){
    if (!dir.exists() && !dir.mkdirs()) {
      return 0;
    }
    StatFs dirStatFs=new StatFs(dir.getPath());
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
      return dirStatFs.getTotalBytes();
    }
 else {
      return (long)dirStatFs.getBlockCount() * dirStatFs.getBlockSize();
    }
  }
  @SuppressWarnings("WeakerAccess") @SuppressLint("LongLogTag") @TargetApi(Build.VERSION_CODES.GINGERBREAD) public static String[] getAllAvailableSdcardPath(  Context context){
    if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.GINGERBREAD_MR1) {
      if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
        return new String[]{Environment.getExternalStorageDirectory().getPath()};
      }
 else {
        return null;
      }
    }
    String[] paths;
    Method getVolumePathsMethod;
    try {
      getVolumePathsMethod=StorageManager.class.getMethod("getVolumePaths");
    }
 catch (    NoSuchMethodException e) {
      Log.e("getAllAvailableSdcardPath","not found StorageManager.getVolumePaths() method");
      if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
        return new String[]{Environment.getExternalStorageDirectory().getPath()};
      }
 else {
        return null;
      }
    }
    StorageManager sm=(StorageManager)context.getSystemService(Context.STORAGE_SERVICE);
    try {
      paths=(String[])getVolumePathsMethod.invoke(sm);
    }
 catch (    IllegalAccessException e) {
      e.printStackTrace();
      return null;
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
      return null;
    }
    if (paths == null || paths.length == 0) {
      return null;
    }
    List<String> storagePathList=new LinkedList<String>();
    Collections.addAll(storagePathList,paths);
    Iterator<String> storagePathIterator=storagePathList.iterator();
    String path;
    Method getVolumeStateMethod=null;
    while (storagePathIterator.hasNext()) {
      path=storagePathIterator.next();
      if (getVolumeStateMethod == null) {
        try {
          getVolumeStateMethod=StorageManager.class.getMethod("getVolumeState",String.class);
        }
 catch (        NoSuchMethodException e) {
          e.printStackTrace();
          return null;
        }
      }
      String status;
      try {
        status=(String)getVolumeStateMethod.invoke(sm,path);
      }
 catch (      Exception e) {
        e.printStackTrace();
        storagePathIterator.remove();
        continue;
      }
      if (!(Environment.MEDIA_MOUNTED.equals(status) || Environment.MEDIA_MOUNTED_READ_ONLY.equals(status))) {
        storagePathIterator.remove();
      }
    }
    return storagePathList.toArray(new String[storagePathList.size()]);
  }
  @SuppressWarnings("WeakerAccess") public static String appendProcessName(  Context context,  String dirName){
    String simpleProcessName=SketchUtils.getSimpleProcessName(context);
    if (simpleProcessName != null) {
      try {
        dirName+=URLEncoder.encode(simpleProcessName,"UTF-8");
      }
 catch (      UnsupportedEncodingException e) {
        e.printStackTrace();
      }
    }
    return dirName;
  }
  public static File getDefaultSketchCacheDir(  Context context,  String dirName,  boolean compatManyProcess){
    File appCacheDir=SketchUtils.getAppCacheDir(context);
    return new File(appCacheDir,compatManyProcess ? appendProcessName(context,dirName) : dirName);
  }
  @SuppressWarnings("WeakerAccess") public static boolean testCreateFile(  File cacheDir) throws Exception {
    File parentDir=cacheDir;
    while (parentDir != null) {
      if (!parentDir.exists()) {
        parentDir=cacheDir.getParentFile();
        continue;
      }
      File file=new File(parentDir,"create_test.temp");
      if (file.exists() && !file.delete()) {
        throw new Exception("Delete old test file failed: " + file.getPath());
      }
      file.createNewFile();
      if (file.exists()) {
        if (file.delete()) {
          return true;
        }
 else {
          throw new Exception("Delete test file failed: " + file.getPath());
        }
      }
 else {
        return false;
      }
    }
    return false;
  }
  public static File buildCacheDir(  Context context,  String dirName,  boolean compatManyProcess,  long minSpaceSize,  boolean cleanOnNoSpace,  boolean cleanOldCacheFiles,  int expandNumber) throws NoSpaceException, UnableCreateDirException, UnableCreateFileException {
    List<File> appCacheDirs=new LinkedList<File>();
    String[] sdcardPaths=getAllAvailableSdcardPath(context);
    if (sdcardPaths != null && sdcardPaths.length > 0) {
      for (      String sdcardPath : sdcardPaths) {
        appCacheDirs.add(new File(sdcardPath,"Android" + File.separator + "data"+ File.separator+ context.getPackageName()+ File.separator+ "cache"));
      }
    }
    appCacheDirs.add(context.getCacheDir());
    String diskCacheDirName=compatManyProcess ? appendProcessName(context,dirName) : dirName;
    NoSpaceException noSpaceException=null;
    UnableCreateFileException unableCreateFileException=null;
    File diskCacheDir=null;
    int expandCount;
    for (    File appCacheDir : appCacheDirs) {
      expandCount=0;
      while (expandCount <= expandNumber) {
        diskCacheDir=new File(appCacheDir,diskCacheDirName + (expandCount > 0 ? expandCount : ""));
        if (diskCacheDir.exists()) {
          if (cleanOldCacheFiles) {
            File journalFile=new File(diskCacheDir,DiskLruCache.JOURNAL_FILE);
            if (!journalFile.exists()) {
              cleanDir(diskCacheDir);
            }
          }
        }
 else {
          if (!diskCacheDir.mkdirs() && !diskCacheDir.exists()) {
            expandCount++;
            continue;
          }
        }
        long availableBytes=getAvailableBytes(diskCacheDir);
        if (availableBytes < minSpaceSize) {
          if (cleanOnNoSpace) {
            cleanDir(diskCacheDir);
            availableBytes=getAvailableBytes(diskCacheDir);
          }
          if (availableBytes < minSpaceSize) {
            String availableFormatted=Formatter.formatFileSize(context,availableBytes);
            String minSpaceFormatted=Formatter.formatFileSize(context,minSpaceSize);
            noSpaceException=new NoSpaceException("Need " + availableFormatted + ", with only "+ minSpaceFormatted+ " in "+ diskCacheDir.getPath());
            break;
          }
        }
        try {
          if (testCreateFile(diskCacheDir)) {
            return diskCacheDir;
          }
 else {
            unableCreateFileException=new UnableCreateFileException("Unable create file in " + diskCacheDir.getPath());
            expandCount++;
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          unableCreateFileException=new UnableCreateFileException(e.getClass().getSimpleName() + ": " + e.getMessage());
          expandCount++;
        }
      }
    }
    if (noSpaceException != null) {
      throw noSpaceException;
    }
 else     if (unableCreateFileException != null) {
      throw unableCreateFileException;
    }
 else {
      throw new UnableCreateDirException("Unable create dir: " + (diskCacheDir != null ? diskCacheDir.getPath() : "null"));
    }
  }
  public static DisplayRequest findDisplayRequest(  ImageViewInterface imageViewInterface){
    if (imageViewInterface != null) {
      final Drawable drawable=imageViewInterface.getDrawable();
      if (drawable != null && drawable instanceof LoadingDrawable) {
        return ((LoadingDrawable)drawable).getRequest();
      }
    }
    return null;
  }
  public static int getBitmapByteCount(  Bitmap bitmap){
    if (bitmap == null || bitmap.isRecycled()) {
      return 0;
    }
 else     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
      return bitmap.getAllocationByteCount();
    }
 else     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR1) {
      return bitmap.getByteCount();
    }
 else {
      return bitmap.getRowBytes() * bitmap.getHeight();
    }
  }
  public static String getImageInfo(  String type,  Bitmap bitmap,  String mimeType,  long byteCount){
    if (bitmap != null) {
      if (TextUtils.isEmpty(type)) {
        type="Bitmap";
      }
      return SketchUtils.concat(type,"(","mimeType=",mimeType,"; ","hashCode=",Integer.toHexString(bitmap.hashCode()),"; ","size=",bitmap.getWidth(),"x",bitmap.getHeight(),"; ","config=",bitmap.getConfig() != null ? bitmap.getConfig().name() : null,"; ","byteCount=",byteCount,")");
    }
 else {
      return null;
    }
  }
  public static String getImageInfo(  String type,  Bitmap bitmap,  String mimeType){
    return getImageInfo(type,bitmap,mimeType,getBitmapByteCount(bitmap));
  }
  public static String getGifImageInfo(  GifDrawable gifDrawable){
    Bitmap bitmap=gifDrawable.getBitmap();
    return getImageInfo("GifDrawable",bitmap,"image/gif",(int)gifDrawable.getAllocationByteCount());
  }
  public static Drawable getLastDrawable(  Drawable drawable){
    if (drawable == null) {
      return null;
    }
    if (!(drawable instanceof LayerDrawable)) {
      return drawable;
    }
    LayerDrawable layerDrawable=(LayerDrawable)drawable;
    for (int i=layerDrawable.getNumberOfLayers() - 1; i >= 0; i--) {
      Drawable childDrawable=getLastDrawable(layerDrawable.getDrawable(i));
      if (childDrawable != null) {
        return childDrawable;
      }
    }
    return null;
  }
  @SuppressWarnings("unused") public static float getMatrixValue(  Matrix matrix,  int whichValue){
synchronized (MATRIX_VALUES) {
      matrix.getValues(MATRIX_VALUES);
      return MATRIX_VALUES[whichValue];
    }
  }
  public static float getMatrixScale(  Matrix matrix){
synchronized (MATRIX_VALUES) {
      matrix.getValues(MATRIX_VALUES);
      final float scaleX=MATRIX_VALUES[Matrix.MSCALE_X];
      final float skewY=MATRIX_VALUES[Matrix.MSKEW_Y];
      return (float)Math.sqrt((float)Math.pow(scaleX,2) + (float)Math.pow(skewY,2));
    }
  }
  @SuppressWarnings("unused") public static int getMatrixRotateDegrees(  Matrix matrix){
synchronized (MATRIX_VALUES) {
      matrix.getValues(MATRIX_VALUES);
      final float skewX=MATRIX_VALUES[Matrix.MSKEW_X];
      final float scaleX=MATRIX_VALUES[Matrix.MSCALE_X];
      final int degrees=(int)Math.round(Math.atan2(skewX,scaleX) * (180 / Math.PI));
      if (degrees < 0) {
        return Math.abs(degrees);
      }
 else       if (degrees > 0) {
        return 360 - degrees;
      }
 else {
        return 0;
      }
    }
  }
  @SuppressWarnings("unused") public static void getMatrixTranslation(  Matrix matrix,  PointF point){
synchronized (MATRIX_VALUES) {
      matrix.getValues(MATRIX_VALUES);
      point.x=MATRIX_VALUES[Matrix.MTRANS_X];
      point.y=MATRIX_VALUES[Matrix.MTRANS_Y];
    }
  }
  @SuppressWarnings("unused") public static String getOpenGLVersion(  Context context){
    ActivityManager am=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);
    ConfigurationInfo info=am.getDeviceConfigurationInfo();
    return info.getGlEsVersion();
  }
  public static int getOpenGLMaxTextureSize(){
    int maxTextureSize=0;
    try {
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
        maxTextureSize=getOpenGLMaxTextureSizeJB1();
      }
 else {
        maxTextureSize=getOpenGLMaxTextureSizeBase();
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    if (maxTextureSize == 0) {
      maxTextureSize=4096;
    }
    return maxTextureSize;
  }
  @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1) private static int getOpenGLMaxTextureSizeJB1(){
    android.opengl.EGLDisplay dpy=EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);
    int[] vers=new int[2];
    EGL14.eglInitialize(dpy,vers,0,vers,1);
    int[] configAttr={EGL14.EGL_COLOR_BUFFER_TYPE,EGL14.EGL_RGB_BUFFER,EGL14.EGL_LEVEL,0,EGL14.EGL_RENDERABLE_TYPE,EGL14.EGL_OPENGL_ES2_BIT,EGL14.EGL_SURFACE_TYPE,EGL14.EGL_PBUFFER_BIT,EGL14.EGL_NONE};
    android.opengl.EGLConfig[] configs=new android.opengl.EGLConfig[1];
    int[] numConfig=new int[1];
    EGL14.eglChooseConfig(dpy,configAttr,0,configs,0,1,numConfig,0);
    if (numConfig[0] == 0) {
    }
    android.opengl.EGLConfig config=configs[0];
    int[] surfAttr={EGL14.EGL_WIDTH,64,EGL14.EGL_HEIGHT,64,EGL14.EGL_NONE};
    android.opengl.EGLSurface surf=EGL14.eglCreatePbufferSurface(dpy,config,surfAttr,0);
    int[] ctxAttrib={EGL14.EGL_CONTEXT_CLIENT_VERSION,2,EGL14.EGL_NONE};
    android.opengl.EGLContext ctx=EGL14.eglCreateContext(dpy,config,EGL14.EGL_NO_CONTEXT,ctxAttrib,0);
    EGL14.eglMakeCurrent(dpy,surf,surf,ctx);
    int[] maxSize=new int[1];
    GLES20.glGetIntegerv(GLES20.GL_MAX_TEXTURE_SIZE,maxSize,0);
    EGL14.eglMakeCurrent(dpy,EGL14.EGL_NO_SURFACE,EGL14.EGL_NO_SURFACE,EGL14.EGL_NO_CONTEXT);
    EGL14.eglDestroySurface(dpy,surf);
    EGL14.eglDestroyContext(dpy,ctx);
    EGL14.eglTerminate(dpy);
    return maxSize[0];
  }
  private static int getOpenGLMaxTextureSizeBase(){
    if (Build.VERSION.SDK_INT == Build.VERSION_CODES.JELLY_BEAN) {
      return 0;
    }
    EGL10 egl=(EGL10)EGLContext.getEGL();
    EGLDisplay dpy=egl.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);
    int[] vers=new int[2];
    egl.eglInitialize(dpy,vers);
    int[] configAttr={EGL10.EGL_COLOR_BUFFER_TYPE,EGL10.EGL_RGB_BUFFER,EGL10.EGL_LEVEL,0,EGL10.EGL_SURFACE_TYPE,EGL10.EGL_PBUFFER_BIT,EGL10.EGL_NONE};
    EGLConfig[] configs=new EGLConfig[1];
    int[] numConfig=new int[1];
    egl.eglChooseConfig(dpy,configAttr,configs,1,numConfig);
    if (numConfig[0] == 0) {
    }
    EGLConfig config=configs[0];
    int[] surfAttr=new int[]{EGL10.EGL_WIDTH,64,EGL10.EGL_HEIGHT,64,EGL10.EGL_NONE};
    EGLSurface surf=egl.eglCreatePbufferSurface(dpy,config,surfAttr);
    final int EGL_CONTEXT_CLIENT_VERSION=0x3098;
    int[] ctxAttrib={EGL_CONTEXT_CLIENT_VERSION,1,EGL10.EGL_NONE};
    EGLContext ctx=egl.eglCreateContext(dpy,config,EGL10.EGL_NO_CONTEXT,ctxAttrib);
    egl.eglMakeCurrent(dpy,surf,surf,ctx);
    int[] maxSize=new int[1];
    GLES10.glGetIntegerv(GLES10.GL_MAX_TEXTURE_SIZE,maxSize,0);
    egl.eglMakeCurrent(dpy,EGL10.EGL_NO_SURFACE,EGL10.EGL_NO_SURFACE,EGL10.EGL_NO_CONTEXT);
    egl.eglDestroySurface(dpy,surf);
    egl.eglDestroyContext(dpy,ctx);
    egl.eglTerminate(dpy);
    return maxSize[0];
  }
  public static float formatFloat(  float floatValue,  int newScale){
    BigDecimal b=new BigDecimal(floatValue);
    return b.setScale(newScale,BigDecimal.ROUND_HALF_UP).floatValue();
  }
  public static boolean isSupportBRDByApi(){
    return Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD_MR1;
  }
  public static boolean isSupportBRDByImageFormat(  ImageFormat imageFormat){
    return imageFormat != null && (imageFormat == ImageFormat.JPEG || imageFormat == ImageFormat.PNG || (imageFormat == ImageFormat.WEBP && Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH));
  }
  public static boolean isSupportLargeImage(  LoadRequest loadRequest,  ImageFormat imageFormat){
    return loadRequest instanceof DisplayRequest && ((DisplayRequest)loadRequest).getViewInfo().isSupportLargeImage() && SketchUtils.isSupportBRDByApi()&& isSupportBRDByImageFormat(imageFormat);
  }
  public static boolean isCross(  Rect rect1,  Rect rect2){
    return rect1.left < rect2.right && rect2.left < rect1.right && rect1.top < rect2.bottom && rect2.top < rect1.bottom;
  }
  public static int dp2px(  Context context,  int dpValue){
    return (int)((dpValue * context.getResources().getDisplayMetrics().density) + 0.5);
  }
  public static void reverseRotateRect(  Rect rect,  int rotateDegrees,  Point drawableSize){
    if (rotateDegrees % 90 != 0) {
      return;
    }
    if (rotateDegrees == 90) {
      int cache=rect.bottom;
      rect.bottom=rect.left;
      rect.left=rect.top;
      rect.top=rect.right;
      rect.right=cache;
      rect.top=drawableSize.y - rect.top;
      rect.bottom=drawableSize.y - rect.bottom;
    }
 else     if (rotateDegrees == 180) {
      int cache=rect.right;
      rect.right=rect.left;
      rect.left=cache;
      cache=rect.bottom;
      rect.bottom=rect.top;
      rect.top=cache;
      rect.top=drawableSize.y - rect.top;
      rect.bottom=drawableSize.y - rect.bottom;
      rect.left=drawableSize.x - rect.left;
      rect.right=drawableSize.x - rect.right;
    }
 else     if (rotateDegrees == 270) {
      int cache=rect.bottom;
      rect.bottom=rect.right;
      rect.right=rect.top;
      rect.top=rect.left;
      rect.left=cache;
      rect.left=drawableSize.x - rect.left;
      rect.right=drawableSize.x - rect.right;
    }
  }
  public static void rotatePoint(  PointF point,  int rotateDegrees,  Point drawableSize){
    if (rotateDegrees % 90 != 0) {
      return;
    }
    if (rotateDegrees == 90) {
      float newX=drawableSize.y - point.y;
      float newY=point.x;
      point.x=newX;
      point.y=newY;
    }
 else     if (rotateDegrees == 180) {
      float newX=drawableSize.x - point.x;
      float newY=drawableSize.y - point.y;
      point.x=newX;
      point.y=newY;
    }
 else     if (rotateDegrees == 270) {
      float newX=point.y;
      float newY=drawableSize.x - point.x;
      point.x=newX;
      point.y=newY;
    }
  }
  public static String makeRequestId(  String imageUri,  DownloadOptions options){
    StringBuilder builder=new StringBuilder();
    builder.append(imageUri);
    if (options != null) {
      options.makeId(builder);
    }
    return builder.toString();
  }
  @SuppressWarnings("unused") public static String makeRequestId(  String imageUri,  String options){
    StringBuilder builder=new StringBuilder();
    builder.append(imageUri);
    if (!TextUtils.isEmpty(options)) {
      builder.append(options);
    }
    return builder.toString();
  }
  public static String makeStateImageRequestId(  String imageUri,  DownloadOptions options){
    StringBuilder builder=new StringBuilder();
    builder.append(imageUri);
    if (options != null) {
      options.makeStateImageId(builder);
    }
    return builder.toString();
  }
  public static String tileListToString(  List<Tile> tileList){
    if (tileList == null) {
      return null;
    }
    StringBuilder builder=new StringBuilder();
    builder.append("[");
    for (    Tile tile : tileList) {
      if (builder.length() > 1) {
        builder.append(",");
      }
      builder.append("\"");
      builder.append(tile.drawRect.left).append(",");
      builder.append(tile.drawRect.top).append(",");
      builder.append(tile.drawRect.right).append(",");
      builder.append(tile.drawRect.bottom);
      builder.append("\"");
    }
    builder.append("]");
    return builder.toString();
  }
  public static Bitmap.CompressFormat bitmapConfigToCompressFormat(  Bitmap.Config config){
    return config == Bitmap.Config.RGB_565 ? Bitmap.CompressFormat.JPEG : Bitmap.CompressFormat.PNG;
  }
}
