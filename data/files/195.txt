package org.axonframework.common.annotation;
import org.axonframework.domain.Message;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.NavigableSet;
import java.util.TreeSet;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import org.axonframework.common.ReflectionUtils.methodsOf;
public final class MethodMessageHandlerInspector {
  private final Class<?> targetType;
  private final List<MethodMessageHandler> handlers=new ArrayList<MethodMessageHandler>();
  private final ParameterResolverFactory parameterResolver;
  private static final ConcurrentMap<String,MethodMessageHandlerInspector> INSPECTORS=new ConcurrentHashMap<String,MethodMessageHandlerInspector>();
  public static <T extends Annotation>MethodMessageHandlerInspector getInstance(  Class<?> handlerClass,  Class<T> annotationType,  ParameterResolverFactory parameterResolverFactory,  boolean allowDuplicates){
    return getInstance(handlerClass,parameterResolverFactory,allowDuplicates,new AnnotatedHandlerDefinition<T>(annotationType));
  }
  public static MethodMessageHandlerInspector getInstance(  Class<?> handlerClass,  ParameterResolverFactory parameterResolverFactory,  boolean allowDuplicates,  HandlerDefinition<? super Method> handlerDefinition){
    String key=handlerDefinition.toString() + "@" + handlerClass.getName();
    MethodMessageHandlerInspector inspector=INSPECTORS.get(key);
    while (inspector == null || !inspector.parameterResolver.equals(parameterResolverFactory)) {
      final MethodMessageHandlerInspector newInspector=new MethodMessageHandlerInspector(parameterResolverFactory,handlerClass,allowDuplicates,handlerDefinition);
      if (inspector == null) {
        INSPECTORS.putIfAbsent(key,newInspector);
      }
 else {
        INSPECTORS.replace(key,inspector,newInspector);
      }
      inspector=INSPECTORS.get(key);
    }
    return inspector;
  }
  private MethodMessageHandlerInspector(  ParameterResolverFactory parameterResolverFactory,  Class<?> targetType,  boolean allowDuplicates,  HandlerDefinition<? super Method> handlerDefinition){
    this.parameterResolver=parameterResolverFactory;
    this.targetType=targetType;
    Iterable<Method> methods=methodsOf(targetType);
    NavigableSet<MethodMessageHandler> uniqueHandlers=new TreeSet<MethodMessageHandler>();
    for (    Method method : methods) {
      if (handlerDefinition.isMessageHandler(method)) {
        final Class<?> explicitPayloadType=handlerDefinition.resolvePayloadFor(method);
        MethodMessageHandler handlerMethod=MethodMessageHandler.createFor(method,explicitPayloadType,parameterResolverFactory);
        handlers.add(handlerMethod);
        if (!allowDuplicates && !uniqueHandlers.add(handlerMethod)) {
          MethodMessageHandler existing=uniqueHandlers.tailSet(handlerMethod).first();
          throw new UnsupportedHandlerException(String.format("The class %s contains two handler methods (%s and %s) that listen " + "to the same Message type: %s",method.getDeclaringClass().getSimpleName(),handlerMethod.getMethodName(),existing.getMethodName(),handlerMethod.getPayloadType().getSimpleName()),method);
        }
      }
    }
    Collections.sort(handlers);
  }
  public MethodMessageHandler findHandlerMethod(  final Message message){
    for (    MethodMessageHandler handler : handlers) {
      if (handler.matches(message)) {
        return handler;
      }
    }
    return null;
  }
  public List<MethodMessageHandler> getHandlers(){
    return new ArrayList<MethodMessageHandler>(handlers);
  }
  public Class<?> getTargetType(){
    return targetType;
  }
private static class AnnotatedHandlerDefinition<T extends Annotation> extends AbstractAnnotatedHandlerDefinition<T> {
    protected AnnotatedHandlerDefinition(    Class<T> annotationType){
      super(annotationType);
    }
    @Override protected Class<?> getDefinedPayload(    T annotation){
      return null;
    }
  }
}
