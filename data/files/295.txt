package org.opensolaris.opengrok.analysis.c;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.StringWriter;
import java.io.Writer;
import org.junit.Test;
import org.junit.Assert.assertEquals;
import org.junit.Assert.assertNotNull;
import org.opensolaris.opengrok.analysis.CtagsReader;
import org.opensolaris.opengrok.analysis.Definitions;
import org.opensolaris.opengrok.analysis.FileAnalyzer;
import org.opensolaris.opengrok.analysis.WriteXrefArgs;
import org.opensolaris.opengrok.analysis.Xrefer;
import org.opensolaris.opengrok.util.CustomAssertions.assertLinesEqual;
import org.opensolaris.opengrok.util.StreamUtils.copyStream;
public class CXrefTest {
  @Test public void sampleTest() throws IOException {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    InputStream res=getClass().getClassLoader().getResourceAsStream("org/opensolaris/opengrok/analysis/c/sample.c");
    assertNotNull("though sample.c should stream,",res);
    int actLOC=writeCXref(res,new PrintStream(baos));
    res.close();
    InputStream exp=getClass().getClassLoader().getResourceAsStream("org/opensolaris/opengrok/analysis/c/c_xrefres.html");
    assertNotNull("c_xrefres.html should stream,",exp);
    byte[] expbytes=copyStream(exp);
    exp.close();
    baos.close();
    String ostr=new String(baos.toByteArray(),"UTF-8");
    String estr=new String(expbytes,"UTF-8");
    assertLinesEqual("C xref",estr,ostr);
    assertEquals("C LOC",69,actLOC);
  }
  private int writeCXref(  InputStream iss,  PrintStream oss) throws IOException {
    oss.print(getHtmlBegin());
    Writer sw=new StringWriter();
    CAnalyzerFactory fac=new CAnalyzerFactory();
    FileAnalyzer analyzer=fac.getAnalyzer();
    WriteXrefArgs wargs=new WriteXrefArgs(new InputStreamReader(iss,"UTF-8"),sw);
    wargs.setDefs(getTagsDefinitions());
    analyzer.setScopesEnabled(true);
    analyzer.setFoldingEnabled(true);
    Xrefer xref=analyzer.writeXref(wargs);
    oss.print(sw.toString());
    oss.print(getHtmlEnd());
    return xref.getLOC();
  }
  private Definitions getTagsDefinitions() throws IOException {
    InputStream res=getClass().getClassLoader().getResourceAsStream("org/opensolaris/opengrok/analysis/c/sampletags_c");
    assertNotNull("though sampletags_c should stream,",res);
    BufferedReader in=new BufferedReader(new InputStreamReader(res,"UTF-8"));
    CtagsReader rdr=new CtagsReader();
    String line;
    while ((line=in.readLine()) != null) {
      rdr.readLine(line);
    }
    return rdr.getDefinitions();
  }
  private static String getHtmlBegin(){
    return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n" + "    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n"+ "<html xmlns=\"http://www.w3.org/1999/xhtml\""+ " xml:lang=\"en\" lang=\"en\"\n"+ "      class=\"xref\">\n"+ "<head>\n"+ "<title>sampleFile - OpenGrok cross reference"+ " for /sampleFile</title></head><body>\n";
  }
  private static String getHtmlEnd(){
    return "</body>\n" + "</html>\n";
  }
}
