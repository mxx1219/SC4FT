package com.tencent.angel.protobuf;
import com.tencent.angel.PartitionKey;
import com.tencent.angel.psagent.PSAgentContext;
import com.tencent.angel.worker.Worker;
import com.tencent.angel.worker.task.Task;
import com.tencent.angel.worker.task.TaskId;
import com.tencent.angel.protobuf.generated.ClientMasterServiceProtos.CreateMatricesRequest;
import com.tencent.angel.protobuf.generated.MLProtos.MatrixClock;
import com.tencent.angel.protobuf.generated.MLProtos.MatrixProto;
import com.tencent.angel.protobuf.generated.MLProtos.Pair;
import com.tencent.angel.protobuf.generated.MLProtos.Partition;
import com.tencent.angel.protobuf.generated.WorkerMasterServiceProtos.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
public final class RequestConverter {
  private static final Log LOG=LogFactory.getLog(RequestConverter.class);
  private RequestConverter(){
  }
  public static Partition buildPartition(  int matrixId,  PartitionKey part){
    Partition.Builder partitionBuilder=Partition.newBuilder();
    partitionBuilder.setMatrixId(matrixId);
    partitionBuilder.setPartitionId(part.getPartitionId());
    partitionBuilder.setStartRow(part.getStartRow());
    partitionBuilder.setEndRow(part.getEndRow());
    partitionBuilder.setStartCol(part.getStartCol());
    partitionBuilder.setEndCol(part.getEndCol());
    return partitionBuilder.build();
  }
  public static WorkerReportRequest buildWorkerReportRequest(  Worker worker){
    WorkerReportRequest.Builder builder=WorkerReportRequest.newBuilder();
    builder.setWorkerAttemptId(worker.getWorkerAttemptIdProto());
    if (!worker.isWorkerInitFinished()) {
      return builder.build();
    }
    Map<TaskId,Task> tasks=worker.getTaskManager().getRunningTask();
    if (tasks != null && !tasks.isEmpty()) {
      for (      Entry<TaskId,Task> entry : tasks.entrySet()) {
        builder.addTaskReports(buildTaskReport(entry.getKey(),entry.getValue()));
      }
    }
    Pair.Builder kvBuilder=Pair.newBuilder();
    Map<String,String> props=worker.getMetrics();
    for (    Entry<String,String> kv : props.entrySet()) {
      kvBuilder.setKey(kv.getKey());
      kvBuilder.setValue(kv.getValue());
      builder.addPairs(kvBuilder.build());
    }
    props=PSAgentContext.get().getMetrics();
    for (    Entry<String,String> kv : props.entrySet()) {
      kvBuilder.setKey(kv.getKey());
      kvBuilder.setValue(kv.getValue());
      builder.addPairs(kvBuilder.build());
    }
    return builder.build();
  }
  private static TaskStateProto buildTaskReport(  TaskId taskId,  Task task){
    TaskStateProto.Builder builder=TaskStateProto.newBuilder();
    if (!PSAgentContext.get().syncClockEnable()) {
      builder.setIteration(task.getTaskContext().getIteration());
      Map<Integer,AtomicInteger> matrixClocks=task.getTaskContext().getMatrixClocks();
      MatrixClock.Builder clockBuilder=MatrixClock.newBuilder();
      for (      Entry<Integer,AtomicInteger> clockEntry : matrixClocks.entrySet()) {
        builder.addMatrixClocks(clockBuilder.setMatrixId(clockEntry.getKey()).setClock(clockEntry.getValue().get()).build());
      }
    }
    builder.setProgress(task.getProgress());
    builder.setState(task.getTaskState().toString());
    builder.setTaskId(ProtobufUtil.convertToIdProto(taskId));
    Pair.Builder kvBuilder=Pair.newBuilder();
    Map<String,AtomicLong> taskCounters=task.getTaskContext().getCounters();
    for (    Entry<String,AtomicLong> kv : taskCounters.entrySet()) {
      kvBuilder.setKey(kv.getKey());
      kvBuilder.setValue(String.valueOf(kv.getValue().longValue()));
      builder.addCounters(kvBuilder.build());
    }
    return builder.build();
  }
  public static CreateMatricesRequest buildCreateMatricesRequest(  List<MatrixProto> matrixList){
    CreateMatricesRequest.Builder createMatricesReqBuilder=CreateMatricesRequest.newBuilder();
    if (matrixList != null) {
      for (      MatrixProto matrixProto : matrixList) {
        createMatricesReqBuilder.addMatrices(matrixProto);
      }
    }
    return createMatricesReqBuilder.build();
  }
}
