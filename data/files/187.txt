package org.eclipse.che.api.workspace.server;
import com.google.common.annotations.VisibleForTesting;
import com.google.common.util.concurrent.ThreadFactoryBuilder;
import org.eclipse.che.api.agent.server.wsagent.WsAgentLauncher;
import org.eclipse.che.api.core.ApiException;
import org.eclipse.che.api.core.ConflictException;
import org.eclipse.che.api.core.NotFoundException;
import org.eclipse.che.api.core.ServerException;
import org.eclipse.che.api.core.model.machine.MachineConfig;
import org.eclipse.che.api.core.model.machine.MachineLogMessage;
import org.eclipse.che.api.core.model.machine.MachineStatus;
import org.eclipse.che.api.core.model.workspace.Environment;
import org.eclipse.che.api.core.model.workspace.WorkspaceRuntime;
import org.eclipse.che.api.core.model.workspace.WorkspaceStatus;
import org.eclipse.che.api.core.notification.EventService;
import org.eclipse.che.api.core.util.AbstractMessageConsumer;
import org.eclipse.che.api.core.util.MessageConsumer;
import org.eclipse.che.api.core.util.WebsocketMessageConsumer;
import org.eclipse.che.api.environment.server.CheEnvironmentEngine;
import org.eclipse.che.api.environment.server.exception.EnvironmentNotRunningException;
import org.eclipse.che.api.machine.server.model.impl.SnapshotImpl;
import org.eclipse.che.api.machine.server.spi.Instance;
import org.eclipse.che.api.workspace.server.model.impl.EnvironmentImpl;
import org.eclipse.che.api.workspace.server.model.impl.WorkspaceImpl;
import org.eclipse.che.api.workspace.server.model.impl.WorkspaceRuntimeImpl;
import org.eclipse.che.api.workspace.shared.dto.event.WorkspaceStatusEvent;
import org.eclipse.che.api.workspace.shared.dto.event.WorkspaceStatusEvent.EventType;
import org.slf4j.Logger;
import javax.annotation.PreDestroy;
import javax.inject.Inject;
import javax.inject.Singleton;
import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.lang.String.format;
import org.eclipse.che.api.machine.shared.Constants.ENVIRONMENT_OUTPUT_CHANNEL_TEMPLATE;
import org.eclipse.che.dto.server.DtoFactory.newDto;
import org.slf4j.LoggerFactory.getLogger;
@Singleton public class WorkspaceRuntimes {
  private static final Logger LOG=getLogger(WorkspaceRuntimes.class);
  @VisibleForTesting final Map<String,WorkspaceState> workspaces;
  @VisibleForTesting private final EventService eventService;
  private final StripedLocks stripedLocks;
  private final CheEnvironmentEngine environmentEngine;
  private final WsAgentLauncher wsAgentLauncher;
  private volatile boolean isPreDestroyInvoked;
  @Inject public WorkspaceRuntimes(  EventService eventService,  CheEnvironmentEngine environmentEngine,  WsAgentLauncher wsAgentLauncher){
    this.eventService=eventService;
    this.environmentEngine=environmentEngine;
    this.wsAgentLauncher=wsAgentLauncher;
    this.workspaces=new HashMap<>();
    this.stripedLocks=new StripedLocks(16);
  }
  public RuntimeDescriptor get(  String workspaceId) throws NotFoundException, ServerException {
    WorkspaceState workspaceState;
    try (StripedLocks.ReadLock lock=stripedLocks.acquireReadLock(workspaceId)){
      workspaceState=workspaces.get(workspaceId);
    }
     if (workspaceState == null) {
      throw new NotFoundException("Workspace with id '" + workspaceId + "' is not running.");
    }
    RuntimeDescriptor runtimeDescriptor=new RuntimeDescriptor(workspaceState.status,new WorkspaceRuntimeImpl(workspaceState.activeEnv,null,Collections.emptyList(),null));
    List<Instance> machines=environmentEngine.getMachines(workspaceId);
    Optional<Instance> devMachineOptional=machines.stream().filter(null).findAny();
    if (devMachineOptional.isPresent()) {
      String projectsRoot=devMachineOptional.get().getStatus() == MachineStatus.RUNNING ? devMachineOptional.get().getRuntime().projectsRoot() : null;
      runtimeDescriptor.setRuntime(new WorkspaceRuntimeImpl(workspaceState.activeEnv,projectsRoot,machines,devMachineOptional.get()));
    }
 else     if (workspaceState.status == WorkspaceStatus.RUNNING) {
      String error=format("Dev machine is not found in active environment of workspace '%s'",workspaceId);
      throw new ServerException(error);
    }
    return runtimeDescriptor;
  }
  public RuntimeDescriptor start(  WorkspaceImpl workspace,  String envName,  boolean recover) throws ServerException, ConflictException, NotFoundException {
    String workspaceId=workspace.getId();
    EnvironmentImpl environment=workspace.getConfig().getEnvironments().get(envName);
    if (environment == null) {
      throw new IllegalArgumentException(format("Workspace '%s' doesn't contain environment '%s'",workspaceId,envName));
    }
    EnvironmentImpl environmentCopy=new EnvironmentImpl(environment);
    ensurePreDestroyIsNotExecuted();
    try (StripedLocks.WriteLock lock=stripedLocks.acquireWriteLock(workspaceId)){
      ensurePreDestroyIsNotExecuted();
      WorkspaceState workspaceState=workspaces.get(workspaceId);
      if (workspaceState != null) {
        throw new ConflictException(format("Could not start workspace '%s' because its status is '%s'",workspace.getConfig().getName(),workspaceState.status));
      }
      workspaces.put(workspaceId,new WorkspaceState(WorkspaceStatus.STARTING,envName));
    }
     ensurePreDestroyIsNotExecuted();
    publishWorkspaceEvent(EventType.STARTING,workspaceId,null);
    try {
      List<Instance> machines=environmentEngine.start(workspaceId,envName,environmentCopy,recover,getEnvironmentLogger(workspaceId));
      Instance devMachine=getDevMachine(machines);
      wsAgentLauncher.startWsAgent(devMachine);
      try (StripedLocks.WriteLock lock=stripedLocks.acquireWriteLock(workspaceId)){
        WorkspaceState workspaceState=workspaces.get(workspaceId);
        workspaceState.status=WorkspaceStatus.RUNNING;
      }
       publishWorkspaceEvent(EventType.RUNNING,workspaceId,null);
      return get(workspaceId);
    }
 catch (    ApiException e) {
      try {
        environmentEngine.stop(workspaceId);
      }
 catch (      EnvironmentNotRunningException ignore) {
      }
catch (      Exception ex) {
        LOG.error(ex.getLocalizedMessage(),ex);
      }
      String environmentStartError="Start of environment " + envName + " failed. Error: "+ e.getLocalizedMessage();
      try (StripedLocks.WriteLock lock=stripedLocks.acquireWriteLock(workspaceId)){
        workspaces.remove(workspaceId);
      }
       publishWorkspaceEvent(EventType.ERROR,workspaceId,environmentStartError);
      throw new ServerException(environmentStartError,e);
    }
  }
  public void stop(  String workspaceId) throws NotFoundException, ServerException, ConflictException {
    ensurePreDestroyIsNotExecuted();
    try (StripedLocks.WriteLock lock=stripedLocks.acquireWriteLock(workspaceId)){
      ensurePreDestroyIsNotExecuted();
      WorkspaceState workspaceState=workspaces.get(workspaceId);
      if (workspaceState == null) {
        throw new NotFoundException("Workspace with id '" + workspaceId + "' is not running.");
      }
      if (workspaceState.status != WorkspaceStatus.RUNNING) {
        throw new ConflictException(format("Couldn't stop '%s' workspace because its status is '%s'. Workspace can be stopped only if it is 'RUNNING'",workspaceId,workspaceState.status));
      }
      workspaceState.status=WorkspaceStatus.STOPPING;
    }
     publishWorkspaceEvent(EventType.STOPPING,workspaceId,null);
    String error=null;
    try {
      environmentEngine.stop(workspaceId);
    }
 catch (    ServerException|RuntimeException e) {
      error=e.getLocalizedMessage();
    }
 finally {
      try (StripedLocks.WriteLock lock=stripedLocks.acquireWriteLock(workspaceId)){
        workspaces.remove(workspaceId);
      }
     }
    if (error == null) {
      publishWorkspaceEvent(EventType.STOPPED,workspaceId,null);
    }
 else {
      publishWorkspaceEvent(EventType.ERROR,workspaceId,error);
    }
  }
  public boolean hasRuntime(  String workspaceId){
    try (StripedLocks.ReadLock lock=stripedLocks.acquireReadLock(workspaceId)){
      return workspaces.containsKey(workspaceId);
    }
   }
  public Instance startMachine(  String workspaceId,  MachineConfig machineConfig) throws ServerException, ConflictException, NotFoundException {
    try (StripedLocks.ReadLock lock=stripedLocks.acquireReadLock(workspaceId)){
      WorkspaceState workspaceState=workspaces.get(workspaceId);
      if (workspaceState == null || workspaceState.status != WorkspaceStatus.RUNNING) {
        throw new ConflictException(format("Environment of workspace '%s' is not running",workspaceId));
      }
    }
     Instance instance=environmentEngine.startMachine(workspaceId,machineConfig);
    try (StripedLocks.WriteLock lock=stripedLocks.acquireWriteLock(workspaceId)){
      WorkspaceState workspaceState=workspaces.get(workspaceId);
      if (workspaceState == null || workspaceState.status != WorkspaceStatus.RUNNING) {
        try {
          environmentEngine.stopMachine(workspaceId,instance.getId());
        }
 catch (        NotFoundException|ServerException|ConflictException e) {
          LOG.error(e.getLocalizedMessage(),e);
        }
        throw new ConflictException(format("Environment of workspace '%s' was stopped during start of  machine",workspaceId));
      }
    }
     return instance;
  }
  public void stopMachine(  String workspaceId,  String machineId) throws NotFoundException, ServerException, ConflictException {
    try (StripedLocks.ReadLock lock=stripedLocks.acquireReadLock(workspaceId)){
      WorkspaceState workspaceState=workspaces.get(workspaceId);
      if (workspaceState == null || workspaceState.status != WorkspaceStatus.RUNNING) {
        throw new ConflictException(format("Environment of workspace '%s' is not running",workspaceId));
      }
    }
     environmentEngine.stopMachine(workspaceId,machineId);
  }
  public SnapshotImpl saveMachine(  String namespace,  String workspaceId,  String machineId) throws NotFoundException, ServerException, ConflictException {
    try (StripedLocks.ReadLock lock=stripedLocks.acquireReadLock(workspaceId)){
      WorkspaceState workspaceState=workspaces.get(workspaceId);
      if (workspaceState == null || workspaceState.status != WorkspaceStatus.RUNNING) {
        throw new ConflictException(format("Environment of workspace '%s' is not running",workspaceId));
      }
    }
     return environmentEngine.saveSnapshot(namespace,workspaceId,machineId);
  }
  public void removeSnapshot(  SnapshotImpl snapshot) throws ServerException {
    environmentEngine.removeSnapshot(snapshot);
  }
  public Instance getMachine(  String workspaceId,  String machineId) throws NotFoundException {
    return environmentEngine.getMachine(workspaceId,machineId);
  }
  public Map<String,WorkspaceState> getWorkspaces(){
    return new HashMap<>(workspaces);
  }
  private MessageConsumer<MachineLogMessage> getEnvironmentLogger(  String workspaceId) throws ServerException {
    WebsocketMessageConsumer<MachineLogMessage> envMessageConsumer=new WebsocketMessageConsumer<>(format(ENVIRONMENT_OUTPUT_CHANNEL_TEMPLATE,workspaceId));
    return new AbstractMessageConsumer<MachineLogMessage>(){
      @Override public void consume(      MachineLogMessage message) throws IOException {
        envMessageConsumer.consume(message);
      }
    }
;
  }
  @PreDestroy @VisibleForTesting void cleanup(){
    isPreDestroyInvoked=true;
    final ExecutorService stopEnvExecutor=Executors.newFixedThreadPool(2 * Runtime.getRuntime().availableProcessors(),new ThreadFactoryBuilder().setNameFormat("StopEnvironment-%d").setDaemon(false).build());
    try (StripedLocks.WriteAllLock lock=stripedLocks.acquireWriteAllLock()){
      for (      Map.Entry<String,WorkspaceState> workspace : workspaces.entrySet()) {
        if (workspace.getValue().status.equals(WorkspaceStatus.RUNNING) || workspace.getValue().status.equals(WorkspaceStatus.STARTING)) {
          stopEnvExecutor.execute(null);
        }
      }
      workspaces.clear();
      stopEnvExecutor.shutdown();
    }
     try {
      if (!stopEnvExecutor.awaitTermination(50,TimeUnit.SECONDS)) {
        stopEnvExecutor.shutdownNow();
        if (!stopEnvExecutor.awaitTermination(10,TimeUnit.SECONDS)) {
          LOG.warn("Unable terminate destroy machines pool");
        }
      }
    }
 catch (    InterruptedException e) {
      stopEnvExecutor.shutdownNow();
      Thread.currentThread().interrupt();
    }
  }
  @VisibleForTesting void publishWorkspaceEvent(  EventType type,  String workspaceId,  String error){
    eventService.publish(newDto(WorkspaceStatusEvent.class).withEventType(type).withWorkspaceId(workspaceId).withError(error));
  }
  private Instance getDevMachine(  List<Instance> machines) throws ServerException {
    Optional<Instance> devMachineOpt=machines.stream().filter(null).findAny();
    if (devMachineOpt.isPresent()) {
      return devMachineOpt.get();
    }
    throw new ServerException("Environment has booted but it doesn't contain dev machine. Environment has been stopped.");
  }
  private void ensurePreDestroyIsNotExecuted() throws ServerException {
    if (isPreDestroyInvoked) {
      throw new ServerException("Could not perform operation because application server is stopping");
    }
  }
public static class WorkspaceState {
    private WorkspaceStatus status;
    private String activeEnv;
    public WorkspaceState(    WorkspaceStatus status,    String activeEnv){
      this.status=status;
      this.activeEnv=activeEnv;
    }
    public String getActiveEnv(){
      return activeEnv;
    }
    public WorkspaceStatus getStatus(){
      return status;
    }
    @Override public boolean equals(    Object o){
      if (this == o)       return true;
      if (!(o instanceof WorkspaceState))       return false;
      WorkspaceState that=(WorkspaceState)o;
      return status == that.status && Objects.equals(activeEnv,that.activeEnv);
    }
    @Override public int hashCode(){
      return Objects.hash(status,activeEnv);
    }
  }
public static class RuntimeDescriptor {
    private WorkspaceRuntimeImpl runtime;
    private WorkspaceStatus status;
    public RuntimeDescriptor(    WorkspaceStatus workspaceStatus,    WorkspaceRuntimeImpl runtime){
      this.status=workspaceStatus;
      this.runtime=runtime;
    }
    public WorkspaceRuntimeImpl getRuntime(){
      return runtime;
    }
    public void setRuntime(    WorkspaceRuntimeImpl runtime){
      this.runtime=runtime;
    }
    public WorkspaceStatus getRuntimeStatus(){
      return status;
    }
    private void setRuntimeStatus(    WorkspaceStatus status){
      this.status=status;
    }
    @Override public boolean equals(    Object o){
      if (this == o)       return true;
      if (!(o instanceof RuntimeDescriptor))       return false;
      RuntimeDescriptor that=(RuntimeDescriptor)o;
      return Objects.equals(runtime,that.runtime) && status == that.status;
    }
    @Override public int hashCode(){
      return Objects.hash(runtime,status);
    }
    @Override public String toString(){
      return "RuntimeDescriptor{" + "runtime=" + runtime + ", status="+ status+ '}';
    }
  }
}
