package org.apache.jk.common;
import java.io.IOException;
import org.apache.coyote.OutputBuffer;
import org.apache.coyote.InputBuffer;
import org.apache.coyote.Request;
import org.apache.coyote.Response;
import org.apache.jk.core.Msg;
import org.apache.jk.core.MsgContext;
import org.apache.tomcat.util.buf.ByteChunk;
import org.apache.tomcat.util.buf.MessageBytes;
import org.apache.tomcat.util.buf.C2BConverter;
import org.apache.tomcat.util.http.HttpMessages;
import org.apache.tomcat.util.http.MimeHeaders;
public class JkInputStream implements InputBuffer, OutputBuffer {
  private static org.apache.juli.logging.Log log=org.apache.juli.logging.LogFactory.getLog(JkInputStream.class);
  private Msg bodyMsg;
  private Msg outputMsg;
  private MsgContext mc;
  private MessageBytes bodyBuff=MessageBytes.newInstance();
  private MessageBytes tempMB=MessageBytes.newInstance();
  private boolean end_of_stream=false;
  private boolean isEmpty=true;
  private boolean isFirst=true;
  private boolean isReplay=false;
  private boolean isReadRequired=false;
static {
    try {
      Class.forName("org.apache.tomcat.util.http.HttpMessages");
    }
 catch (    Exception ex) {
    }
  }
  public JkInputStream(  MsgContext context,  int bsize){
    mc=context;
    bodyMsg=new MsgAjp(bsize);
    outputMsg=new MsgAjp(bsize);
  }
  public JkInputStream(  MsgContext context){
    this(context,8 * 1024);
  }
  public void setIsReadRequired(  boolean irr){
    isReadRequired=irr;
  }
  public boolean isReadRequired(){
    return isReadRequired;
  }
  public void recycle(){
    if (isReadRequired && isFirst) {
      try {
        receive();
      }
 catch (      IOException iex) {
        log.debug("Error consuming request body",iex);
      }
    }
    end_of_stream=false;
    isEmpty=true;
    isFirst=true;
    isReplay=false;
    isReadRequired=false;
    bodyBuff.recycle();
    tempMB.recycle();
  }
  public void endMessage() throws IOException {
    outputMsg.reset();
    outputMsg.appendByte(AjpConstants.JK_AJP13_END_RESPONSE);
    outputMsg.appendByte(1);
    mc.getSource().send(outputMsg,mc);
    mc.getSource().flush(outputMsg,mc);
  }
  public int doWrite(  ByteChunk chunk,  Response res) throws IOException {
    if (!res.isCommitted()) {
      res.sendHeaders();
    }
    int len=chunk.getLength();
    byte buf[]=outputMsg.getBuffer();
    int chunkSize=buf.length - outputMsg.getHeaderLength() - 4;
    int off=0;
    while (len > 0) {
      int thisTime=len;
      if (thisTime > chunkSize) {
        thisTime=chunkSize;
      }
      len-=thisTime;
      outputMsg.reset();
      outputMsg.appendByte(AjpConstants.JK_AJP13_SEND_BODY_CHUNK);
      if (log.isTraceEnabled())       log.trace("doWrite " + off + " "+ thisTime+ " "+ len);
      outputMsg.appendBytes(chunk.getBytes(),chunk.getOffset() + off,thisTime);
      off+=thisTime;
      mc.getSource().send(outputMsg,mc);
    }
    return 0;
  }
  public int doRead(  ByteChunk responseChunk,  Request req) throws IOException {
    if (log.isDebugEnabled())     log.debug("doRead " + end_of_stream + " "+ responseChunk.getOffset()+ " "+ responseChunk.getLength());
    if (end_of_stream) {
      return -1;
    }
    if (isFirst && isReadRequired) {
      if (!receive()) {
        return 0;
      }
    }
 else     if (isEmpty) {
      if (!refillReadBuffer()) {
        return -1;
      }
    }
    ByteChunk bc=bodyBuff.getByteChunk();
    responseChunk.setBytes(bc.getBuffer(),bc.getStart(),bc.getLength());
    isEmpty=true;
    return responseChunk.getLength();
  }
  public boolean receive() throws IOException {
    isFirst=false;
    bodyMsg.reset();
    int err=mc.getSource().receive(bodyMsg,mc);
    if (log.isDebugEnabled())     log.info("Receiving: getting request body chunk " + err + " "+ bodyMsg.getLen());
    if (err < 0) {
      throw new IOException();
    }
    if (bodyMsg.getLen() == 0) {
      return false;
    }
    int blen=bodyMsg.peekInt();
    if (blen == 0) {
      return false;
    }
    if (log.isTraceEnabled()) {
      bodyMsg.dump("Body buffer");
    }
    bodyMsg.getBytes(bodyBuff);
    if (log.isTraceEnabled())     log.trace("Data:\n" + bodyBuff);
    isEmpty=false;
    return true;
  }
  private boolean refillReadBuffer() throws IOException {
    if (isReplay) {
      end_of_stream=true;
    }
    if (end_of_stream) {
      if (log.isDebugEnabled())       log.debug("refillReadBuffer: end of stream ");
      return false;
    }
    bodyMsg.reset();
    bodyMsg.appendByte(AjpConstants.JK_AJP13_GET_BODY_CHUNK);
    bodyMsg.appendInt(AjpConstants.MAX_READ_SIZE);
    if (log.isDebugEnabled())     log.debug("refillReadBuffer " + Thread.currentThread());
    mc.getSource().send(bodyMsg,mc);
    mc.getSource().flush(bodyMsg,mc);
    boolean moreData=receive();
    if (!moreData) {
      end_of_stream=true;
    }
    return moreData;
  }
  public void appendHead(  Response res) throws IOException {
    if (log.isDebugEnabled())     log.debug("COMMIT sending headers " + res + " "+ res.getMimeHeaders());
    C2BConverter c2b=mc.getConverter();
    outputMsg.reset();
    outputMsg.appendByte(AjpConstants.JK_AJP13_SEND_HEADERS);
    outputMsg.appendInt(res.getStatus());
    String message=null;
    if (org.apache.coyote.Constants.USE_CUSTOM_STATUS_MSG_IN_HEADER) {
      message=res.getMessage();
    }
    if (message == null) {
      message=HttpMessages.getMessage(res.getStatus());
    }
 else {
      message=message.replace('\n',' ').replace('\r',' ');
    }
    tempMB.setString(message);
    c2b.convert(tempMB);
    outputMsg.appendBytes(tempMB);
    MimeHeaders headers=res.getMimeHeaders();
    String contentType=res.getContentType();
    if (contentType != null) {
      headers.setValue("Content-Type").setString(contentType);
    }
    String contentLanguage=res.getContentLanguage();
    if (contentLanguage != null) {
      headers.setValue("Content-Language").setString(contentLanguage);
    }
    long contentLength=res.getContentLengthLong();
    if (contentLength >= 0) {
      headers.setValue("Content-Length").setLong(contentLength);
    }
    int numHeaders=headers.size();
    outputMsg.appendInt(numHeaders);
    for (int i=0; i < numHeaders; i++) {
      MessageBytes hN=headers.getName(i);
      c2b.convert(hN);
      outputMsg.appendBytes(hN);
      MessageBytes hV=headers.getValue(i);
      c2b.convert(hV);
      outputMsg.appendBytes(hV);
    }
    mc.getSource().send(outputMsg,mc);
  }
  public void setReplay(  ByteChunk replay){
    isFirst=false;
    isEmpty=false;
    isReplay=true;
    bodyBuff.setBytes(replay.getBytes(),replay.getStart(),replay.getLength());
  }
}
