package org.broadleafcommerce.core.pricing.service.workflow;
import org.broadleafcommerce.common.currency.util.BroadleafCurrencyUtils;
import org.broadleafcommerce.common.money.Money;
import org.broadleafcommerce.core.order.domain.FulfillmentGroup;
import org.broadleafcommerce.core.order.domain.Order;
import org.broadleafcommerce.core.pricing.service.FulfillmentPricingService;
import org.broadleafcommerce.core.workflow.BaseActivity;
import org.broadleafcommerce.core.workflow.ProcessContext;
import java.math.BigDecimal;
import javax.annotation.Resource;
public class FulfillmentGroupPricingActivity extends BaseActivity<ProcessContext<Order>> {
  @Resource(name="blFulfillmentPricingService") private FulfillmentPricingService fulfillmentPricingService;
  public void setFulfillmentPricingService(  FulfillmentPricingService fulfillmentPricingService){
    this.fulfillmentPricingService=fulfillmentPricingService;
  }
  @Override public ProcessContext<Order> execute(  ProcessContext<Order> context) throws Exception {
    Order order=context.getSeedData();
    Money totalFulfillmentCharges=BroadleafCurrencyUtils.getMoney(BigDecimal.ZERO,order.getCurrency());
    for (    FulfillmentGroup fulfillmentGroup : order.getFulfillmentGroups()) {
      if (fulfillmentGroup != null) {
        fulfillmentGroup=fulfillmentPricingService.calculateCostForFulfillmentGroup(fulfillmentGroup);
        if (fulfillmentGroup.getFulfillmentPrice() != null) {
          totalFulfillmentCharges=totalFulfillmentCharges.add(fulfillmentGroup.getFulfillmentPrice());
        }
      }
    }
    order.setTotalFulfillmentCharges(totalFulfillmentCharges);
    context.setSeedData(order);
    return context;
  }
}
