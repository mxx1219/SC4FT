package io.anuke.mindustry.maps;
import com.badlogic.gdx.utils.Array;
import io.anuke.mindustry.content.Items;
import io.anuke.mindustry.content.blocks.CraftingBlocks;
import io.anuke.mindustry.content.blocks.ProductionBlocks;
import io.anuke.mindustry.content.blocks.StorageBlocks;
import io.anuke.mindustry.content.blocks.UnitBlocks;
import io.anuke.mindustry.maps.missions.BlockMission;
import io.anuke.mindustry.maps.missions.ItemMission;
import io.anuke.mindustry.maps.missions.Mission;
import io.anuke.mindustry.maps.missions.WaveMission;
import io.anuke.mindustry.world.Block;
import io.anuke.mindustry.Vars.*;
public class TutorialSector {
  private static int droneIndex;
  public static Array<Mission> getMissions(){
    return Array.with(new ItemMission(Items.copper,10).setMessage("An updated tutorial will return next build.\nFor now, you'll have to deal with... this."),new BlockMission(ProductionBlocks.mechanicalDrill),new ItemMission(Items.copper,100),new ItemMission(Items.lead,50),new BlockMission(CraftingBlocks.smelter),new ItemMission(Items.densealloy,10),new WaveMission(5));
  }
  public static boolean supressDrone(){
    return world.getSector() != null && world.getSector().x == 0 && world.getSector().y == 0 && world.getSector().completedMissions < droneIndex;
  }
  private static void generateBase(){
    int x=sectorSize - 50, y=sectorSize - 50;
    world.setBlock(world.tile(x,y),StorageBlocks.core,waveTeam);
    world.setBlock(world.tile(x - 1,y + 2),UnitBlocks.daggerFactory,waveTeam);
    world.setBlock(world.tile(x - 1,y - 3),UnitBlocks.daggerFactory,waveTeam);
    state.teams.get(waveTeam).cores.add(world.tile(x,y));
  }
private static class MarkerBlockMission extends BlockMission {
    public MarkerBlockMission(    Block block){
      super(block);
    }
  }
}
