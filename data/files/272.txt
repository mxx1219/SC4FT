package org.apache.camel.model;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ScheduledExecutorService;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;
import org.apache.camel.Expression;
import org.apache.camel.Processor;
import org.apache.camel.builder.ExpressionBuilder;
import org.apache.camel.model.language.ExpressionDefinition;
import org.apache.camel.processor.Throttler;
import org.apache.camel.spi.RouteContext;
import org.apache.camel.util.ObjectHelper;
@XmlRootElement(name="throttle") @XmlAccessorType(XmlAccessType.FIELD) public class ThrottleDefinition extends ExpressionNode implements ExecutorServiceAwareDefinition<ThrottleDefinition> {
  @XmlTransient private ExecutorService executorService;
  @XmlAttribute private String executorServiceRef;
  @XmlAttribute private Long timePeriodMillis;
  @XmlAttribute private Boolean asyncDelayed;
  @XmlAttribute private Boolean callerRunsWhenRejected;
  public ThrottleDefinition(){
  }
  public ThrottleDefinition(  Expression maximumRequestsPerPeriod){
    super(maximumRequestsPerPeriod);
  }
  @Override public String toString(){
    return "Throttle[" + description() + " -> "+ getOutputs()+ "]";
  }
  protected String description(){
    return getExpression() + " request per " + getTimePeriodMillis()+ " millis";
  }
  @Override public String getShortName(){
    return "throttle";
  }
  @Override public String getLabel(){
    return "throttle[" + description() + "]";
  }
  @Override public Processor createProcessor(  RouteContext routeContext) throws Exception {
    Processor childProcessor=this.createChildProcessor(routeContext,true);
    ScheduledExecutorService scheduled=ProcessorDefinitionHelper.getConfiguredScheduledExecutorService(routeContext,"Throttle",this,isAsyncDelayed());
    long period=getTimePeriodMillis() != null ? getTimePeriodMillis() : 1000L;
    Expression maxRequestsExpression=createMaxRequestsPerPeriodExpression(routeContext);
    Throttler answer=new Throttler(childProcessor,maxRequestsExpression,period,scheduled);
    if (getAsyncDelayed() != null) {
      answer.setAsyncDelayed(getAsyncDelayed());
    }
    if (getCallerRunsWhenRejected() == null) {
      answer.setCallerRunsWhenRejected(true);
    }
 else {
      answer.setCallerRunsWhenRejected(getCallerRunsWhenRejected());
    }
    return answer;
  }
  private Expression createMaxRequestsPerPeriodExpression(  RouteContext routeContext){
    if (getExpression() != null) {
      if (ObjectHelper.isNotEmpty(getExpression().getExpression()) || getExpression().getExpressionValue() != null) {
        return getExpression().createExpression(routeContext);
      }
    }
    return null;
  }
  public ThrottleDefinition timePeriodMillis(  long timePeriodMillis){
    setTimePeriodMillis(timePeriodMillis);
    return this;
  }
  public ThrottleDefinition maximumRequestsPerPeriod(  Long maximumRequestsPerPeriod){
    setExpression(new ExpressionDefinition(ExpressionBuilder.constantExpression(maximumRequestsPerPeriod)));
    return this;
  }
  public ThrottleDefinition callerRunsWhenRejected(  boolean callerRunsWhenRejected){
    setCallerRunsWhenRejected(callerRunsWhenRejected);
    return this;
  }
  public ThrottleDefinition asyncDelayed(){
    setAsyncDelayed(true);
    return this;
  }
  public ThrottleDefinition executorService(  ExecutorService executorService){
    setExecutorService(executorService);
    return this;
  }
  public ThrottleDefinition executorServiceRef(  String executorServiceRef){
    setExecutorServiceRef(executorServiceRef);
    return this;
  }
  public Long getTimePeriodMillis(){
    return timePeriodMillis;
  }
  public void setTimePeriodMillis(  Long timePeriodMillis){
    this.timePeriodMillis=timePeriodMillis;
  }
  public Boolean getAsyncDelayed(){
    return asyncDelayed;
  }
  public void setAsyncDelayed(  Boolean asyncDelayed){
    this.asyncDelayed=asyncDelayed;
  }
  public boolean isAsyncDelayed(){
    return asyncDelayed != null && asyncDelayed;
  }
  public Boolean getCallerRunsWhenRejected(){
    return callerRunsWhenRejected;
  }
  public void setCallerRunsWhenRejected(  Boolean callerRunsWhenRejected){
    this.callerRunsWhenRejected=callerRunsWhenRejected;
  }
  public ExecutorService getExecutorService(){
    return executorService;
  }
  public void setExecutorService(  ExecutorService executorService){
    this.executorService=executorService;
  }
  public String getExecutorServiceRef(){
    return executorServiceRef;
  }
  public void setExecutorServiceRef(  String executorServiceRef){
    this.executorServiceRef=executorServiceRef;
  }
}
