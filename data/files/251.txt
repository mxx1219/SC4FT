package org.springframework.jdbc.datasource;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import javax.sql.DataSource;
import org.springframework.transaction.support.TransactionSynchronizationManager;
import org.springframework.util.Assert;
public class TransactionAwareDataSourceProxy extends DelegatingDataSource {
  private boolean reobtainTransactionalConnections=false;
  public TransactionAwareDataSourceProxy(){
  }
  public TransactionAwareDataSourceProxy(  DataSource targetDataSource){
    super(targetDataSource);
  }
  public void setReobtainTransactionalConnections(  boolean reobtainTransactionalConnections){
    this.reobtainTransactionalConnections=reobtainTransactionalConnections;
  }
  @Override public Connection getConnection() throws SQLException {
    DataSource ds=getTargetDataSource();
    Assert.state(ds != null,"'targetDataSource' is required");
    return getTransactionAwareConnectionProxy(ds);
  }
  protected Connection getTransactionAwareConnectionProxy(  DataSource targetDataSource){
    return (Connection)Proxy.newProxyInstance(ConnectionProxy.class.getClassLoader(),new Class[]{ConnectionProxy.class},new TransactionAwareInvocationHandler(targetDataSource));
  }
  protected boolean shouldObtainFixedConnection(  DataSource targetDataSource){
    return (!TransactionSynchronizationManager.isSynchronizationActive() || !this.reobtainTransactionalConnections);
  }
private class TransactionAwareInvocationHandler implements InvocationHandler {
    private final DataSource targetDataSource;
    private Connection target;
    private boolean closed=false;
    public TransactionAwareInvocationHandler(    DataSource targetDataSource){
      this.targetDataSource=targetDataSource;
    }
    public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      if (method.getName().equals("equals")) {
        return (proxy == args[0]);
      }
 else       if (method.getName().equals("hashCode")) {
        return System.identityHashCode(proxy);
      }
 else       if (method.getName().equals("toString")) {
        StringBuilder sb=new StringBuilder("Transaction-aware proxy for target Connection ");
        if (this.target != null) {
          sb.append("[").append(this.target.toString()).append("]");
        }
 else {
          sb.append(" from DataSource [").append(this.targetDataSource).append("]");
        }
      }
 else       if (method.getName().equals("isClosed")) {
        return this.closed;
      }
 else       if (method.getName().equals("close")) {
        DataSourceUtils.doReleaseConnection(this.target,this.targetDataSource);
        this.closed=true;
        return null;
      }
      if (this.target == null) {
        if (this.closed) {
          throw new SQLException("Connection handle already closed");
        }
        if (shouldObtainFixedConnection(this.targetDataSource)) {
          this.target=DataSourceUtils.doGetConnection(this.targetDataSource);
        }
      }
      Connection actualTarget=this.target;
      if (actualTarget == null) {
        actualTarget=DataSourceUtils.doGetConnection(this.targetDataSource);
      }
      if (method.getName().equals("getTargetConnection")) {
        return actualTarget;
      }
      try {
        Object retVal=method.invoke(actualTarget,args);
        if (retVal instanceof Statement) {
          DataSourceUtils.applyTransactionTimeout((Statement)retVal,this.targetDataSource);
        }
        return retVal;
      }
 catch (      InvocationTargetException ex) {
        throw ex.getTargetException();
      }
 finally {
        if (actualTarget != this.target) {
          DataSourceUtils.doReleaseConnection(actualTarget,this.targetDataSource);
        }
      }
    }
  }
}
