package org.apache.flink.optimizer.dag;
import java.util.Collections;
import java.util.List;
import org.apache.flink.api.common.functions.Partitioner;
import org.apache.flink.api.common.operators.Ordering;
import org.apache.flink.api.common.operators.SemanticProperties;
import org.apache.flink.api.common.operators.SingleInputSemanticProperties;
import org.apache.flink.api.common.operators.base.GroupReduceOperatorBase;
import org.apache.flink.optimizer.CompilerException;
import org.apache.flink.optimizer.DataStatistics;
import org.apache.flink.optimizer.Optimizer;
import org.apache.flink.optimizer.operators.AllGroupReduceProperties;
import org.apache.flink.optimizer.operators.AllGroupWithPartialPreGroupProperties;
import org.apache.flink.optimizer.operators.GroupReduceProperties;
import org.apache.flink.optimizer.operators.GroupReduceWithCombineProperties;
import org.apache.flink.optimizer.operators.OperatorDescriptorSingle;
import org.apache.flink.api.common.operators.util.FieldSet;
import org.apache.flink.configuration.Configuration;
public class GroupReduceNode extends SingleInputNode {
  private final List<OperatorDescriptorSingle> possibleProperties;
  private final String operatorName;
  private GroupReduceNode combinerUtilityNode;
  public GroupReduceNode(  GroupReduceOperatorBase<?,?,?> operator){
    super(operator);
    this.operatorName="GroupReduce";
    if (this.keys == null) {
      setParallelism(1);
    }
    this.possibleProperties=initPossibleProperties(operator.getCustomPartitioner());
  }
  private GroupReduceNode(  GroupReduceNode reducerToCopyForCombiner){
    super(reducerToCopyForCombiner);
    this.operatorName="GroupCombine";
    this.possibleProperties=Collections.emptyList();
  }
  private List<OperatorDescriptorSingle> initPossibleProperties(  Partitioner<?> customPartitioner){
    final Configuration conf=getOperator().getParameters();
    final String localStrategy=conf.getString(Optimizer.HINT_LOCAL_STRATEGY,null);
    final boolean useCombiner;
    if (localStrategy != null) {
      if (Optimizer.HINT_LOCAL_STRATEGY_SORT.equals(localStrategy)) {
        useCombiner=false;
      }
 else       if (Optimizer.HINT_LOCAL_STRATEGY_COMBINING_SORT.equals(localStrategy)) {
        if (!isCombineable()) {
          Optimizer.LOG.warn("Strategy hint for GroupReduce '" + getOperator().getName() + "' requires combinable reduce, but user function is not marked combinable.");
        }
        useCombiner=true;
      }
 else {
        throw new CompilerException("Invalid local strategy hint for match contract: " + localStrategy);
      }
    }
 else {
      useCombiner=isCombineable();
    }
    Ordering groupOrder=null;
    if (getOperator() instanceof GroupReduceOperatorBase) {
      groupOrder=getOperator().getGroupOrder();
      if (groupOrder != null && groupOrder.getNumberOfFields() == 0) {
        groupOrder=null;
      }
    }
    OperatorDescriptorSingle props=useCombiner ? (this.keys == null ? new AllGroupWithPartialPreGroupProperties() : new GroupReduceWithCombineProperties(this.keys,groupOrder,customPartitioner)) : (this.keys == null ? new AllGroupReduceProperties() : new GroupReduceProperties(this.keys,groupOrder,customPartitioner));
    return Collections.singletonList(props);
  }
  @Override public GroupReduceOperatorBase<?,?,?> getOperator(){
    return (GroupReduceOperatorBase<?,?,?>)super.getOperator();
  }
  public boolean isCombineable(){
    return getOperator().isCombinable();
  }
  @Override public String getOperatorName(){
    return this.operatorName;
  }
  @Override protected List<OperatorDescriptorSingle> getPossibleProperties(){
    return this.possibleProperties;
  }
  @Override protected SemanticProperties getSemanticPropertiesForLocalPropertyFiltering(){
    SingleInputSemanticProperties origProps=getOperator().getSemanticProperties();
    SingleInputSemanticProperties filteredProps=new SingleInputSemanticProperties();
    FieldSet readSet=origProps.getReadFields(0);
    if (readSet != null) {
      filteredProps.addReadFields(readSet);
    }
    if (this.keys != null) {
      for (      int f : this.keys) {
        FieldSet targets=origProps.getForwardingTargetFields(0,f);
        for (        int t : targets) {
          filteredProps.addForwardedField(f,t);
        }
      }
    }
    return filteredProps;
  }
  @Override protected void computeOperatorSpecificDefaultEstimates(  DataStatistics statistics){
  }
  public GroupReduceNode getCombinerUtilityNode(){
    if (this.combinerUtilityNode == null) {
      this.combinerUtilityNode=new GroupReduceNode(this);
      this.combinerUtilityNode.estimatedOutputSize=getPredecessorNode().getEstimatedOutputSize();
      this.combinerUtilityNode.estimatedNumRecords=getPredecessorNode().getEstimatedNumRecords();
    }
    return this.combinerUtilityNode;
  }
}
