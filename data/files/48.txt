package one.util.streamex;
import java.util.concurrent.ForkJoinPool;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.BaseStream;
import one.util.streamex.StreamExInternals.*;
class StreamContext {
  static final StreamContext SEQUENTIAL=new StreamContext(false);
  static final StreamContext PARALLEL=new StreamContext(true);
  boolean parallel;
  ForkJoinPool fjp;
  Runnable closeHandler;
  private StreamContext(  boolean parallel){
    this.parallel=parallel;
  }
  <T>T terminate(  Supplier<T> terminalOperation){
    return fjp.submit(null).join();
  }
  <T,U>T terminate(  U value,  Function<U,T> terminalOperation){
    return fjp.submit(null).join();
  }
  StreamContext parallel(){
    if (this == SEQUENTIAL)     return PARALLEL;
    this.parallel=true;
    this.fjp=null;
    return this;
  }
  StreamContext sequential(){
    if (this == PARALLEL)     return SEQUENTIAL;
    this.parallel=false;
    this.fjp=null;
    return this;
  }
  StreamContext parallel(  ForkJoinPool fjp){
    StreamContext context=detach();
    context.parallel=true;
    context.fjp=fjp;
    return context;
  }
  StreamContext detach(){
    if (this == PARALLEL || this == SEQUENTIAL)     return new StreamContext(parallel);
    return this;
  }
  StreamContext onClose(  Runnable r){
    StreamContext context=detach();
    if (context.closeHandler == null)     context.closeHandler=r;
 else     context.closeHandler=compose(context.closeHandler,r);
    return context;
  }
  void close(){
    if (closeHandler != null) {
      Runnable r=closeHandler;
      closeHandler=null;
      r.run();
    }
  }
  private static Runnable compose(  Runnable r1,  Runnable r2){
    return null;
  }
  StreamContext combine(  BaseStream<?,?> other){
    if (other == null)     return this;
    StreamContext otherStrategy=of(other);
    StreamContext result=this;
    if (other.isParallel() && !parallel)     result=parallel();
    if (otherStrategy.closeHandler != null)     result=result.onClose(otherStrategy.closeHandler);
    return result;
  }
  static StreamContext of(  BaseStream<?,?> stream){
    if (stream instanceof BaseStreamEx)     return ((BaseStreamEx<?,?,?>)stream).context;
    if (mustCloseStream(stream))     return new StreamContext(stream.isParallel()).onClose(null);
    return stream.isParallel() ? PARALLEL : SEQUENTIAL;
  }
}
