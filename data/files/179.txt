package com.sun.tools.jdeps;
import java.io.File;
import java.io.IOException;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.*;
class PlatformClassPath {
  private final static List<Archive> javaHomeArchives=init();
  static List<Archive> getArchives(){
    return javaHomeArchives;
  }
  static boolean contains(  Archive archive){
    return javaHomeArchives.contains(archive);
  }
  private static List<Archive> init(){
    List<Archive> result=new ArrayList<Archive>();
    String javaHome=System.getProperty("java.home");
    List<File> files=new ArrayList<File>();
    File jre=new File(javaHome,"jre");
    File lib=new File(javaHome,"lib");
    try {
      if (jre.exists() && jre.isDirectory()) {
        result.addAll(addJarFiles(new File(jre,"lib")));
        result.addAll(addJarFiles(lib));
      }
 else       if (lib.exists() && lib.isDirectory()) {
        File classes=new File(javaHome,"classes");
        if (classes.exists() && classes.isDirectory()) {
          result.add(new Archive(classes,ClassFileReader.newInstance(classes)));
        }
        result.addAll(addJarFiles(lib));
      }
 else {
        throw new RuntimeException("\"" + javaHome + "\" not a JDK home");
      }
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    return result;
  }
  private static List<Archive> addJarFiles(  File f) throws IOException {
    final List<Archive> result=new ArrayList<Archive>();
    final Path root=f.toPath();
    final Path ext=root.resolve("ext");
    Files.walkFileTree(root,new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult preVisitDirectory(      Path dir,      BasicFileAttributes attrs) throws IOException {
        if (dir.equals(root) || dir.equals(ext)) {
          return FileVisitResult.CONTINUE;
        }
 else {
          return FileVisitResult.SKIP_SUBTREE;
        }
      }
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        File f=file.toFile();
        String fn=f.getName();
        if (fn.endsWith(".jar") && !fn.equals("alt-rt.jar")) {
          result.add(new Archive(f,ClassFileReader.newInstance(f)));
        }
        return FileVisitResult.CONTINUE;
      }
    }
);
    return result;
  }
}
