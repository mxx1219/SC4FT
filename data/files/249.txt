package org.apache.catalina.core;
import java.io.IOException;
import java.security.AccessController;
import java.security.PrivilegedAction;
import javax.servlet.DispatcherType;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletResponse;
import org.apache.catalina.Context;
import org.apache.catalina.Globals;
import org.apache.catalina.Wrapper;
import org.apache.catalina.comet.CometEvent;
import org.apache.catalina.connector.ClientAbortException;
import org.apache.catalina.connector.Request;
import org.apache.catalina.connector.Response;
import org.apache.catalina.deploy.ErrorPage;
import org.apache.catalina.valves.ValveBase;
import org.apache.juli.logging.Log;
import org.apache.juli.logging.LogFactory;
import org.apache.tomcat.util.ExceptionUtils;
import org.apache.tomcat.util.res.StringManager;
final class StandardHostValve extends ValveBase {
  private static final Log log=LogFactory.getLog(StandardHostValve.class);
  protected static final boolean STRICT_SERVLET_COMPLIANCE;
  protected static final boolean ACCESS_SESSION;
static {
    STRICT_SERVLET_COMPLIANCE=Globals.STRICT_SERVLET_COMPLIANCE;
    String accessSession=System.getProperty("org.apache.catalina.core.StandardHostValve.ACCESS_SESSION");
    if (accessSession == null) {
      ACCESS_SESSION=STRICT_SERVLET_COMPLIANCE;
    }
 else {
      ACCESS_SESSION=Boolean.valueOf(accessSession).booleanValue();
    }
  }
  public StandardHostValve(){
    super(true);
  }
  private static final StringManager sm=StringManager.getManager(Constants.Package);
  @Override public final void invoke(  Request request,  Response response) throws IOException, ServletException {
    Context context=request.getContext();
    if (context == null) {
      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,sm.getString("standardHost.noContext"));
      return;
    }
    if (context.getLoader() != null) {
      if (Globals.IS_SECURITY_ENABLED) {
        PrivilegedAction<Void> pa=new PrivilegedSetTccl(context.getLoader().getClassLoader());
        AccessController.doPrivileged(pa);
      }
 else {
        Thread.currentThread().setContextClassLoader(context.getLoader().getClassLoader());
      }
    }
    if (request.isAsyncSupported()) {
      request.setAsyncSupported(context.getPipeline().isAsyncSupported());
    }
    boolean asyncAtStart=request.isAsync();
    if (asyncAtStart || context.fireRequestInitEvent(request)) {
      try {
        context.getPipeline().getFirst().invoke(request,response);
      }
 catch (      Throwable t) {
        ExceptionUtils.handleThrowable(t);
        request.setAttribute(RequestDispatcher.ERROR_EXCEPTION,t);
        throwable(request,response,t);
      }
      if (!(request.isAsync() || (asyncAtStart && request.getAttribute(RequestDispatcher.ERROR_EXCEPTION) != null))) {
        if (context.getState().isAvailable()) {
          response.setSuspended(false);
          Throwable t=(Throwable)request.getAttribute(RequestDispatcher.ERROR_EXCEPTION);
          if (t != null) {
            throwable(request,response,t);
          }
 else {
            status(request,response);
          }
          context.fireRequestDestroyEvent(request);
        }
      }
    }
    if (ACCESS_SESSION) {
      request.getSession(false);
    }
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(StandardHostValve.class.getClassLoader());
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(StandardHostValve.class.getClassLoader());
    }
  }
  @Override public final void event(  Request request,  Response response,  CometEvent event) throws IOException, ServletException {
    Context context=request.getContext();
    if (context.getLoader() != null) {
      Thread.currentThread().setContextClassLoader(context.getLoader().getClassLoader());
    }
    context.getPipeline().getFirst().event(request,response,event);
    response.setSuspended(false);
    Throwable t=(Throwable)request.getAttribute(RequestDispatcher.ERROR_EXCEPTION);
    if (t != null) {
      throwable(request,response,t);
    }
 else {
      status(request,response);
    }
    if (ACCESS_SESSION) {
      request.getSession(false);
    }
    Thread.currentThread().setContextClassLoader(StandardHostValve.class.getClassLoader());
  }
  private void status(  Request request,  Response response){
    int statusCode=response.getStatus();
    Context context=request.getContext();
    if (context == null) {
      return;
    }
    if (!response.isError()) {
      return;
    }
    ErrorPage errorPage=context.findErrorPage(statusCode);
    if (errorPage != null) {
      response.setAppCommitted(false);
      request.setAttribute(RequestDispatcher.ERROR_STATUS_CODE,Integer.valueOf(statusCode));
      String message=response.getMessage();
      if (message == null) {
        message="";
      }
      request.setAttribute(RequestDispatcher.ERROR_MESSAGE,message);
      request.setAttribute(ApplicationFilterFactory.DISPATCHER_REQUEST_PATH_ATTR,errorPage.getLocation());
      request.setAttribute(ApplicationFilterFactory.DISPATCHER_TYPE_ATTR,DispatcherType.ERROR);
      Wrapper wrapper=request.getWrapper();
      if (wrapper != null) {
        request.setAttribute(RequestDispatcher.ERROR_SERVLET_NAME,wrapper.getName());
      }
      request.setAttribute(RequestDispatcher.ERROR_REQUEST_URI,request.getRequestURI());
      if (custom(request,response,errorPage)) {
        try {
          response.flushBuffer();
        }
 catch (        ClientAbortException e) {
        }
catch (        IOException e) {
          container.getLogger().warn("Exception Processing " + errorPage,e);
        }
      }
    }
  }
  private void throwable(  Request request,  Response response,  Throwable throwable){
    Context context=request.getContext();
    if (context == null) {
      return;
    }
    Throwable realError=throwable;
    if (realError instanceof ServletException) {
      realError=((ServletException)realError).getRootCause();
      if (realError == null) {
        realError=throwable;
      }
    }
    if (realError instanceof ClientAbortException) {
      if (log.isDebugEnabled()) {
        log.debug(sm.getString("standardHost.clientAbort",realError.getCause().getMessage()));
      }
      return;
    }
    ErrorPage errorPage=findErrorPage(context,throwable);
    if ((errorPage == null) && (realError != throwable)) {
      errorPage=findErrorPage(context,realError);
    }
    if (errorPage != null) {
      response.setAppCommitted(false);
      request.setAttribute(ApplicationFilterFactory.DISPATCHER_REQUEST_PATH_ATTR,errorPage.getLocation());
      request.setAttribute(ApplicationFilterFactory.DISPATCHER_TYPE_ATTR,DispatcherType.ERROR);
      request.setAttribute(RequestDispatcher.ERROR_STATUS_CODE,new Integer(HttpServletResponse.SC_INTERNAL_SERVER_ERROR));
      request.setAttribute(RequestDispatcher.ERROR_MESSAGE,throwable.getMessage());
      request.setAttribute(RequestDispatcher.ERROR_EXCEPTION,realError);
      Wrapper wrapper=request.getWrapper();
      if (wrapper != null) {
        request.setAttribute(RequestDispatcher.ERROR_SERVLET_NAME,wrapper.getName());
      }
      request.setAttribute(RequestDispatcher.ERROR_REQUEST_URI,request.getRequestURI());
      request.setAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE,realError.getClass());
      if (custom(request,response,errorPage)) {
        try {
          response.flushBuffer();
        }
 catch (        IOException e) {
          container.getLogger().warn("Exception Processing " + errorPage,e);
        }
      }
    }
 else {
      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
      response.setError();
      status(request,response);
    }
  }
  private boolean custom(  Request request,  Response response,  ErrorPage errorPage){
    if (container.getLogger().isDebugEnabled()) {
      container.getLogger().debug("Processing " + errorPage);
    }
    try {
      ServletContext servletContext=request.getContext().getServletContext();
      RequestDispatcher rd=servletContext.getRequestDispatcher(errorPage.getLocation());
      if (response.isCommitted()) {
        rd.include(request.getRequest(),response.getResponse());
      }
 else {
        response.resetBuffer(true);
        rd.forward(request.getRequest(),response.getResponse());
        response.setSuspended(false);
      }
      return (true);
    }
 catch (    Throwable t) {
      ExceptionUtils.handleThrowable(t);
      container.getLogger().error("Exception Processing " + errorPage,t);
      return (false);
    }
  }
  private static ErrorPage findErrorPage(  Context context,  Throwable exception){
    if (exception == null) {
      return (null);
    }
    Class<?> clazz=exception.getClass();
    String name=clazz.getName();
    while (!Object.class.equals(clazz)) {
      ErrorPage errorPage=context.findErrorPage(name);
      if (errorPage != null) {
        return (errorPage);
      }
      clazz=clazz.getSuperclass();
      if (clazz == null) {
        break;
      }
      name=clazz.getName();
    }
    return (null);
  }
private static class PrivilegedSetTccl implements PrivilegedAction<Void> {
    private final ClassLoader cl;
    PrivilegedSetTccl(    ClassLoader cl){
      this.cl=cl;
    }
    @Override public Void run(){
      Thread.currentThread().setContextClassLoader(cl);
      return null;
    }
  }
}
