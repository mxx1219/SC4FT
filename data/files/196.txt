package com.facebook.buck.testutil.integration;
import org.junit.Assert.assertEquals;
import org.junit.Assert.assertTrue;
import org.junit.Assert.fail;
import com.facebook.buck.cli.Main;
import com.facebook.buck.util.CapturingPrintStream;
import com.facebook.buck.util.MoreFiles;
import com.facebook.buck.util.MoreStrings;
import com.facebook.buck.util.environment.Platform;
import com.google.common.base.Charsets;
import com.google.common.base.Function;
import com.google.common.base.Preconditions;
import com.google.common.io.Files;
import org.junit.rules.TemporaryFolder;
import java.io.File;
import java.io.IOException;
import java.nio.file.FileVisitResult;
import java.nio.file.Path;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.StandardCopyOption;
import java.nio.file.attribute.BasicFileAttributes;
import javax.annotation.Nullable;
public class ProjectWorkspace {
  private static final String EXPECTED_SUFFIX=".expected";
  private static final Function<Path,Path> BUILD_FILE_RENAME=new Function<Path,Path>(){
    @Override @Nullable public Path apply(    Path path){
      String fileName=path.getFileName().toString();
      if (fileName.endsWith(EXPECTED_SUFFIX)) {
        return null;
      }
 else {
        return path;
      }
    }
  }
;
  private boolean isSetUp=false;
  private final Path templatePath;
  private final File destDir;
  private final Path destPath;
  public ProjectWorkspace(  File templateDir,  DebuggableTemporaryFolder temporaryFolder){
    Preconditions.checkNotNull(templateDir);
    Preconditions.checkNotNull(temporaryFolder);
    this.templatePath=templateDir.toPath();
    this.destDir=temporaryFolder.getRoot();
    this.destPath=destDir.toPath();
  }
  public void setUp() throws IOException {
    MoreFiles.copyRecursively(templatePath,destPath,BUILD_FILE_RENAME);
    if (Platform.detect() == Platform.WINDOWS) {
      SimpleFileVisitor<Path> copyDirVisitor=new SimpleFileVisitor<Path>(){
        @Override public FileVisitResult visitFile(        Path path,        BasicFileAttributes attrs) throws IOException {
          if (attrs.size() <= 4096) {
            File file=path.toFile();
            String linkTo=Files.toString(file,Charsets.UTF_8);
            File linkToFile=new File(templatePath.toFile(),linkTo);
            if (linkToFile.isFile()) {
              java.nio.file.Files.copy(linkToFile.toPath(),path,StandardCopyOption.REPLACE_EXISTING);
            }
 else             if (linkToFile.isDirectory()) {
              if (!file.delete()) {
                throw new IOException();
              }
              MoreFiles.copyRecursively(linkToFile.toPath(),path);
            }
          }
          return FileVisitResult.CONTINUE;
        }
      }
;
      java.nio.file.Files.walkFileTree(destPath,copyDirVisitor);
    }
    isSetUp=true;
  }
  public ProcessResult runBuckCommand(  String... args) throws IOException {
    assertTrue("setUp() must be run before this method is invoked",isSetUp);
    CapturingPrintStream stdout=new CapturingPrintStream();
    CapturingPrintStream stderr=new CapturingPrintStream();
    Main main=new Main(stdout,stderr);
    int exitCode=main.runMainWithExitCode(destDir,args);
    return new ProcessResult(exitCode,stdout.getContentsAsString(Charsets.UTF_8),stderr.getContentsAsString(Charsets.UTF_8));
  }
  public File getFile(  String pathRelativeToProjectRoot){
    return new File(destDir,pathRelativeToProjectRoot);
  }
  public String getFileContents(  String pathRelativeToProjectRoot) throws IOException {
    return Files.toString(getFile(pathRelativeToProjectRoot),Charsets.UTF_8);
  }
public static class ProcessResult {
    private final int exitCode;
    private final String stdout;
    private final String stderr;
    private ProcessResult(    int exitCode,    String stdout,    String stderr){
      this.exitCode=exitCode;
      this.stdout=Preconditions.checkNotNull(stdout);
      this.stderr=Preconditions.checkNotNull(stderr);
    }
    private int getExitCode(){
      return exitCode;
    }
    public String getStdout(){
      return stdout;
    }
    public String getStderr(){
      return stderr;
    }
    public void assertExitCode(    int exitCode){
      assertExitCode(null,exitCode);
    }
    public void assertExitCode(    @Nullable String message,    int exitCode){
      if (exitCode == getExitCode()) {
        return;
      }
      String failureMessage=String.format("Expected exit code %d but was %d.",exitCode,getExitCode());
      if (message != null) {
        failureMessage=message + " " + failureMessage;
      }
      System.err.println("=== " + failureMessage + " ===");
      System.err.println("=== STDERR ===");
      System.err.println(getStderr());
      System.err.println("=== STDOUT ===");
      System.err.println(getStdout());
      fail(failureMessage);
    }
  }
  public void verify() throws IOException {
    SimpleFileVisitor<Path> copyDirVisitor=new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        String fileName=file.getFileName().toString();
        if (fileName.endsWith(EXPECTED_SUFFIX)) {
          Path generatedFileWithSuffix=destPath.resolve(templatePath.relativize(file));
          File directory=generatedFileWithSuffix.getParent().toFile();
          File observedFile=new File(directory,Files.getNameWithoutExtension(fileName));
          if (!observedFile.isFile()) {
            fail("Expected file " + observedFile + " could not be found.");
          }
          String expectedFileContent=Files.toString(file.toFile(),Charsets.UTF_8);
          String observedFileContent=Files.toString(observedFile,Charsets.UTF_8);
          observedFileContent=observedFileContent.replace("\r\n","\n");
          String cleanPathToObservedFile=MoreStrings.withoutSuffix(templatePath.relativize(file).toString(),EXPECTED_SUFFIX);
          assertEquals(String.format("In %s, expected content of %s to match that of %s.",cleanPathToObservedFile,expectedFileContent,observedFileContent),expectedFileContent,observedFileContent);
        }
        return FileVisitResult.CONTINUE;
      }
    }
;
    java.nio.file.Files.walkFileTree(templatePath,copyDirVisitor);
  }
}
