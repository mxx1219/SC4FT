package com.jfoenix.controls;
import java.util.ArrayList;
import java.util.HashMap;
import javafx.animation.Animation.Status;
import javafx.animation.Interpolator;
import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.scene.Node;
import javafx.scene.control.Button;
import javafx.scene.layout.Region;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.util.Callback;
import javafx.util.Duration;
public class JFXNodesList extends VBox {
  HashMap<Node,Callback<Boolean,ArrayList<KeyValue>>> animationsMap=new HashMap<>();
  private boolean expanded=false;
  private Timeline animateTimeline=new Timeline();
  public JFXNodesList(){
    this.setPickOnBounds(false);
    this.getStyleClass().add("jfx-nodes-list");
  }
  public void addAnimatedNode(  Region node){
    addAnimatedNode(node,null);
  }
  public void addAnimatedNode(  Region node,  Callback<Boolean,ArrayList<KeyValue>> animationCallBack){
    if (node instanceof JFXNodesList) {
      StackPane container=new StackPane(node);
      container.setPickOnBounds(false);
      addAnimatedNode(container,animationCallBack);
      return;
    }
    node.setVisible(false);
    node.minWidthProperty().bind(node.prefWidthProperty());
    node.minHeightProperty().bind(node.prefHeightProperty());
    if (this.getChildren().size() > 0)     initNode(node);
 else {
      if (node instanceof Button)       ((Button)node).setOnAction(null);
 else       node.setOnMouseClicked(null);
      node.getStyleClass().add("trigger-node");
    }
    if (this.getChildren().size() == 0) {
      node.setVisible(true);
      this.minHeightProperty().bind(node.prefHeightProperty());
      this.maxHeightProperty().bind(node.prefHeightProperty());
      this.minWidthProperty().bind(node.prefWidthProperty());
      this.maxWidthProperty().bind(node.prefWidthProperty());
    }
    this.getChildren().add(node);
    this.rotateProperty().addListener(null);
    if (animationCallBack == null && this.getChildren().size() != 1)     animationCallBack=null;
 else     if (animationCallBack == null && this.getChildren().size() == 1)     animationCallBack=null;
    animationsMap.put(node,animationCallBack);
  }
  public void animateList(){
    expanded=!expanded;
    if (animateTimeline.getStatus().equals(Status.RUNNING))     animateTimeline.stop();
    animateTimeline.getKeyFrames().clear();
    double duration=120 / this.getChildren().size();
    if (expanded)     this.getChildren().forEach(null);
    for (int i=1; i < this.getChildren().size(); i++) {
      Node child=this.getChildren().get(i);
      ArrayList<KeyValue> keyValues=animationsMap.get(child).call(expanded);
      animateTimeline.getKeyFrames().add(new KeyFrame(Duration.millis(i * duration),keyValues.toArray(new KeyValue[keyValues.size()])));
    }
    ArrayList<KeyValue> keyValues=animationsMap.get(this.getChildren().get(0)).call(expanded);
    animateTimeline.getKeyFrames().add(new KeyFrame(Duration.millis(160),keyValues.toArray(new KeyValue[keyValues.size()])));
    if (!expanded) {
      animateTimeline.setOnFinished(null);
    }
 else {
      animateTimeline.setOnFinished(null);
    }
    animateTimeline.play();
  }
  protected void initNode(  Node node){
    node.setScaleX(0);
    node.setScaleY(0);
    node.getStyleClass().add("sub-node");
  }
  private ArrayList<KeyValue> initDefaultAnimation(  Region region,  boolean expanded){
    ArrayList<KeyValue> defaultAnimationValues=new ArrayList<>();
    defaultAnimationValues.add(new KeyValue(region.scaleXProperty(),expanded ? 1 : 0,Interpolator.EASE_BOTH));
    defaultAnimationValues.add(new KeyValue(region.scaleYProperty(),expanded ? 1 : 0,Interpolator.EASE_BOTH));
    return defaultAnimationValues;
  }
}
