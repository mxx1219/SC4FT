package io.bisq.gui.main.funds.transactions;
import com.googlecode.jcsv.writer.CSVEntryConverter;
import de.jensd.fx.fontawesome.AwesomeIcon;
import io.bisq.common.locale.Res;
import io.bisq.common.util.Tuple2;
import io.bisq.common.util.Tuple4;
import io.bisq.common.util.Utilities;
import io.bisq.core.arbitration.DisputeManager;
import io.bisq.core.btc.wallet.BsqWalletService;
import io.bisq.core.btc.wallet.BtcWalletService;
import io.bisq.core.offer.OpenOffer;
import io.bisq.core.offer.OpenOfferManager;
import io.bisq.core.trade.Tradable;
import io.bisq.core.trade.Trade;
import io.bisq.core.trade.TradeManager;
import io.bisq.core.trade.closed.ClosedTradableManager;
import io.bisq.core.trade.failed.FailedTradesManager;
import io.bisq.core.user.Preferences;
import io.bisq.gui.common.view.ActivatableView;
import io.bisq.gui.common.view.FxmlView;
import io.bisq.gui.components.AddressWithIconAndDirection;
import io.bisq.gui.components.HyperlinkWithIcon;
import io.bisq.gui.main.overlays.popups.Popup;
import io.bisq.gui.main.overlays.windows.OfferDetailsWindow;
import io.bisq.gui.main.overlays.windows.TradeDetailsWindow;
import io.bisq.gui.util.BSFormatter;
import io.bisq.gui.util.GUIUtil;
import javafx.beans.property.ReadOnlyObjectWrapper;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.SortedList;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyCodeCombination;
import javafx.scene.input.KeyCombination;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.util.Callback;
import org.bitcoinj.core.*;
import org.bitcoinj.script.Script;
import javax.annotation.Nullable;
import javax.inject.Inject;
import java.text.DateFormat;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;
@FxmlView public class TransactionsView extends ActivatableView<VBox,Void> {
  @FXML TableView<TransactionsListItem> tableView;
  @FXML TableColumn<TransactionsListItem,TransactionsListItem> dateColumn, detailsColumn, addressColumn, transactionColumn, amountColumn, confidenceColumn, revertTxColumn;
  @FXML Button exportButton;
  private final ObservableList<TransactionsListItem> observableList=FXCollections.observableArrayList();
  private final SortedList<TransactionsListItem> sortedList=new SortedList<>(observableList);
  private final BtcWalletService btcWalletService;
  private BsqWalletService bsqWalletService;
  private final TradeManager tradeManager;
  private final OpenOfferManager openOfferManager;
  private final ClosedTradableManager closedTradableManager;
  private final FailedTradesManager failedTradesManager;
  private final BSFormatter formatter;
  private final Preferences preferences;
  private final TradeDetailsWindow tradeDetailsWindow;
  private final DisputeManager disputeManager;
  private final Stage stage;
  private final OfferDetailsWindow offerDetailsWindow;
  private WalletEventListener walletEventListener;
  private EventHandler<KeyEvent> keyEventEventHandler;
  private Scene scene;
  @Inject private TransactionsView(  BtcWalletService btcWalletService,  BsqWalletService bsqWalletService,  TradeManager tradeManager,  OpenOfferManager openOfferManager,  ClosedTradableManager closedTradableManager,  FailedTradesManager failedTradesManager,  BSFormatter formatter,  Preferences preferences,  TradeDetailsWindow tradeDetailsWindow,  DisputeManager disputeManager,  Stage stage,  OfferDetailsWindow offerDetailsWindow){
    this.btcWalletService=btcWalletService;
    this.bsqWalletService=bsqWalletService;
    this.tradeManager=tradeManager;
    this.openOfferManager=openOfferManager;
    this.closedTradableManager=closedTradableManager;
    this.failedTradesManager=failedTradesManager;
    this.formatter=formatter;
    this.preferences=preferences;
    this.tradeDetailsWindow=tradeDetailsWindow;
    this.disputeManager=disputeManager;
    this.stage=stage;
    this.offerDetailsWindow=offerDetailsWindow;
  }
  @Override public void initialize(){
    dateColumn.setText(Res.get("shared.dateTime"));
    detailsColumn.setText(Res.get("shared.details"));
    addressColumn.setText(Res.get("shared.address"));
    transactionColumn.setText(Res.get("shared.txId","BTC"));
    amountColumn.setText(Res.get("shared.amountWithCur","BTC"));
    confidenceColumn.setText(Res.get("shared.confirmations","BTC"));
    revertTxColumn.setText(Res.get("shared.revert","BTC"));
    tableView.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
    tableView.setPlaceholder(new Label(Res.get("funds.tx.noTxAvailable")));
    setDateColumnCellFactory();
    setDetailsColumnCellFactory();
    setAddressColumnCellFactory();
    setTransactionColumnCellFactory();
    setAmountColumnCellFactory();
    setConfidenceColumnCellFactory();
    setRevertTxColumnCellFactory();
    dateColumn.setComparator(null);
    detailsColumn.setComparator(null);
    addressColumn.setComparator(null);
    transactionColumn.setComparator(null);
    amountColumn.setComparator(null);
    confidenceColumn.setComparator(null);
    dateColumn.setSortType(TableColumn.SortType.DESCENDING);
    tableView.getSortOrder().add(dateColumn);
    walletEventListener=new WalletEventListener(){
      @Override public void onCoinsReceived(      Wallet wallet,      Transaction tx,      Coin prevBalance,      Coin newBalance){
        updateList();
      }
      @Override public void onCoinsSent(      Wallet wallet,      Transaction tx,      Coin prevBalance,      Coin newBalance){
        updateList();
      }
      @Override public void onReorganize(      Wallet wallet){
        updateList();
      }
      @Override public void onTransactionConfidenceChanged(      Wallet wallet,      Transaction tx){
      }
      @Override public void onWalletChanged(      Wallet wallet){
        updateList();
      }
      @Override public void onScriptsChanged(      Wallet wallet,      List<Script> scripts,      boolean isAddingScripts){
        updateList();
      }
      @Override public void onKeysAdded(      List<ECKey> keys){
        updateList();
      }
    }
;
    keyEventEventHandler=null;
    exportButton.setText(Res.get("shared.exportCSV"));
  }
  @Override protected void activate(){
    sortedList.comparatorProperty().bind(tableView.comparatorProperty());
    tableView.setItems(sortedList);
    updateList();
    btcWalletService.addEventListener(walletEventListener);
    scene=root.getScene();
    if (scene != null)     scene.addEventHandler(KeyEvent.KEY_RELEASED,keyEventEventHandler);
    exportButton.setOnAction(null);
  }
  @Override protected void deactivate(){
    sortedList.comparatorProperty().unbind();
    observableList.forEach(null);
    btcWalletService.removeEventListener(walletEventListener);
    if (scene != null)     scene.removeEventHandler(KeyEvent.KEY_RELEASED,keyEventEventHandler);
    exportButton.setOnAction(null);
  }
  private void updateList(){
    Stream<Tradable> concat1=Stream.concat(openOfferManager.getOpenOffers().stream(),tradeManager.getTrades().stream());
    Stream<Tradable> concat2=Stream.concat(concat1,closedTradableManager.getClosedTrades().stream());
    Stream<Tradable> concat3=Stream.concat(concat2,failedTradesManager.getFailedTrades().stream());
    Set<Tradable> all=concat3.collect(Collectors.toSet());
    Set<Transaction> transactions=btcWalletService.getTransactions(true);
    List<TransactionsListItem> transactionsListItems=transactions.stream().map(null).collect(Collectors.toList());
    observableList.forEach(null);
    observableList.setAll(transactionsListItems);
  }
  private void openTxInBlockExplorer(  TransactionsListItem item){
    if (item.getTxId() != null)     GUIUtil.openWebPage(preferences.getBlockChainExplorer().txUrl + item.getTxId());
  }
  private void openAddressInBlockExplorer(  TransactionsListItem item){
    if (item.getAddressString() != null) {
      GUIUtil.openWebPage(preferences.getBlockChainExplorer().addressUrl + item.getAddressString());
    }
  }
  private void openDetailPopup(  TransactionsListItem item){
    if (item.getTradable() instanceof OpenOffer)     offerDetailsWindow.show(item.getTradable().getOffer());
 else     if (item.getTradable() instanceof Trade)     tradeDetailsWindow.show((Trade)item.getTradable());
  }
  private void setDateColumnCellFactory(){
    dateColumn.setCellValueFactory(null);
    dateColumn.setCellFactory(new Callback<TableColumn<TransactionsListItem,TransactionsListItem>,TableCell<TransactionsListItem,TransactionsListItem>>(){
      @Override public TableCell<TransactionsListItem,TransactionsListItem> call(      TableColumn<TransactionsListItem,TransactionsListItem> column){
        return new TableCell<TransactionsListItem,TransactionsListItem>(){
          @Override public void updateItem(          final TransactionsListItem item,          boolean empty){
            super.updateItem(item,empty);
            if (item != null && !empty) {
              setText(item.getDateString());
            }
 else {
              setText("");
            }
          }
        }
;
      }
    }
);
  }
  private void setDetailsColumnCellFactory(){
    detailsColumn.setCellValueFactory(null);
    detailsColumn.setCellFactory(new Callback<TableColumn<TransactionsListItem,TransactionsListItem>,TableCell<TransactionsListItem,TransactionsListItem>>(){
      @Override public TableCell<TransactionsListItem,TransactionsListItem> call(      TableColumn<TransactionsListItem,TransactionsListItem> column){
        return new TableCell<TransactionsListItem,TransactionsListItem>(){
          private HyperlinkWithIcon field;
          @Override public void updateItem(          final TransactionsListItem item,          boolean empty){
            super.updateItem(item,empty);
            if (item != null && !empty) {
              if (item.getDetailsAvailable()) {
                field=new HyperlinkWithIcon(item.getDetails(),AwesomeIcon.INFO_SIGN);
                field.setOnAction(null);
                field.setTooltip(new Tooltip(Res.get("tooltip.openPopupForDetails")));
                setGraphic(field);
              }
 else {
                setGraphic(new Label(item.getDetails()));
              }
            }
 else {
              setGraphic(null);
              if (field != null)               field.setOnAction(null);
            }
          }
        }
;
      }
    }
);
  }
  private void setAddressColumnCellFactory(){
    addressColumn.setCellValueFactory(null);
    addressColumn.setCellFactory(new Callback<TableColumn<TransactionsListItem,TransactionsListItem>,TableCell<TransactionsListItem,TransactionsListItem>>(){
      @Override public TableCell<TransactionsListItem,TransactionsListItem> call(      TableColumn<TransactionsListItem,TransactionsListItem> column){
        return new TableCell<TransactionsListItem,TransactionsListItem>(){
          private AddressWithIconAndDirection field;
          @Override public void updateItem(          final TransactionsListItem item,          boolean empty){
            super.updateItem(item,empty);
            if (item != null && !empty) {
              String addressString=item.getAddressString();
              field=new AddressWithIconAndDirection(item.getDirection(),addressString,AwesomeIcon.EXTERNAL_LINK,item.getReceived());
              field.setOnAction(null);
              field.setTooltip(new Tooltip(Res.get("tooltip.openBlockchainForAddress",addressString)));
              setGraphic(field);
            }
 else {
              setGraphic(null);
              if (field != null)               field.setOnAction(null);
            }
          }
        }
;
      }
    }
);
  }
  private void setTransactionColumnCellFactory(){
    transactionColumn.setCellValueFactory(null);
    transactionColumn.setCellFactory(new Callback<TableColumn<TransactionsListItem,TransactionsListItem>,TableCell<TransactionsListItem,TransactionsListItem>>(){
      @Override public TableCell<TransactionsListItem,TransactionsListItem> call(      TableColumn<TransactionsListItem,TransactionsListItem> column){
        return new TableCell<TransactionsListItem,TransactionsListItem>(){
          private HyperlinkWithIcon hyperlinkWithIcon;
          @Override public void updateItem(          final TransactionsListItem item,          boolean empty){
            super.updateItem(item,empty);
            if (item != null && !empty) {
              String transactionId=item.getTxId();
              hyperlinkWithIcon=new HyperlinkWithIcon(transactionId,AwesomeIcon.EXTERNAL_LINK);
              hyperlinkWithIcon.setOnAction(null);
              hyperlinkWithIcon.setTooltip(new Tooltip(Res.get("tooltip.openBlockchainForTx",transactionId)));
              setGraphic(hyperlinkWithIcon);
            }
 else {
              setGraphic(null);
              if (hyperlinkWithIcon != null)               hyperlinkWithIcon.setOnAction(null);
            }
          }
        }
;
      }
    }
);
  }
  private void setAmountColumnCellFactory(){
    amountColumn.setCellValueFactory(null);
    amountColumn.setCellFactory(new Callback<TableColumn<TransactionsListItem,TransactionsListItem>,TableCell<TransactionsListItem,TransactionsListItem>>(){
      @Override public TableCell<TransactionsListItem,TransactionsListItem> call(      TableColumn<TransactionsListItem,TransactionsListItem> column){
        return new TableCell<TransactionsListItem,TransactionsListItem>(){
          @Override public void updateItem(          final TransactionsListItem item,          boolean empty){
            super.updateItem(item,empty);
            if (item != null && !empty) {
              setText(item.getAmount());
            }
 else {
              setText("");
            }
          }
        }
;
      }
    }
);
  }
  private void setConfidenceColumnCellFactory(){
    confidenceColumn.setCellValueFactory(null);
    confidenceColumn.setCellFactory(new Callback<TableColumn<TransactionsListItem,TransactionsListItem>,TableCell<TransactionsListItem,TransactionsListItem>>(){
      @Override public TableCell<TransactionsListItem,TransactionsListItem> call(      TableColumn<TransactionsListItem,TransactionsListItem> column){
        return new TableCell<TransactionsListItem,TransactionsListItem>(){
          @Override public void updateItem(          final TransactionsListItem item,          boolean empty){
            super.updateItem(item,empty);
            if (item != null && !empty) {
              setGraphic(item.getTxConfidenceIndicator());
            }
 else {
              setGraphic(null);
            }
          }
        }
;
      }
    }
);
  }
  private void setRevertTxColumnCellFactory(){
    revertTxColumn.setCellValueFactory(null);
    revertTxColumn.setCellFactory(new Callback<TableColumn<TransactionsListItem,TransactionsListItem>,TableCell<TransactionsListItem,TransactionsListItem>>(){
      @Override public TableCell<TransactionsListItem,TransactionsListItem> call(      TableColumn<TransactionsListItem,TransactionsListItem> column){
        return new TableCell<TransactionsListItem,TransactionsListItem>(){
          Button button;
          @Override public void updateItem(          final TransactionsListItem item,          boolean empty){
            super.updateItem(item,empty);
            if (item != null && !empty) {
              TransactionConfidence confidence=btcWalletService.getConfidenceForTxId(item.getTxId());
              if (confidence != null) {
                if (confidence.getConfidenceType() == TransactionConfidence.ConfidenceType.PENDING) {
                  if (button == null) {
                    button=new Button(Res.get("funds.tx.revert"));
                    setGraphic(button);
                  }
                  button.setOnAction(null);
                }
 else {
                  setGraphic(null);
                  if (button != null) {
                    button.setOnAction(null);
                    button=null;
                  }
                }
              }
            }
 else {
              setGraphic(null);
              if (button != null) {
                button.setOnAction(null);
                button=null;
              }
            }
          }
        }
;
      }
    }
);
  }
  private void revertTransaction(  String txId,  @Nullable Tradable tradable){
    try {
      btcWalletService.doubleSpendTransaction(txId,null,null);
    }
 catch (    Throwable e) {
      new Popup().warning(e.getMessage()).show();
    }
  }
  private void showStatisticsPopup(){
  }
}
