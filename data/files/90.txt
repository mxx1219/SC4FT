package im.vector.adapters;
import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Point;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.os.Handler;
import android.os.Looper;
import android.support.annotation.Nullable;
import android.support.v4.content.ContextCompat;
import android.text.Html;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.SpannableStringBuilder;
import android.text.TextUtils;
import android.text.format.DateUtils;
import android.text.method.LinkMovementMethod;
import android.text.style.BackgroundColorSpan;
import android.text.style.ClickableSpan;
import android.text.style.ForegroundColorSpan;
import android.text.style.QuoteSpan;
import android.text.style.StyleSpan;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupMenu;
import android.widget.TextView;
import com.binaryfork.spanny.Spanny;
import org.matrix.androidsdk.MXPatterns;
import org.matrix.androidsdk.MXSession;
import org.matrix.androidsdk.adapters.AbstractMessagesAdapter;
import org.matrix.androidsdk.adapters.MessageRow;
import org.matrix.androidsdk.crypto.MXCryptoError;
import org.matrix.androidsdk.crypto.data.MXDeviceInfo;
import org.matrix.androidsdk.data.Room;
import org.matrix.androidsdk.data.RoomState;
import org.matrix.androidsdk.db.MXMediasCache;
import org.matrix.androidsdk.interfaces.HtmlToolbox;
import org.matrix.androidsdk.rest.model.Event;
import org.matrix.androidsdk.rest.model.EventContent;
import org.matrix.androidsdk.rest.model.PowerLevels;
import org.matrix.androidsdk.rest.model.RoomCreateContent;
import org.matrix.androidsdk.rest.model.RoomMember;
import org.matrix.androidsdk.rest.model.crypto.EncryptedEventContent;
import org.matrix.androidsdk.rest.model.message.FileMessage;
import org.matrix.androidsdk.rest.model.message.ImageMessage;
import org.matrix.androidsdk.rest.model.message.Message;
import org.matrix.androidsdk.rest.model.message.StickerMessage;
import org.matrix.androidsdk.util.EventDisplay;
import org.matrix.androidsdk.util.JsonUtils;
import org.matrix.androidsdk.util.Log;
import org.matrix.androidsdk.util.PermalinkUtils;
import org.matrix.androidsdk.view.HtmlTagHandler;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Formatter;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import im.vector.R;
import im.vector.VectorApp;
import im.vector.extensions.MatrixSdkExtensionsKt;
import im.vector.listeners.IMessagesAdapterActionsListener;
import im.vector.ui.VectorQuoteSpan;
import im.vector.util.EventGroup;
import im.vector.util.MatrixLinkMovementMethod;
import im.vector.util.MatrixURLSpan;
import im.vector.util.PreferencesManager;
import im.vector.util.RiotEventDisplay;
import im.vector.util.ThemeUtils;
import im.vector.util.VectorImageGetter;
import im.vector.widgets.WidgetsManager;
public class VectorMessagesAdapter extends AbstractMessagesAdapter {
  private static final String LOG_TAG=VectorMessagesAdapter.class.getSimpleName();
  private Event mSelectedEvent;
  IMessagesAdapterActionsListener mVectorMessagesAdapterEventsListener=null;
  private Date mReferenceDate=new Date();
  private List<Date> mMessagesDateList=new ArrayList<>();
  private String mSearchedEventId=null;
  private String mHighlightedEventId=null;
  private final Map<String,String> mEventFormattedTsMap=new HashMap<>();
  private Map<String,Object> mE2eIconByEventId=new HashMap<>();
  private Map<String,MXDeviceInfo> mE2eDeviceByEventId=new HashMap<>();
  public boolean mIsRoomEncrypted;
  private Set<String> mSessionIdsWaitingForE2eReRequest=new HashSet<>();
  static final int ROW_TYPE_TEXT=0;
  static final int ROW_TYPE_IMAGE=1;
  static final int ROW_TYPE_NOTICE=2;
  static final int ROW_TYPE_EMOTE=3;
  static final int ROW_TYPE_FILE=4;
  static final int ROW_TYPE_VIDEO=5;
  static final int ROW_TYPE_MERGE=6;
  static final int ROW_TYPE_HIDDEN=7;
  static final int ROW_TYPE_ROOM_MEMBER=8;
  static final int ROW_TYPE_EMOJI=9;
  static final int ROW_TYPE_CODE=10;
  static final int ROW_TYPE_STICKER=11;
  static final int ROW_TYPE_VERSIONED_ROOM=12;
  static final int NUM_ROW_TYPES=13;
  final Context mContext;
  private final Map<Integer,Integer> mRowTypeToLayoutId=new HashMap<>();
  final LayoutInflater mLayoutInflater;
  private final Map<String,MessageRow> mEventRowMap=new HashMap<>();
  private final Map<String,Integer> mEventType=new HashMap<>();
  private final int mDefaultMessageTextColor;
  private final int mNotSentMessageTextColor;
  private final int mSendingMessageTextColor;
  private final int mEncryptingMessageTextColor;
  private final int mHighlightMessageTextColor;
  protected BackgroundColorSpan mBackgroundColorSpan;
  private final int mMaxImageWidth;
  private final int mMaxImageHeight;
  private final MXMediasCache mMediasCache;
  final MXSession mSession;
  private boolean mIsSearchMode=false;
  private boolean mIsPreviewMode=false;
  private boolean mIsUnreadViewMode=false;
  private String mPattern=null;
  private List<MessageRow> mLiveMessagesRowList=null;
  private String mReadReceiptEventId;
  private MatrixLinkMovementMethod mLinkMovementMethod;
  private final VectorMessagesAdapterMediasHelper mMediasHelper;
  final protected VectorMessagesAdapterHelper mHelper;
  private final Set<String> mHiddenEventIds=new HashSet<>();
  private final Locale mLocale;
  private final boolean mAlwaysShowTimeStamps;
  private final boolean mHideReadReceipts;
  private final Map<String,RoomMember> mLiveRoomMembers=new HashMap<>();
  private static final Pattern mEmojisPattern=Pattern.compile("((?:[\uD83C\uDF00-\uD83D\uDDFF]" + "|[\uD83E\uDD00-\uD83E\uDDFF]" + "|[\uD83D\uDE00-\uD83D\uDE4F]"+ "|[\uD83D\uDE80-\uD83D\uDEFF]"+ "|[\u2600-\u26FF]\uFE0F?"+ "|[\u2700-\u27BF]\uFE0F?"+ "|\u24C2\uFE0F?"+ "|[\uD83C\uDDE6-\uD83C\uDDFF]{1,2}"+ "|[\uD83C\uDD70\uD83C\uDD71\uD83C\uDD7E\uD83C\uDD7F\uD83C\uDD8E\uD83C\uDD91-\uD83C\uDD9A]\uFE0F?"+ "|[\u0023\u002A\u0030-\u0039]\uFE0F?\u20E3"+ "|[\u2194-\u2199\u21A9-\u21AA]\uFE0F?"+ "|[\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55]\uFE0F?"+ "|[\u2934\u2935]\uFE0F?"+ "|[\u3030\u303D]\uFE0F?"+ "|[\u3297\u3299]\uFE0F?"+ "|[\uD83C\uDE01\uD83C\uDE02\uD83C\uDE1A\uD83C\uDE2F\uD83C\uDE32-\uD83C\uDE3A\uD83C\uDE50\uD83C\uDE51]\uFE0F?"+ "|[\u203C\u2049]\uFE0F?"+ "|[\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE]\uFE0F?"+ "|[\u00A9\u00AE]\uFE0F?"+ "|[\u2122\u2139]\uFE0F?"+ "|\uD83C\uDC04\uFE0F?"+ "|\uD83C\uDCCF\uFE0F?"+ "|[\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA]\uFE0F?))");
  private final Drawable mPadlockDrawable;
  private VectorImageGetter mImageGetter;
  private HtmlToolbox mHtmlToolbox=new HtmlToolbox(){
    @Override public String convert(    String html){
      String sanitised=mHelper.getSanitisedHtml(html);
      if (sanitised != null) {
        return sanitised;
      }
      return html;
    }
    @Nullable @Override public Html.ImageGetter getImageGetter(){
      return mImageGetter;
    }
    @Nullable @Override public Html.TagHandler getTagHandler(    String html){
      boolean isCustomizable=!html.contains("<a href=") && !html.contains("<table>");
      if (isCustomizable) {
        final HtmlTagHandler htmlTagHandler=new HtmlTagHandler();
        htmlTagHandler.mContext=mContext;
        htmlTagHandler.setCodeBlockBackgroundColor(ThemeUtils.INSTANCE.getColor(mContext,R.attr.markdown_block_background_color));
        return htmlTagHandler;
      }
      return null;
    }
  }
;
  public VectorMessagesAdapter(  MXSession session,  Context context,  MXMediasCache mediasCache){
    this(session,context,R.layout.adapter_item_vector_message_text_emote_notice,R.layout.adapter_item_vector_message_image_video,R.layout.adapter_item_vector_message_text_emote_notice,R.layout.adapter_item_vector_message_room_member,R.layout.adapter_item_vector_message_text_emote_notice,R.layout.adapter_item_vector_message_file,R.layout.adapter_item_vector_message_merge,R.layout.adapter_item_vector_message_image_video,R.layout.adapter_item_vector_message_emoji,R.layout.adapter_item_vector_message_code,R.layout.adapter_item_vector_message_image_video,R.layout.adapter_item_vector_hidden_message,R.layout.adapter_item_vector_message_room_versioned,mediasCache);
  }
  VectorMessagesAdapter(  MXSession session,  Context context,  int textResLayoutId,  int imageResLayoutId,  int noticeResLayoutId,  int roomMemberResLayoutId,  int emoteRestLayoutId,  int fileResLayoutId,  int mergeResLayoutId,  int videoResLayoutId,  int emojiResLayoutId,  int codeResLayoutId,  int stickerResLayoutId,  int hiddenResLayoutId,  int roomVersionedResLayoutId,  MXMediasCache mediasCache){
    super(context,0);
    mContext=context;
    mRowTypeToLayoutId.put(ROW_TYPE_TEXT,textResLayoutId);
    mRowTypeToLayoutId.put(ROW_TYPE_IMAGE,imageResLayoutId);
    mRowTypeToLayoutId.put(ROW_TYPE_NOTICE,noticeResLayoutId);
    mRowTypeToLayoutId.put(ROW_TYPE_ROOM_MEMBER,roomMemberResLayoutId);
    mRowTypeToLayoutId.put(ROW_TYPE_EMOTE,emoteRestLayoutId);
    mRowTypeToLayoutId.put(ROW_TYPE_FILE,fileResLayoutId);
    mRowTypeToLayoutId.put(ROW_TYPE_MERGE,mergeResLayoutId);
    mRowTypeToLayoutId.put(ROW_TYPE_VIDEO,videoResLayoutId);
    mRowTypeToLayoutId.put(ROW_TYPE_EMOJI,emojiResLayoutId);
    mRowTypeToLayoutId.put(ROW_TYPE_CODE,codeResLayoutId);
    mRowTypeToLayoutId.put(ROW_TYPE_STICKER,stickerResLayoutId);
    mRowTypeToLayoutId.put(ROW_TYPE_HIDDEN,hiddenResLayoutId);
    mRowTypeToLayoutId.put(ROW_TYPE_VERSIONED_ROOM,roomVersionedResLayoutId);
    mMediasCache=mediasCache;
    mLayoutInflater=LayoutInflater.from(mContext);
    setNotifyOnChange(false);
    mDefaultMessageTextColor=getDefaultMessageTextColor();
    mNotSentMessageTextColor=getNotSentMessageTextColor();
    mSendingMessageTextColor=getSendingMessageTextColor();
    mEncryptingMessageTextColor=getEncryptingMessageTextColor();
    mHighlightMessageTextColor=getHighlightMessageTextColor();
    mBackgroundColorSpan=new BackgroundColorSpan(getSearchHighlightMessageTextColor());
    Point size=new Point(0,0);
    getScreenSize(size);
    int screenWidth=size.x;
    int screenHeight=size.y;
    if (screenWidth < screenHeight) {
      mMaxImageWidth=Math.round(screenWidth * 0.6f);
      mMaxImageHeight=Math.round(screenHeight * 0.4f);
    }
 else {
      mMaxImageWidth=Math.round(screenWidth * 0.4f);
      mMaxImageHeight=Math.round(screenHeight * 0.6f);
    }
    mSession=session;
    mMediasHelper=new VectorMessagesAdapterMediasHelper(context,mSession,mMaxImageWidth,mMaxImageHeight,mNotSentMessageTextColor,mDefaultMessageTextColor);
    mHelper=new VectorMessagesAdapterHelper(context,mSession,this);
    mLocale=VectorApp.getApplicationLocale();
    mAlwaysShowTimeStamps=PreferencesManager.alwaysShowTimeStamps(VectorApp.getInstance());
    mHideReadReceipts=PreferencesManager.hideReadReceipts(VectorApp.getInstance());
    mPadlockDrawable=ThemeUtils.INSTANCE.tintDrawable(mContext,ContextCompat.getDrawable(mContext,R.drawable.e2e_unencrypted),R.attr.settings_icon_tint_color);
  }
  @SuppressLint("NewApi") @SuppressWarnings("deprecation") private void getScreenSize(  Point size){
    WindowManager wm=(WindowManager)getContext().getSystemService(Context.WINDOW_SERVICE);
    wm.getDefaultDisplay().getSize(size);
  }
  public int getMaxThumbnailWidth(){
    return mMaxImageWidth;
  }
  public int getMaxThumbnailHeight(){
    return mMaxImageHeight;
  }
  private int getDefaultMessageTextColor(){
    return ThemeUtils.INSTANCE.getColor(mContext,R.attr.message_text_color);
  }
  private int getNoticeTextColor(){
    return ThemeUtils.INSTANCE.getColor(mContext,R.attr.notice_text_color);
  }
  private int getEncryptingMessageTextColor(){
    return ThemeUtils.INSTANCE.getColor(mContext,R.attr.encrypting_message_text_color);
  }
  private int getSendingMessageTextColor(){
    return ThemeUtils.INSTANCE.getColor(mContext,R.attr.sending_message_text_color);
  }
  private int getHighlightMessageTextColor(){
    return ThemeUtils.INSTANCE.getColor(mContext,R.attr.highlighted_message_text_color);
  }
  private int getSearchHighlightMessageTextColor(){
    return ThemeUtils.INSTANCE.getColor(mContext,R.attr.highlighted_searched_message_text_color);
  }
  private int getNotSentMessageTextColor(){
    return ThemeUtils.INSTANCE.getColor(mContext,R.attr.unsent_message_text_color);
  }
  boolean supportMessageRowMerge(  MessageRow row){
    return EventGroup.isSupported(row);
  }
  @Override public void addToFront(  MessageRow row){
    if (isSupportedRow(row)) {
      setNotifyOnChange(false);
      if (mIsSearchMode) {
        mLiveMessagesRowList.add(0,row);
      }
 else {
        insert(row,(!addToEventGroupToFront(row)) ? 0 : 1);
      }
      if (row.getEvent().eventId != null) {
        mEventRowMap.put(row.getEvent().eventId,row);
      }
    }
  }
  @Override public void remove(  MessageRow row){
    if (null != row) {
      if (mIsSearchMode) {
        mLiveMessagesRowList.remove(row);
      }
 else {
        removeFromEventGroup(row);
        int position=getPosition(row);
        super.remove(row);
        checkEventGroupsMerge(row,position);
      }
    }
  }
  @Override public void add(  MessageRow row){
    add(row,true);
  }
  @Override public void add(  MessageRow row,  boolean refresh){
    if (isSupportedRow(row)) {
      setNotifyOnChange(false);
      if (mIsSearchMode) {
        mLiveMessagesRowList.add(row);
      }
 else {
        addToEventGroup(row);
        super.add(row);
      }
      if (row.getEvent().eventId != null) {
        mEventRowMap.put(row.getEvent().eventId,row);
      }
      if ((!mIsSearchMode) && refresh) {
        notifyDataSetChanged();
      }
 else {
        setNotifyOnChange(true);
      }
    }
  }
  @Override public MessageRow getMessageRow(  String eventId){
    if (null != eventId) {
      return mEventRowMap.get(eventId);
    }
 else {
      return null;
    }
  }
  @Override public MessageRow getClosestRow(  Event event){
    if (event == null) {
      return null;
    }
 else {
      return getClosestRowFromTs(event.eventId,event.getOriginServerTs());
    }
  }
  @Override public MessageRow getClosestRowFromTs(  final String eventId,  final long eventTs){
    MessageRow messageRow=getMessageRow(eventId);
    if (messageRow == null) {
      List<MessageRow> rows=new ArrayList<>(mEventRowMap.values());
      for (      MessageRow row : rows) {
        if (!(row.getEvent() instanceof EventGroup)) {
          long rowTs=row.getEvent().getOriginServerTs();
          if (rowTs > eventTs) {
            if (messageRow == null) {
              messageRow=row;
            }
 else             if (rowTs < messageRow.getEvent().getOriginServerTs()) {
              messageRow=row;
              Log.d(LOG_TAG,"## getClosestRowFromTs() " + row.getEvent().eventId);
            }
          }
        }
      }
    }
    return messageRow;
  }
  @Override public MessageRow getClosestRowBeforeTs(  final String eventId,  final long eventTs){
    MessageRow messageRow=getMessageRow(eventId);
    if (messageRow == null) {
      List<MessageRow> rows=new ArrayList<>(mEventRowMap.values());
      for (      MessageRow row : rows) {
        if (!(row.getEvent() instanceof EventGroup)) {
          long rowTs=row.getEvent().getOriginServerTs();
          if (rowTs < eventTs) {
            if (messageRow == null) {
              messageRow=row;
            }
 else             if (rowTs > messageRow.getEvent().getOriginServerTs()) {
              messageRow=row;
              Log.d(LOG_TAG,"## getClosestRowBeforeTs() " + row.getEvent().eventId);
            }
          }
        }
      }
    }
    return messageRow;
  }
  @Override public void updateEventById(  Event event,  String oldEventId){
    MessageRow row=mEventRowMap.get(event.eventId);
    if (null == row) {
      MessageRow oldRow=mEventRowMap.get(oldEventId);
      if (null != oldRow) {
        mEventRowMap.remove(oldEventId);
        mEventRowMap.put(event.eventId,oldRow);
      }
    }
 else {
      removeEventById(oldEventId);
    }
    notifyDataSetChanged();
  }
  @Override public void removeEventById(  String eventId){
    setNotifyOnChange(false);
    MessageRow row=mEventRowMap.get(eventId);
    if (row != null) {
      remove(row);
      mEventRowMap.remove(eventId);
    }
  }
  @Override public void setIsPreviewMode(  boolean isPreviewMode){
    mIsPreviewMode=isPreviewMode;
  }
  @Override public void setIsUnreadViewMode(  boolean isUnreadViewMode){
    mIsUnreadViewMode=isUnreadViewMode;
  }
  @Override public boolean isUnreadViewMode(){
    return mIsUnreadViewMode;
  }
  @Override public void setSearchPattern(  String pattern){
    if (!TextUtils.equals(pattern,mPattern)) {
      mPattern=pattern;
      mIsSearchMode=!TextUtils.isEmpty(mPattern);
      if (mIsSearchMode) {
        if (null == mLiveMessagesRowList) {
          mLiveMessagesRowList=new ArrayList<>();
          for (int pos=0; pos < getCount(); pos++) {
            mLiveMessagesRowList.add(getItem(pos));
          }
        }
      }
 else       if (null != mLiveMessagesRowList) {
        clear();
        addAll(mLiveMessagesRowList);
        mLiveMessagesRowList=null;
      }
    }
  }
  @Override public int getViewTypeCount(){
    return NUM_ROW_TYPES;
  }
  @Override public void clear(){
    super.clear();
    if (!mIsSearchMode) {
      mEventRowMap.clear();
    }
  }
  @Override public int getItemViewType(  int position){
    if (position >= getCount()) {
      return ROW_TYPE_TEXT;
    }
    final MessageRow row=getItem(position);
    return getItemViewType(row.getEvent());
  }
  @Override public View getView(  int position,  View convertView,  ViewGroup parent){
    if (position >= getCount()) {
      Log.e(LOG_TAG,"## getView() : invalid index " + position + " >= "+ getCount());
      if (null == convertView) {
        convertView=mLayoutInflater.inflate(mRowTypeToLayoutId.get(ROW_TYPE_TEXT),parent,false);
      }
      if (null != mVectorMessagesAdapterEventsListener) {
        mVectorMessagesAdapterEventsListener.onInvalidIndexes();
      }
      return convertView;
    }
    final View inflatedView;
    int viewType=getItemViewType(position);
    if (null != convertView) {
      if (viewType != (int)convertView.getTag()) {
        Log.e(LOG_TAG,"## getView() : invalid view type : got " + convertView.getTag() + " instead of "+ viewType);
        convertView=null;
      }
    }
switch (viewType) {
case ROW_TYPE_EMOJI:
case ROW_TYPE_CODE:
case ROW_TYPE_TEXT:
      inflatedView=getTextView(viewType,position,convertView,parent);
    break;
case ROW_TYPE_IMAGE:
case ROW_TYPE_VIDEO:
case ROW_TYPE_STICKER:
  inflatedView=getImageVideoView(viewType,position,convertView,parent);
break;
case ROW_TYPE_NOTICE:
case ROW_TYPE_ROOM_MEMBER:
inflatedView=getNoticeRoomMemberView(viewType,position,convertView,parent);
break;
case ROW_TYPE_EMOTE:
inflatedView=getEmoteView(position,convertView,parent);
break;
case ROW_TYPE_FILE:
inflatedView=getFileView(position,convertView,parent);
break;
case ROW_TYPE_HIDDEN:
inflatedView=getHiddenView(position,convertView,parent);
break;
case ROW_TYPE_MERGE:
inflatedView=getMergeView(position,convertView,parent);
break;
case ROW_TYPE_VERSIONED_ROOM:
inflatedView=getVersionedRoomView(position,convertView,parent);
break;
default :
throw new RuntimeException("Unknown item view type for position " + position);
}
if (mReadMarkerListener != null) {
handleReadMarker(inflatedView,position);
}
if (null != inflatedView) {
inflatedView.setBackgroundColor(Color.TRANSPARENT);
inflatedView.setTag(viewType);
}
displayE2eIcon(inflatedView,position);
displayE2eReRequest(inflatedView,position);
return inflatedView;
}
@Override public void notifyDataSetChanged(){
setNotifyOnChange(false);
List<MessageRow> undeliverableEvents=new ArrayList<>();
for (int i=0; i < getCount(); i++) {
MessageRow row=getItem(i);
Event event=row.getEvent();
if ((null != event) && (event.isUndelivered() || event.isUnknownDevice())) {
undeliverableEvents.add(row);
remove(row);
i--;
}
}
if (undeliverableEvents.size() > 0) {
try {
Collections.sort(undeliverableEvents,new Comparator<MessageRow>(){
@Override public int compare(MessageRow m1,MessageRow m2){
long diff=m1.getEvent().getOriginServerTs() - m2.getEvent().getOriginServerTs();
return (diff > 0) ? +1 : ((diff < 0) ? -1 : 0);
}
}
);
}
 catch (Exception e) {
Log.e(LOG_TAG,"## notifyDataSetChanged () : failed to sort undeliverableEvents " + e.getMessage(),e);
}
addAll(undeliverableEvents);
}
setNotifyOnChange(true);
refreshRefreshDateList();
manageCryptoEvents();
if (!VectorApp.isAppInBackground()) {
super.notifyDataSetChanged();
}
}
public void setLiveRoomMembers(List<RoomMember> roomMembers){
mLiveRoomMembers.clear();
for (RoomMember roomMember : roomMembers) {
mLiveRoomMembers.put(roomMember.getUserId(),roomMember);
}
notifyDataSetChanged();
}
public void onBingRulesUpdate(){
notifyDataSetChanged();
}
public void onPause(){
mEventFormattedTsMap.clear();
}
public void onEventTap(Event event){
if (!mIsSearchMode) {
if (null == mSelectedEvent) {
mSelectedEvent=event;
}
 else {
mSelectedEvent=null;
}
notifyDataSetChanged();
if (mVectorMessagesAdapterEventsListener != null) {
mVectorMessagesAdapterEventsListener.onSelectedEventChange(mSelectedEvent);
}
}
}
public void setSearchedEventId(String eventId){
mSearchedEventId=eventId;
updateHighlightedEventId();
}
public void cancelSelectionMode(){
if (null != mSelectedEvent) {
mSelectedEvent=null;
notifyDataSetChanged();
if (mVectorMessagesAdapterEventsListener != null) {
mVectorMessagesAdapterEventsListener.onSelectedEventChange(mSelectedEvent);
}
}
}
public boolean isInSelectionMode(){
return null != mSelectedEvent;
}
@Nullable public Event getCurrentSelectedEvent(){
return mSelectedEvent;
}
public void setVectorMessagesAdapterActionsListener(IMessagesAdapterActionsListener listener){
mVectorMessagesAdapterEventsListener=listener;
mMediasHelper.setVectorMessagesAdapterActionsListener(listener);
mHelper.setVectorMessagesAdapterActionsListener(listener);
if (null != mLinkMovementMethod) {
mLinkMovementMethod.updateListener(listener);
}
 else if (null != listener) {
mLinkMovementMethod=new MatrixLinkMovementMethod(listener);
}
mHelper.setLinkMovementMethod(mLinkMovementMethod);
}
public MXDeviceInfo getDeviceInfo(String eventId){
MXDeviceInfo deviceInfo=null;
if (null != eventId) {
deviceInfo=mE2eDeviceByEventId.get(eventId);
}
return deviceInfo;
}
private static boolean containsOnlyEmojis(String body){
boolean res=false;
if (!TextUtils.isEmpty(body)) {
Matcher matcher=mEmojisPattern.matcher(body);
int start=-1;
int end=-1;
while (matcher.find()) {
int nextStart=matcher.start();
if (start < 0) {
if (nextStart > 0) {
return false;
}
}
 else {
if (nextStart != end) {
return false;
}
}
start=nextStart;
end=matcher.end();
}
res=(-1 != start) && (end == body.length());
}
return res;
}
private int getItemViewType(Event event){
String eventId=event.eventId;
String eventType=event.getType();
if ((null != eventId) && mHiddenEventIds.contains(eventId)) {
return ROW_TYPE_HIDDEN;
}
if (Event.EVENT_TYPE_MESSAGE_ENCRYPTED.equals(eventType)) {
return ROW_TYPE_TEXT;
}
if (event instanceof EventGroup) {
return ROW_TYPE_MERGE;
}
if (null != eventId) {
Integer type=mEventType.get(eventId);
if (null != type) {
return type;
}
}
int viewType;
if (Event.EVENT_TYPE_MESSAGE.equals(eventType)) {
Message message=JsonUtils.toMessage(event.getContent());
String msgType=message.msgtype;
if (Message.MSGTYPE_TEXT.equals(msgType)) {
if (containsOnlyEmojis(message.body)) {
viewType=ROW_TYPE_EMOJI;
}
 else if (!TextUtils.isEmpty(message.formatted_body) && mHelper.containsFencedCodeBlocks(message)) {
viewType=ROW_TYPE_CODE;
}
 else {
viewType=ROW_TYPE_TEXT;
}
}
 else if (Message.MSGTYPE_IMAGE.equals(msgType)) {
viewType=ROW_TYPE_IMAGE;
}
 else if (Message.MSGTYPE_EMOTE.equals(msgType)) {
viewType=ROW_TYPE_EMOTE;
}
 else if (Message.MSGTYPE_NOTICE.equals(msgType)) {
viewType=ROW_TYPE_NOTICE;
}
 else if (Message.MSGTYPE_FILE.equals(msgType) || Message.MSGTYPE_AUDIO.equals(msgType)) {
viewType=ROW_TYPE_FILE;
}
 else if (Message.MSGTYPE_VIDEO.equals(msgType)) {
viewType=ROW_TYPE_VIDEO;
}
 else {
viewType=ROW_TYPE_TEXT;
}
}
 else if (Event.EVENT_TYPE_STICKER.equals(eventType)) {
viewType=ROW_TYPE_STICKER;
}
 else if (event.isCallEvent() || Event.EVENT_TYPE_STATE_HISTORY_VISIBILITY.equals(eventType) || Event.EVENT_TYPE_STATE_ROOM_TOPIC.equals(eventType)|| Event.EVENT_TYPE_STATE_ROOM_MEMBER.equals(eventType)|| Event.EVENT_TYPE_STATE_ROOM_NAME.equals(eventType)|| Event.EVENT_TYPE_STATE_ROOM_THIRD_PARTY_INVITE.equals(eventType)|| Event.EVENT_TYPE_MESSAGE_ENCRYPTION.equals(eventType)) {
viewType=ROW_TYPE_ROOM_MEMBER;
}
 else if (WidgetsManager.WIDGET_EVENT_TYPE.equals(eventType)) {
return ROW_TYPE_ROOM_MEMBER;
}
 else if (Event.EVENT_TYPE_STATE_ROOM_CREATE.equals(eventType)) {
viewType=ROW_TYPE_VERSIONED_ROOM;
}
 else {
throw new RuntimeException("Unknown event type: " + eventType);
}
if (null != eventId) {
mEventType.put(eventId,new Integer(viewType));
}
return viewType;
}
private static boolean isMergeableEvent(int eventType){
return (ROW_TYPE_NOTICE != eventType) && (ROW_TYPE_ROOM_MEMBER != eventType) && (ROW_TYPE_HIDDEN != eventType);
}
private void manageSubView(final int position,View convertView,View subView,int msgType){
MessageRow row=getItem(position);
convertView.setClickable(true);
convertView.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
if (null != mVectorMessagesAdapterEventsListener) {
mVectorMessagesAdapterEventsListener.onRowClick(position);
}
}
}
);
convertView.setOnLongClickListener(new View.OnLongClickListener(){
@Override public boolean onLongClick(View v){
return (null != mVectorMessagesAdapterEventsListener) && mVectorMessagesAdapterEventsListener.onRowLongClick(position);
}
}
);
Event event=row.getEvent();
boolean isMergedView=false;
boolean willBeMerged=false;
if (!mIsSearchMode && isMergeableEvent(msgType)) {
if (position > 0) {
Event prevEvent=getItem(position - 1).getEvent();
isMergedView=isMergeableEvent(getItemViewType(prevEvent)) && TextUtils.equals(prevEvent.getSender(),event.getSender());
}
if ((position + 1) < getCount()) {
Event nextEvent=getItem(position + 1).getEvent();
willBeMerged=isMergeableEvent(getItemViewType(nextEvent)) && TextUtils.equals(nextEvent.getSender(),event.getSender());
}
}
isMergedView=mergeView(event,position,isMergedView);
mHelper.setSenderValue(convertView,row,isMergedView);
TextView tsTextView=VectorMessagesAdapterHelper.setTimestampValue(convertView,getFormattedTimestamp(event));
if (null != tsTextView) {
if (row.getEvent().isUndelivered() || row.getEvent().isUnknownDevice()) {
tsTextView.setTextColor(mNotSentMessageTextColor);
}
 else {
tsTextView.setTextColor(ThemeUtils.INSTANCE.getColor(mContext,R.attr.default_text_light_color));
}
tsTextView.setVisibility((((position + 1) == getCount()) || mIsSearchMode || mAlwaysShowTimeStamps) ? View.VISIBLE : View.GONE);
}
View avatarLayoutView=mHelper.setSenderAvatar(convertView,row,isMergedView);
View bodyLayoutView=convertView.findViewById(R.id.messagesAdapter_body_layout);
VectorMessagesAdapterHelper.alignSubviewToAvatarView(subView,bodyLayoutView,avatarLayoutView,isMergedView);
View messageSeparatorView=convertView.findViewById(R.id.messagesAdapter_message_separator);
if (null != messageSeparatorView) {
messageSeparatorView.setVisibility((willBeMerged || ((position + 1) == getCount())) ? View.GONE : View.VISIBLE);
}
VectorMessagesAdapterHelper.setHeader(convertView,headerMessage(position),position);
if (mHideReadReceipts) {
mHelper.hideReadReceipts(convertView);
}
 else {
mHelper.displayReadReceipts(convertView,row,mIsPreviewMode,mLiveRoomMembers);
}
manageSelectionMode(convertView,event,msgType);
setReadMarker(convertView,row,isMergedView,avatarLayoutView,bodyLayoutView);
if ((ROW_TYPE_IMAGE == msgType) || (ROW_TYPE_FILE == msgType) || (ROW_TYPE_VIDEO == msgType)|| (ROW_TYPE_STICKER == msgType)) {
VectorMessagesAdapterHelper.setMediaProgressLayout(convertView,bodyLayoutView);
}
}
private View getTextView(final int viewType,final int position,View convertView,ViewGroup parent){
if (convertView == null) {
convertView=mLayoutInflater.inflate(mRowTypeToLayoutId.get(viewType),parent,false);
}
try {
MessageRow row=getItem(position);
Event event=row.getEvent();
Message message=JsonUtils.toMessage(event.getContent());
boolean shouldHighlighted=(null != mVectorMessagesAdapterEventsListener) && mVectorMessagesAdapterEventsListener.shouldHighlightEvent(event);
final List<TextView> textViews;
if (ROW_TYPE_CODE == viewType) {
textViews=populateRowTypeCode(message,convertView,shouldHighlighted);
}
 else {
final TextView bodyTextView=convertView.findViewById(R.id.messagesAdapter_body);
if (null == bodyTextView) {
Log.e(LOG_TAG,"getTextView : invalid layout");
return convertView;
}
RoomState roomState=row.getRoomState();
EventDisplay display=new RiotEventDisplay(mContext,event,roomState,mHtmlToolbox);
CharSequence textualDisplay=display.getTextualDisplay();
SpannableString body=new SpannableString((null == textualDisplay) ? "" : textualDisplay);
replaceQuoteSpans(body);
CharSequence result=mHelper.highlightPattern(body,mPattern,mBackgroundColorSpan,shouldHighlighted);
bodyTextView.setText(result);
mHelper.applyLinkMovementMethod(bodyTextView);
textViews=new ArrayList<>();
textViews.add(bodyTextView);
}
int textColor;
if (row.getEvent().isEncrypting()) {
textColor=mEncryptingMessageTextColor;
}
 else if (row.getEvent().isSending() || row.getEvent().isUnsent()) {
textColor=mSendingMessageTextColor;
}
 else if (row.getEvent().isUndelivered() || row.getEvent().isUnknownDevice()) {
textColor=mNotSentMessageTextColor;
}
 else {
textColor=shouldHighlighted ? mHighlightMessageTextColor : mDefaultMessageTextColor;
}
for (final TextView tv : textViews) {
tv.setTextColor(textColor);
}
View textLayout=convertView.findViewById(R.id.messagesAdapter_text_layout);
manageSubView(position,convertView,textLayout,viewType);
for (final TextView tv : textViews) {
addContentViewListeners(convertView,tv,position,viewType);
}
mHelper.manageURLPreviews(message,convertView,event.eventId);
}
 catch (Exception e) {
Log.e(LOG_TAG,"## getTextView() failed : " + e.getMessage(),e);
}
return convertView;
}
private void replaceQuoteSpans(Spannable spannable){
QuoteSpan[] quoteSpans=spannable.getSpans(0,spannable.length(),QuoteSpan.class);
for (QuoteSpan quoteSpan : quoteSpans) {
int start=spannable.getSpanStart(quoteSpan);
int end=spannable.getSpanEnd(quoteSpan);
int flags=spannable.getSpanFlags(quoteSpan);
spannable.removeSpan(quoteSpan);
spannable.setSpan(new VectorQuoteSpan(mContext),start,end,flags);
}
}
private List<TextView> populateRowTypeCode(final Message message,final View convertView,final boolean shouldHighlighted){
final List<TextView> textViews=new ArrayList<>();
final LinearLayout container=convertView.findViewById(R.id.messages_container);
container.removeAllViews();
final String[] blocks=mHelper.getFencedCodeBlocks(message);
for (final String block : blocks) {
if (TextUtils.isEmpty(block)) {
continue;
}
if (block.startsWith(VectorMessagesAdapterHelper.START_FENCED_BLOCK) && block.endsWith(VectorMessagesAdapterHelper.END_FENCED_BLOCK)) {
final String minusTags=block.substring(VectorMessagesAdapterHelper.START_FENCED_BLOCK.length(),block.length() - VectorMessagesAdapterHelper.END_FENCED_BLOCK.length()).replace("\n","<br/>").replace(" ","&nbsp;").trim();
final CharSequence htmlReady=mHelper.convertToHtml(minusTags);
final View blockView=mLayoutInflater.inflate(R.layout.adapter_item_vector_message_code_block,null);
final TextView tv=blockView.findViewById(R.id.messagesAdapter_body);
tv.setText(htmlReady);
mHelper.highlightFencedCode(tv);
mHelper.applyLinkMovementMethod(tv);
container.addView(blockView);
textViews.add(tv);
((View)tv.getParent()).setBackgroundColor(ThemeUtils.INSTANCE.getColor(mContext,R.attr.markdown_block_background_color));
}
 else {
final TextView tv=(TextView)mLayoutInflater.inflate(R.layout.adapter_item_vector_message_code_text,null);
String block2=block.trim();
if (TextUtils.equals(Message.FORMAT_MATRIX_HTML,message.format)) {
final String sanitized=mHelper.getSanitisedHtml(block2);
if (sanitized != null) {
block2=sanitized;
}
}
final CharSequence sequence=mHelper.convertToHtml(block2);
final CharSequence strBuilder=mHelper.highlightPattern(new SpannableString(sequence),mPattern,mBackgroundColorSpan,shouldHighlighted);
tv.setText(strBuilder);
mHelper.applyLinkMovementMethod(tv);
container.addView(tv);
textViews.add(tv);
}
}
return textViews;
}
private View getImageVideoView(int type,final int position,View convertView,ViewGroup parent){
if (convertView == null) {
convertView=mLayoutInflater.inflate(mRowTypeToLayoutId.get(type),parent,false);
}
try {
MessageRow row=getItem(position);
Event event=row.getEvent();
Message message=null;
boolean videoContent=false;
if (type == ROW_TYPE_IMAGE) {
ImageMessage imageMessage=JsonUtils.toImageMessage(event.getContent());
if (imageMessage.getMimeType().equals("image/gif")) {
videoContent=true;
}
message=imageMessage;
}
 else if (type == ROW_TYPE_VIDEO) {
videoContent=true;
message=JsonUtils.toVideoMessage(event.getContent());
}
 else if (type == ROW_TYPE_STICKER) {
StickerMessage stickerMessage=JsonUtils.toStickerMessage(event.getContent());
message=stickerMessage;
}
final ImageView playCircleView=convertView.findViewById(R.id.messagesAdapter_play_circle);
if (null == playCircleView) {
Log.e(LOG_TAG,"getImageVideoView : invalid layout");
return convertView;
}
playCircleView.setVisibility(View.GONE);
if (videoContent) {
playCircleView.setVisibility(View.VISIBLE);
}
if (null != message) {
mHelper.hideStickerDescription(convertView);
mMediasHelper.managePendingImageVideoDownload(convertView,event,message,position);
mMediasHelper.managePendingImageVideoUpload(convertView,event,message);
}
View imageLayout=convertView.findViewById(R.id.messagesAdapter_image_layout);
imageLayout.setAlpha(event.isSent() ? 1.0f : 0.5f);
manageSubView(position,convertView,imageLayout,type);
ImageView imageView=convertView.findViewById(R.id.messagesAdapter_image);
addContentViewListeners(convertView,imageView,position,type);
}
 catch (Exception e) {
Log.e(LOG_TAG,"## getImageVideoView() failed : " + e.getMessage(),e);
}
return convertView;
}
private View getNoticeRoomMemberView(final int viewType,final int position,View convertView,ViewGroup parent){
if (convertView == null) {
convertView=mLayoutInflater.inflate(mRowTypeToLayoutId.get(viewType),parent,false);
}
try {
MessageRow row=getItem(position);
Event msg=row.getEvent();
RoomState roomState=row.getRoomState();
CharSequence notice;
EventDisplay display=new RiotEventDisplay(mContext,msg,roomState);
notice=display.getTextualDisplay();
TextView noticeTextView=convertView.findViewById(R.id.messagesAdapter_body);
if (null == noticeTextView) {
Log.e(LOG_TAG,"getNoticeRoomMemberView : invalid layout");
return convertView;
}
if (TextUtils.isEmpty(notice)) {
noticeTextView.setText("");
}
 else {
SpannableStringBuilder strBuilder=new SpannableStringBuilder(notice);
MatrixURLSpan.refreshMatrixSpans(strBuilder,mVectorMessagesAdapterEventsListener);
noticeTextView.setText(strBuilder);
}
View textLayout=convertView.findViewById(R.id.messagesAdapter_text_layout);
manageSubView(position,convertView,textLayout,viewType);
addContentViewListeners(convertView,noticeTextView,position,viewType);
noticeTextView.setAlpha(1.0f);
noticeTextView.setTextColor(getNoticeTextColor());
Message message=JsonUtils.toMessage(msg.getContent());
mHelper.manageURLPreviews(message,convertView,msg.eventId);
}
 catch (Exception e) {
Log.e(LOG_TAG,"## getNoticeRoomMemberView() failed : " + e.getMessage(),e);
}
return convertView;
}
private View getEmoteView(final int position,View convertView,ViewGroup parent){
if (convertView == null) {
convertView=mLayoutInflater.inflate(mRowTypeToLayoutId.get(ROW_TYPE_EMOTE),parent,false);
}
try {
MessageRow row=getItem(position);
Event event=row.getEvent();
RoomState roomState=row.getRoomState();
TextView emoteTextView=convertView.findViewById(R.id.messagesAdapter_body);
if (null == emoteTextView) {
Log.e(LOG_TAG,"getEmoteView : invalid layout");
return convertView;
}
Message message=JsonUtils.toMessage(event.getContent());
String userDisplayName=(null == roomState) ? event.getSender() : roomState.getMemberName(event.getSender());
String body="* " + userDisplayName + " "+ message.body;
if (TextUtils.equals(Message.FORMAT_MATRIX_HTML,message.format)) {
String htmlString=mHelper.getSanitisedHtml(message.formatted_body);
if (null != htmlString) {
CharSequence sequence=mHelper.convertToHtml(htmlString);
body="* " + userDisplayName + " "+ sequence;
}
}
CharSequence strBuilder=mHelper.highlightPattern(new SpannableString(body),null,mBackgroundColorSpan,false);
emoteTextView.setText(strBuilder);
mHelper.applyLinkMovementMethod(emoteTextView);
int textColor;
if (row.getEvent().isEncrypting()) {
textColor=mEncryptingMessageTextColor;
}
 else if (row.getEvent().isSending() || row.getEvent().isUnsent()) {
textColor=mSendingMessageTextColor;
}
 else if (row.getEvent().isUndelivered() || row.getEvent().isUnknownDevice()) {
textColor=mNotSentMessageTextColor;
}
 else {
textColor=mDefaultMessageTextColor;
}
emoteTextView.setTextColor(textColor);
View textLayout=convertView.findViewById(R.id.messagesAdapter_text_layout);
manageSubView(position,convertView,textLayout,ROW_TYPE_EMOTE);
addContentViewListeners(convertView,emoteTextView,position,ROW_TYPE_EMOTE);
mHelper.manageURLPreviews(message,convertView,event.eventId);
}
 catch (Exception e) {
Log.e(LOG_TAG,"## getEmoteView() failed : " + e.getMessage(),e);
}
return convertView;
}
private View getFileView(final int position,View convertView,ViewGroup parent){
if (convertView == null) {
convertView=mLayoutInflater.inflate(mRowTypeToLayoutId.get(ROW_TYPE_FILE),parent,false);
}
try {
MessageRow row=getItem(position);
Event event=row.getEvent();
final FileMessage fileMessage=JsonUtils.toFileMessage(event.getContent());
final TextView fileTextView=convertView.findViewById(R.id.messagesAdapter_filename);
if (null == fileTextView) {
Log.e(LOG_TAG,"getFileView : invalid layout");
return convertView;
}
fileTextView.setPaintFlags(fileTextView.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
fileTextView.setText("\n" + fileMessage.body + "\n");
final ImageView imageTypeView=convertView.findViewById(R.id.messagesAdapter_image_type);
if (null != imageTypeView) {
imageTypeView.setImageResource(Message.MSGTYPE_AUDIO.equals(fileMessage.msgtype) ? R.drawable.filetype_audio : R.drawable.filetype_attachment);
}
imageTypeView.setBackgroundColor(Color.TRANSPARENT);
mMediasHelper.managePendingFileDownload(convertView,event,fileMessage,position);
mMediasHelper.managePendingUpload(convertView,event,ROW_TYPE_FILE,fileMessage.url);
View fileLayout=convertView.findViewById(R.id.messagesAdapter_file_layout);
manageSubView(position,convertView,fileLayout,ROW_TYPE_FILE);
addContentViewListeners(convertView,fileTextView,position,ROW_TYPE_FILE);
}
 catch (Exception e) {
Log.e(LOG_TAG,"## getFileView() failed " + e.getMessage(),e);
}
return convertView;
}
private View getHiddenView(final int position,View convertView,ViewGroup parent){
if (convertView == null) {
convertView=mLayoutInflater.inflate(mRowTypeToLayoutId.get(ROW_TYPE_HIDDEN),parent,false);
}
VectorMessagesAdapterHelper.setHeader(convertView,headerMessage(position),position);
return convertView;
}
private View getMergeView(final int position,View convertView,ViewGroup parent){
if (convertView == null) {
convertView=mLayoutInflater.inflate(mRowTypeToLayoutId.get(ROW_TYPE_MERGE),parent,false);
}
try {
MessageRow row=getItem(position);
final EventGroup event=(EventGroup)row.getEvent();
View headerLayout=convertView.findViewById(R.id.messagesAdapter_merge_header_layout);
TextView headerTextView=convertView.findViewById(R.id.messagesAdapter_merge_header_text_view);
TextView summaryTextView=convertView.findViewById(R.id.messagesAdapter_merge_summary);
View separatorLayout=convertView.findViewById(R.id.messagesAdapter_merge_separator);
View avatarsLayout=convertView.findViewById(R.id.messagesAdapter_merge_avatar_list);
if ((null == headerLayout) || (null == headerTextView) || (null == summaryTextView)|| (null == separatorLayout)|| (null == avatarsLayout)) {
Log.e(LOG_TAG,"getMergeView : invalid layout");
return convertView;
}
separatorLayout.setVisibility(event.isExpanded() ? View.VISIBLE : View.GONE);
summaryTextView.setVisibility(event.isExpanded() ? View.GONE : View.VISIBLE);
avatarsLayout.setVisibility(event.isExpanded() ? View.GONE : View.VISIBLE);
headerTextView.setText(event.isExpanded() ? R.string.merged_events_collapse : R.string.merged_events_expand);
if (!event.isExpanded()) {
avatarsLayout.setVisibility(View.VISIBLE);
List<ImageView> avatarView=new ArrayList<>();
avatarView.add((ImageView)convertView.findViewById(R.id.mels_list_avatar_1));
avatarView.add((ImageView)convertView.findViewById(R.id.mels_list_avatar_2));
avatarView.add((ImageView)convertView.findViewById(R.id.mels_list_avatar_3));
avatarView.add((ImageView)convertView.findViewById(R.id.mels_list_avatar_4));
avatarView.add((ImageView)convertView.findViewById(R.id.mels_list_avatar_5));
List<MessageRow> messageRows=event.getAvatarRows(avatarView.size());
for (int i=0; i < avatarView.size(); i++) {
ImageView imageView=avatarView.get(i);
if (i < messageRows.size()) {
mHelper.loadMemberAvatar(imageView,messageRows.get(i));
imageView.setVisibility(View.VISIBLE);
}
 else {
imageView.setVisibility(View.GONE);
}
}
summaryTextView.setText(event.toString(mContext));
}
headerLayout.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
event.setIsExpanded(!event.isExpanded());
updateHighlightedEventId();
if (mSelectedEvent != null && event.contains(mSelectedEvent.eventId)) {
cancelSelectionMode();
}
 else {
notifyDataSetChanged();
}
}
}
);
convertView.findViewById(R.id.messagesAdapter_highlight_message_marker).setBackgroundColor(ContextCompat.getColor(mContext,TextUtils.equals(mHighlightedEventId,event.eventId) ? R.color.vector_green_color : android.R.color.transparent));
VectorMessagesAdapterHelper.setHeader(convertView,headerMessage(position),position);
boolean isInSelectionMode=(null != mSelectedEvent);
boolean isSelected=isInSelectionMode && TextUtils.equals(event.eventId,mSelectedEvent.eventId);
float alpha=(!isInSelectionMode || isSelected) ? 1.0f : 0.2f;
convertView.findViewById(R.id.messagesAdapter_body_view).setAlpha(alpha);
}
 catch (Exception e) {
Log.e(LOG_TAG,"## getMergeView() failed " + e.getMessage(),e);
}
return convertView;
}
private View getVersionedRoomView(final int position,View convertView,ViewGroup parent){
if (convertView == null) {
convertView=mLayoutInflater.inflate(mRowTypeToLayoutId.get(ROW_TYPE_VERSIONED_ROOM),parent,false);
}
final MessageRow row=getItem(position);
final RoomState roomState=row.getRoomState();
final RoomCreateContent.Predecessor predecessor=roomState.getRoomCreateContent().predecessor;
final String roomLink=PermalinkUtils.createPermalink(predecessor.roomId);
final ClickableSpan urlSpan=new MatrixURLSpan(roomLink,MXPatterns.PATTERN_CONTAIN_APP_LINK_PERMALINK_ROOM_ID,mVectorMessagesAdapterEventsListener);
final int textColorInt=ContextCompat.getColor(mContext,R.color.riot_primary_text_color_light);
final CharSequence text=new Spanny(mContext.getString(R.string.room_tombstone_continuation_description),new StyleSpan(Typeface.BOLD),new ForegroundColorSpan(textColorInt)).append("\n").append(mContext.getString(R.string.room_tombstone_predecessor_link),urlSpan,new ForegroundColorSpan(textColorInt));
final TextView versionedTextView=convertView.findViewById(R.id.messagesAdapter_room_versioned_text);
versionedTextView.setMovementMethod(LinkMovementMethod.getInstance());
versionedTextView.setText(text);
return convertView;
}
private boolean isSupportedRow(MessageRow row){
Event event=row.getEvent();
if ((null == event) || (null == event.eventId)) {
Log.e(LOG_TAG,"## isSupportedRow() : invalid row");
return false;
}
String eventId=event.eventId;
MessageRow currentRow=mEventRowMap.get(eventId);
if (null != currentRow) {
if (event.getAge() == Event.DUMMY_EVENT_AGE) {
currentRow.updateEvent(event);
Log.d(LOG_TAG,"## isSupportedRow() : update the timestamp of " + eventId);
}
 else {
Log.e(LOG_TAG,"## isSupportedRow() : the event " + eventId + " has already been received");
}
return false;
}
boolean isSupported=VectorMessagesAdapterHelper.isDisplayableEvent(mContext,row);
if (isSupported && TextUtils.equals(event.getType(),Event.EVENT_TYPE_STATE_ROOM_MEMBER)) {
RoomMember roomMember=JsonUtils.toRoomMember(event.getContent());
String membership=roomMember.membership;
if (PreferencesManager.hideJoinLeaveMessages(mContext)) {
isSupported=!TextUtils.equals(membership,RoomMember.MEMBERSHIP_LEAVE) && !TextUtils.equals(membership,RoomMember.MEMBERSHIP_JOIN);
}
if (isSupported && PreferencesManager.hideAvatarDisplayNameChangeMessages(mContext) && TextUtils.equals(membership,RoomMember.MEMBERSHIP_JOIN)) {
EventContent eventContent=JsonUtils.toEventContent(event.getContentAsJsonObject());
EventContent prevEventContent=event.getPrevContent();
String senderDisplayName=eventContent.displayname;
String prevUserDisplayName=null;
String avatar=eventContent.avatar_url;
String prevAvatar=null;
if ((null != prevEventContent)) {
prevUserDisplayName=prevEventContent.displayname;
prevAvatar=prevEventContent.avatar_url;
}
isSupported=TextUtils.equals(prevUserDisplayName,senderDisplayName) && TextUtils.equals(avatar,prevAvatar);
}
}
return isSupported;
}
private String getFormattedTimestamp(Event event){
String res=mEventFormattedTsMap.get(event.eventId);
if (null != res) {
return res;
}
if (event.isValidOriginServerTs()) {
res=AdapterUtils.tsToString(mContext,event.getOriginServerTs(),true);
}
 else {
res=" ";
}
mEventFormattedTsMap.put(event.eventId,res);
return res;
}
private void refreshRefreshDateList(){
List<Date> dates=new ArrayList<>();
Date latestDate=AdapterUtils.zeroTimeDate(new Date());
for (int index=0; index < getCount(); index++) {
MessageRow row=getItem(index);
Event event=row.getEvent();
if (event.isValidOriginServerTs()) {
latestDate=AdapterUtils.zeroTimeDate(new Date(event.getOriginServerTs()));
}
dates.add(latestDate);
}
synchronized (this) {
mMessagesDateList=dates;
mReferenceDate=new Date();
}
}
private String dateDiff(Date date,long nbrDays){
if (nbrDays == 0) {
return mContext.getString(R.string.today);
}
 else if (nbrDays == 1) {
return mContext.getString(R.string.yesterday);
}
 else if (nbrDays < 7) {
return (new SimpleDateFormat("EEEE",mLocale)).format(date);
}
 else {
int flags=DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_YEAR | DateUtils.FORMAT_ABBREV_ALL| DateUtils.FORMAT_SHOW_WEEKDAY;
Formatter f=new Formatter(new StringBuilder(50),mLocale);
return DateUtils.formatDateRange(mContext,f,date.getTime(),date.getTime(),flags).toString();
}
}
String headerMessage(int position){
Date prevMessageDate=null;
Date messageDate=null;
synchronized (this) {
if ((position > 0) && (position < mMessagesDateList.size())) {
prevMessageDate=mMessagesDateList.get(position - 1);
}
if (position < mMessagesDateList.size()) {
messageDate=mMessagesDateList.get(position);
}
}
if (null == messageDate) {
return null;
}
if ((null != prevMessageDate) && 0 == (prevMessageDate.getTime() - messageDate.getTime())) {
return null;
}
return dateDiff(messageDate,(mReferenceDate.getTime() - messageDate.getTime()) / AdapterUtils.MS_IN_DAY);
}
private void manageSelectionMode(final View contentView,final Event event,final int msgType){
final String eventId=event.eventId;
boolean isInSelectionMode=(null != mSelectedEvent);
boolean isSelected=isInSelectionMode && TextUtils.equals(eventId,mSelectedEvent.eventId);
contentView.findViewById(R.id.messagesAdapter_action_image).setVisibility(isSelected ? View.VISIBLE : View.GONE);
float alpha=(!isInSelectionMode || isSelected) ? 1.0f : 0.2f;
contentView.findViewById(R.id.messagesAdapter_body_view).setAlpha(alpha);
contentView.findViewById(R.id.messagesAdapter_avatars_list).setAlpha(alpha);
View urlsPreviewView=contentView.findViewById(R.id.messagesAdapter_urls_preview_list);
if (null != urlsPreviewView) {
urlsPreviewView.setAlpha(alpha);
}
TextView tsTextView=contentView.findViewById(R.id.messagesAdapter_timestamp);
if (isInSelectionMode && isSelected) {
tsTextView.setVisibility(View.VISIBLE);
}
if (Event.EVENT_TYPE_STICKER.equals(event.getType())) {
StickerMessage stickerMessage=JsonUtils.toStickerMessage(event.getContent());
if (null != stickerMessage && isInSelectionMode && isSelected) {
mHelper.showStickerDescription(contentView,stickerMessage);
}
}
if (!(event instanceof EventGroup)) {
contentView.findViewById(R.id.message_timestamp_layout).setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
if (mSelectedEvent != null && TextUtils.equals(eventId,mSelectedEvent.eventId)) {
onMessageClick(event,getEventText(contentView,event,msgType),contentView.findViewById(R.id.messagesAdapter_action_anchor));
}
 else {
onEventTap(event);
}
}
}
);
contentView.setOnLongClickListener(new View.OnLongClickListener(){
@Override public boolean onLongClick(View v){
if (!mIsSearchMode) {
onMessageClick(event,getEventText(contentView,event,msgType),contentView.findViewById(R.id.messagesAdapter_action_anchor));
onEventTap(event);
return true;
}
return false;
}
}
);
}
}
boolean mergeView(Event event,int position,boolean shouldBeMerged){
if (shouldBeMerged) {
shouldBeMerged=null == headerMessage(position);
}
return shouldBeMerged && !event.isCallEvent();
}
private String getEventText(View contentView,Event event,int msgType){
String text=null;
if (null != contentView) {
if ((ROW_TYPE_CODE == msgType) || (ROW_TYPE_TEXT == msgType)) {
final Message message=JsonUtils.toMessage(event.getContent());
text=message.body;
}
 else {
TextView bodyTextView=contentView.findViewById(R.id.messagesAdapter_body);
if (null != bodyTextView) {
text=bodyTextView.getText().toString();
}
}
}
return text;
}
private void addContentViewListeners(final View convertView,final View contentView,final int position,final int msgType){
contentView.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
if (null != mVectorMessagesAdapterEventsListener) {
if (position < getCount()) {
mVectorMessagesAdapterEventsListener.onContentClick(position);
}
}
}
}
);
contentView.setOnLongClickListener(new View.OnLongClickListener(){
@Override public boolean onLongClick(View v){
if (position < getCount()) {
MessageRow row=getItem(position);
Event event=row.getEvent();
if (!mIsSearchMode) {
onMessageClick(event,getEventText(contentView,event,msgType),convertView.findViewById(R.id.messagesAdapter_action_anchor));
onEventTap(event);
return true;
}
}
return true;
}
}
);
}
private void displayE2eIcon(View inflatedView,int position){
ImageView e2eIconView=inflatedView.findViewById(R.id.message_adapter_e2e_icon);
if (null != e2eIconView) {
View senderMargin=inflatedView.findViewById(R.id.e2e_sender_margin);
View senderNameView=inflatedView.findViewById(R.id.messagesAdapter_sender);
MessageRow row=getItem(position);
final Event event=row.getEvent();
if (mE2eIconByEventId.containsKey(event.eventId)) {
if (null != senderMargin) {
senderMargin.setVisibility(senderNameView.getVisibility());
}
e2eIconView.setVisibility(View.VISIBLE);
Object icon=mE2eIconByEventId.get(event.eventId);
if (icon instanceof Drawable) {
e2eIconView.setImageDrawable((Drawable)icon);
}
 else {
e2eIconView.setImageResource((int)icon);
}
int type=getItemViewType(position);
if ((type == ROW_TYPE_IMAGE) || (type == ROW_TYPE_VIDEO) || (type == ROW_TYPE_STICKER)) {
View bodyLayoutView=inflatedView.findViewById(R.id.messagesAdapter_body_layout);
ViewGroup.MarginLayoutParams bodyLayout=(ViewGroup.MarginLayoutParams)bodyLayoutView.getLayoutParams();
ViewGroup.MarginLayoutParams e2eIconViewLayout=(ViewGroup.MarginLayoutParams)e2eIconView.getLayoutParams();
e2eIconViewLayout.setMargins(bodyLayout.leftMargin,e2eIconViewLayout.topMargin,e2eIconViewLayout.rightMargin,e2eIconViewLayout.bottomMargin);
bodyLayout.setMargins(4,bodyLayout.topMargin,bodyLayout.rightMargin,bodyLayout.bottomMargin);
e2eIconView.setLayoutParams(e2eIconViewLayout);
bodyLayoutView.setLayoutParams(bodyLayout);
}
e2eIconView.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
if (null != mVectorMessagesAdapterEventsListener) {
mVectorMessagesAdapterEventsListener.onE2eIconClick(event,mE2eDeviceByEventId.get(event.eventId));
}
}
}
);
}
 else {
e2eIconView.setVisibility(View.GONE);
if (null != senderMargin) {
senderMargin.setVisibility(View.GONE);
}
}
}
}
private void displayE2eReRequest(View inflatedView,int position){
TextView reRequestE2EKeyTextView=inflatedView.findViewById(R.id.messagesAdapter_re_request_e2e_key);
if (reRequestE2EKeyTextView != null) {
MessageRow row=getItem(position);
final Event event=row.getEvent();
final String sessionId=MatrixSdkExtensionsKt.getSessionId(event);
if (sessionId != null && event.getCryptoError() != null && MXCryptoError.UNKNOWN_INBOUND_SESSION_ID_ERROR_CODE.equals(event.getCryptoError().errcode)) {
reRequestE2EKeyTextView.setVisibility(View.VISIBLE);
if (mSessionIdsWaitingForE2eReRequest.contains(sessionId)) {
reRequestE2EKeyTextView.setText(R.string.e2e_re_request_encryption_key_sent);
reRequestE2EKeyTextView.setOnClickListener(null);
reRequestE2EKeyTextView.setClickable(false);
}
 else {
reRequestE2EKeyTextView.setText(R.string.e2e_re_request_encryption_key);
reRequestE2EKeyTextView.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
mSessionIdsWaitingForE2eReRequest.add(sessionId);
if (mVectorMessagesAdapterEventsListener != null) {
mVectorMessagesAdapterEventsListener.onEventAction(event,null,R.id.ic_action_re_request_e2e_key);
}
notifyDataSetChanged();
}
}
);
}
}
 else {
reRequestE2EKeyTextView.setVisibility(View.GONE);
reRequestE2EKeyTextView.setOnClickListener(null);
if (sessionId != null && mSessionIdsWaitingForE2eReRequest.contains(sessionId)) {
if (mVectorMessagesAdapterEventsListener != null) {
mVectorMessagesAdapterEventsListener.onEventDecrypted();
}
mSessionIdsWaitingForE2eReRequest.remove(sessionId);
}
}
}
}
private void manageCryptoEvents(){
Map<String,Object> e2eIconByEventId=new HashMap<>();
Map<String,MXDeviceInfo> e2eDeviceInfoByEventId=new HashMap<>();
if (mIsRoomEncrypted && mSession.isCryptoEnabled()) {
for (int index=0; index < getCount(); index++) {
MessageRow row=getItem(index);
Event event=row.getEvent();
if (event.mSentState != Event.SentState.SENT) {
e2eIconByEventId.put(event.eventId,R.drawable.e2e_verified);
}
 else if (!event.isEncrypted()) {
e2eIconByEventId.put(event.eventId,mPadlockDrawable);
}
 else if (null != event.getCryptoError()) {
e2eIconByEventId.put(event.eventId,R.drawable.e2e_blocked);
}
 else {
EncryptedEventContent encryptedEventContent=JsonUtils.toEncryptedEventContent(event.getWireContent().getAsJsonObject());
if (TextUtils.equals(mSession.getCredentials().deviceId,encryptedEventContent.device_id) && TextUtils.equals(mSession.getMyUserId(),event.getSender())) {
e2eIconByEventId.put(event.eventId,R.drawable.e2e_verified);
MXDeviceInfo deviceInfo=mSession.getCrypto().deviceWithIdentityKey(encryptedEventContent.sender_key,event.getSender(),encryptedEventContent.algorithm);
if (null != deviceInfo) {
e2eDeviceInfoByEventId.put(event.eventId,deviceInfo);
}
}
 else {
MXDeviceInfo deviceInfo=mSession.getCrypto().deviceWithIdentityKey(encryptedEventContent.sender_key,event.getSender(),encryptedEventContent.algorithm);
if (null != deviceInfo) {
e2eDeviceInfoByEventId.put(event.eventId,deviceInfo);
if (deviceInfo.isVerified()) {
e2eIconByEventId.put(event.eventId,R.drawable.e2e_verified);
}
 else if (deviceInfo.isBlocked()) {
e2eIconByEventId.put(event.eventId,R.drawable.e2e_blocked);
}
 else {
e2eIconByEventId.put(event.eventId,R.drawable.e2e_warning);
}
}
 else {
e2eIconByEventId.put(event.eventId,R.drawable.e2e_warning);
}
}
}
}
}
mE2eDeviceByEventId=e2eDeviceInfoByEventId;
mE2eIconByEventId=e2eIconByEventId;
}
private String mReadMarkerEventId;
private boolean mCanShowReadMarker=true;
private ReadMarkerListener mReadMarkerListener;
@Override public void resetReadMarker(){
Log.d(LOG_TAG,"resetReadMarker");
mReadMarkerEventId=null;
}
@Override public void updateReadMarker(final String readMarkerEventId,final String readReceiptEventId){
mReadMarkerEventId=readMarkerEventId;
mReadReceiptEventId=readReceiptEventId;
if (readMarkerEventId != null && !readMarkerEventId.equals(mReadMarkerEventId)) {
Log.d(LOG_TAG,"updateReadMarker read marker id has changed: " + readMarkerEventId);
mCanShowReadMarker=true;
notifyDataSetChanged();
}
}
public interface ReadMarkerListener {
void onReadMarkerDisplayed(Event event,View view);
}
public void setReadMarkerListener(final ReadMarkerListener listener){
mReadMarkerListener=listener;
}
public void setImageGetter(VectorImageGetter imageGetter){
mImageGetter=imageGetter;
mHelper.setImageGetter(imageGetter);
}
private void animateReadMarkerView(final Event event,final View readMarkerView){
if (readMarkerView != null && mCanShowReadMarker) {
mCanShowReadMarker=false;
if (readMarkerView.getAnimation() == null) {
final Animation animation=AnimationUtils.loadAnimation(getContext(),R.anim.unread_marker_anim);
animation.setStartOffset(500);
animation.setAnimationListener(new Animation.AnimationListener(){
@Override public void onAnimationStart(Animation animation){
}
@Override public void onAnimationEnd(Animation animation){
readMarkerView.setVisibility(View.GONE);
}
@Override public void onAnimationRepeat(Animation animation){
}
}
);
readMarkerView.setAnimation(animation);
}
final Handler uiHandler=new Handler(Looper.getMainLooper());
uiHandler.post(new Runnable(){
@Override public void run(){
if (readMarkerView != null && readMarkerView.getAnimation() != null) {
readMarkerView.setVisibility(View.VISIBLE);
readMarkerView.getAnimation().start();
uiHandler.postDelayed(new Runnable(){
@Override public void run(){
if (mReadMarkerListener != null) {
mReadMarkerListener.onReadMarkerDisplayed(event,readMarkerView);
}
}
}
,readMarkerView.getAnimation().getDuration() + readMarkerView.getAnimation().getStartOffset());
}
 else {
if (mReadMarkerListener != null) {
mReadMarkerListener.onReadMarkerDisplayed(event,readMarkerView);
}
}
}
}
);
}
}
private boolean isReadMarkedEvent(Event event){
if ((null != mReadMarkerEventId) && (mHiddenEventIds.contains(mReadMarkerEventId) && (event instanceof EventGroup))) {
return ((EventGroup)event).contains(mReadMarkerEventId);
}
return event.eventId.equals(mReadMarkerEventId);
}
private void handleReadMarker(final View inflatedView,final int position){
final MessageRow row=getItem(position);
final Event event=row != null ? row.getEvent() : null;
final View readMarkerView=inflatedView.findViewById(R.id.message_read_marker);
if (readMarkerView != null) {
if (event != null && !event.isDummyEvent() && mReadMarkerEventId != null && mCanShowReadMarker && isReadMarkedEvent(event) && !mIsPreviewMode && !mIsSearchMode && (!mReadMarkerEventId.equals(mReadReceiptEventId) || position < getCount() - 1)) {
Log.d(LOG_TAG," Display read marker " + event.eventId + " mReadMarkerEventId"+ mReadMarkerEventId);
animateReadMarkerView(event,readMarkerView);
}
 else if (View.GONE != readMarkerView.getVisibility()) {
Log.v(LOG_TAG,"hide read marker");
readMarkerView.setVisibility(View.GONE);
}
}
}
private void setReadMarker(View convertView,MessageRow row,boolean isMergedView,View avatarLayoutView,View bodyLayoutView){
Event event=row.getEvent();
View highlightMakerView=convertView.findViewById(R.id.messagesAdapter_highlight_message_marker);
View readMarkerView=convertView.findViewById(R.id.message_read_marker);
if (null != highlightMakerView) {
ViewGroup.MarginLayoutParams highlightMakerLayout=(ViewGroup.MarginLayoutParams)highlightMakerView.getLayoutParams();
highlightMakerLayout.setMargins(5,highlightMakerLayout.topMargin,5,highlightMakerLayout.bottomMargin);
if (TextUtils.equals(mHighlightedEventId,event.eventId)) {
if (mIsUnreadViewMode) {
highlightMakerView.setBackgroundColor(ContextCompat.getColor(mContext,android.R.color.transparent));
if (readMarkerView != null) {
animateReadMarkerView(event,readMarkerView);
}
}
 else {
ViewGroup.LayoutParams avatarLayout=avatarLayoutView.getLayoutParams();
ViewGroup.MarginLayoutParams bodyLayout=(ViewGroup.MarginLayoutParams)bodyLayoutView.getLayoutParams();
if (isMergedView) {
highlightMakerLayout.setMargins(avatarLayout.width + 5,highlightMakerLayout.topMargin,5,highlightMakerLayout.bottomMargin);
}
 else {
highlightMakerLayout.setMargins(5,highlightMakerLayout.topMargin,5,highlightMakerLayout.bottomMargin);
}
bodyLayout.setMargins(4,bodyLayout.topMargin,4,bodyLayout.bottomMargin);
highlightMakerView.setBackgroundColor(ContextCompat.getColor(mContext,R.color.vector_green_color));
}
}
 else {
highlightMakerView.setBackgroundColor(ContextCompat.getColor(mContext,android.R.color.transparent));
}
highlightMakerView.setLayoutParams(highlightMakerLayout);
}
}
@SuppressLint("NewApi") private void onMessageClick(final Event event,final String textMsg,final View anchorView){
final PopupMenu popup=(Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) ? new PopupMenu(mContext,anchorView,Gravity.END) : new PopupMenu(mContext,anchorView);
popup.getMenuInflater().inflate(R.menu.vector_room_message_settings,popup.getMenu());
try {
Field[] fields=popup.getClass().getDeclaredFields();
for (Field field : fields) {
if ("mPopup".equals(field.getName())) {
field.setAccessible(true);
Object menuPopupHelper=field.get(popup);
Class<?> classPopupHelper=Class.forName(menuPopupHelper.getClass().getName());
Method setForceIcons=classPopupHelper.getMethod("setForceShowIcon",boolean.class);
setForceIcons.invoke(menuPopupHelper,true);
break;
}
}
}
 catch (Exception e) {
Log.e(LOG_TAG,"onMessageClick : force to display the icons failed " + e.getLocalizedMessage(),e);
}
Menu menu=popup.getMenu();
ThemeUtils.INSTANCE.tintMenuIcons(menu,ThemeUtils.INSTANCE.getColor(mContext,R.attr.settings_icon_tint_color));
for (int i=0; i < menu.size(); i++) {
menu.getItem(i).setVisible(false);
}
menu.findItem(R.id.ic_action_view_source).setVisible(true);
menu.findItem(R.id.ic_action_view_decrypted_source).setVisible(event.isEncrypted() && (null != event.getClearEvent()));
menu.findItem(R.id.ic_action_vector_permalink).setVisible(true);
if (!TextUtils.isEmpty(textMsg)) {
menu.findItem(R.id.ic_action_vector_copy).setVisible(true);
menu.findItem(R.id.ic_action_vector_quote).setVisible(true);
}
if (event.isUploadingMedias(mMediasCache)) {
menu.findItem(R.id.ic_action_vector_cancel_upload).setVisible(true);
}
if (event.isDownloadingMedias(mMediasCache)) {
menu.findItem(R.id.ic_action_vector_cancel_download).setVisible(true);
}
if (event.canBeResent()) {
menu.findItem(R.id.ic_action_vector_resend_message).setVisible(true);
if (event.isUndelivered() || event.isUnknownDevice()) {
menu.findItem(R.id.ic_action_vector_redact_message).setVisible(true);
}
}
 else if (event.mSentState == Event.SentState.SENT) {
boolean canBeRedacted=!mIsPreviewMode && !TextUtils.equals(event.getType(),Event.EVENT_TYPE_MESSAGE_ENCRYPTION);
if (canBeRedacted) {
if (TextUtils.equals(event.sender,mSession.getMyUserId())) {
canBeRedacted=true;
}
 else {
Room room=mSession.getDataHandler().getRoom(event.roomId);
if ((null != room) && (null != room.getState().getPowerLevels())) {
PowerLevels powerLevels=room.getState().getPowerLevels();
canBeRedacted=powerLevels.getUserPowerLevel(mSession.getMyUserId()) >= powerLevels.redact;
}
}
}
menu.findItem(R.id.ic_action_vector_redact_message).setVisible(canBeRedacted);
if (Event.EVENT_TYPE_MESSAGE.equals(event.getType())) {
Message message=JsonUtils.toMessage(event.getContentAsJsonObject());
menu.findItem(R.id.ic_action_vector_share).setVisible(!mIsRoomEncrypted);
menu.findItem(R.id.ic_action_vector_forward).setVisible(true);
if (Message.MSGTYPE_IMAGE.equals(message.msgtype) || Message.MSGTYPE_VIDEO.equals(message.msgtype) || Message.MSGTYPE_FILE.equals(message.msgtype)) {
menu.findItem(R.id.ic_action_vector_save).setVisible(true);
}
menu.findItem(R.id.ic_action_vector_report).setVisible(!mIsPreviewMode && !TextUtils.equals(event.sender,mSession.getMyUserId()));
}
}
menu.findItem(R.id.ic_action_device_verification).setVisible(mE2eIconByEventId.containsKey(event.eventId));
popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){
@Override public boolean onMenuItemClick(final MenuItem item){
if (null != mVectorMessagesAdapterEventsListener) {
mVectorMessagesAdapterEventsListener.onEventAction(event,textMsg,item.getItemId());
}
cancelSelectionMode();
return true;
}
}
);
try {
popup.show();
}
 catch (Exception e) {
Log.e(LOG_TAG," popup.show failed " + e.getMessage(),e);
}
}
private final List<EventGroup> mEventGroups=new ArrayList<>();
private boolean addToEventGroupToFront(MessageRow row){
MessageRow eventGroupRow=null;
if (supportMessageRowMerge(row)) {
if ((getCount() > 0) && (getItem(0).getEvent() instanceof EventGroup) && ((EventGroup)getItem(0).getEvent()).canAddRow(row)) {
eventGroupRow=getItem(0);
}
if (null == eventGroupRow) {
eventGroupRow=new MessageRow(new EventGroup(mHiddenEventIds),null);
mEventGroups.add((EventGroup)eventGroupRow.getEvent());
super.insert(eventGroupRow,0);
mEventRowMap.put(eventGroupRow.getEvent().eventId,row);
}
((EventGroup)eventGroupRow.getEvent()).addToFront(row);
updateHighlightedEventId();
}
return (null != eventGroupRow);
}
private void addToEventGroup(MessageRow row){
if (supportMessageRowMerge(row)) {
MessageRow eventGroupRow=null;
for (int i=getCount() - 1; i >= 0; i--) {
MessageRow curRow=getItem(i);
if (curRow.getEvent() instanceof EventGroup) {
if (((EventGroup)curRow.getEvent()).canAddRow(row)) {
eventGroupRow=curRow;
}
break;
}
 else if (!TextUtils.equals(curRow.getEvent().getType(),Event.EVENT_TYPE_STATE_ROOM_MEMBER)) {
break;
}
}
if (null == eventGroupRow) {
eventGroupRow=new MessageRow(new EventGroup(mHiddenEventIds),null);
super.add(eventGroupRow);
mEventGroups.add((EventGroup)eventGroupRow.getEvent());
mEventRowMap.put(eventGroupRow.getEvent().eventId,eventGroupRow);
}
((EventGroup)eventGroupRow.getEvent()).add(row);
updateHighlightedEventId();
}
}
private void removeFromEventGroup(MessageRow row){
if (supportMessageRowMerge(row)) {
String eventId=row.getEvent().eventId;
for (EventGroup eventGroup : mEventGroups) {
if (eventGroup.contains(eventId)) {
eventGroup.removeByEventId(eventId);
if (eventGroup.isEmpty()) {
mEventGroups.remove(eventGroup);
super.remove(row);
updateHighlightedEventId();
return;
}
}
}
}
}
private void updateHighlightedEventId(){
if (null != mSearchedEventId) {
if (!mEventGroups.isEmpty() && mHiddenEventIds.contains(mSearchedEventId)) {
for (EventGroup eventGroup : mEventGroups) {
if (eventGroup.contains(mSearchedEventId)) {
mHighlightedEventId=eventGroup.eventId;
return;
}
}
}
}
mHighlightedEventId=mSearchedEventId;
}
private void checkEventGroupsMerge(MessageRow deletedRow,int position){
if ((position > 0) && (position < getCount() - 1) && !EventGroup.isSupported(deletedRow)) {
Event eventBef=getItem(position - 1).getEvent();
Event eventAfter=getItem(position).getEvent();
if (TextUtils.equals(eventBef.getType(),Event.EVENT_TYPE_STATE_ROOM_MEMBER) && eventAfter instanceof EventGroup) {
EventGroup nextEventGroup=(EventGroup)eventAfter;
EventGroup eventGroupBefore=null;
for (int i=position - 1; i >= 0; i--) {
if (getItem(i).getEvent() instanceof EventGroup) {
eventGroupBefore=(EventGroup)getItem(i).getEvent();
break;
}
}
if (null != eventGroupBefore) {
List<MessageRow> nextRows=new ArrayList<>(nextEventGroup.getRows());
if (eventGroupBefore.canAddRow(nextRows.get(0))) {
for (MessageRow rowToAdd : nextRows) {
eventGroupBefore.add(rowToAdd);
}
}
MessageRow row=mEventRowMap.get(nextEventGroup.eventId);
mEventGroups.remove(nextEventGroup);
super.remove(row);
updateHighlightedEventId();
}
}
}
}
}
