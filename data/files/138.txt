package im.vector.adapters;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.TextView;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;
import im.vector.R;
import im.vector.util.CountryPhoneData;
public class CountryAdapter extends RecyclerView.Adapter<CountryAdapter.CountryViewHolder> implements Filterable {
  private final List<CountryPhoneData> mHumanCountryData;
  private final List<CountryPhoneData> mFilteredList;
  private final boolean mWithIndicator;
  private final OnSelectCountryListener mListener;
  public CountryAdapter(  final List<CountryPhoneData> countries,  final boolean withIndicator,  final OnSelectCountryListener listener){
    mHumanCountryData=countries;
    mFilteredList=new ArrayList<>(countries);
    mWithIndicator=withIndicator;
    mListener=listener;
  }
  @Override public CountryViewHolder onCreateViewHolder(  ViewGroup viewGroup,  int viewType){
    final LayoutInflater layoutInflater=LayoutInflater.from(viewGroup.getContext());
    final View itemView=layoutInflater.inflate(R.layout.item_country,viewGroup,false);
    return new CountryAdapter.CountryViewHolder(itemView);
  }
  @Override public void onBindViewHolder(  CountryAdapter.CountryViewHolder viewHolder,  int position){
    viewHolder.populateViews(mFilteredList.get(position));
  }
  @Override public int getItemCount(){
    return mFilteredList.size();
  }
  @Override public Filter getFilter(){
    return new Filter(){
      @Override protected FilterResults performFiltering(      CharSequence constraint){
        mFilteredList.clear();
        final FilterResults results=new FilterResults();
        if (TextUtils.isEmpty(constraint)) {
          mFilteredList.addAll(mHumanCountryData);
        }
 else {
          final String filterPattern=constraint.toString().trim();
          for (          final CountryPhoneData country : mHumanCountryData) {
            if (Pattern.compile(Pattern.quote(filterPattern),Pattern.CASE_INSENSITIVE).matcher(country.getCountryName() + country.getCallingCode()).find()) {
              mFilteredList.add(country);
            }
          }
        }
        results.values=mFilteredList;
        results.count=mFilteredList.size();
        return results;
      }
      @Override protected void publishResults(      CharSequence constraint,      FilterResults results){
        notifyDataSetChanged();
      }
    }
;
  }
class CountryViewHolder extends RecyclerView.ViewHolder {
    final TextView vCountryName;
    final TextView vCallingCode;
    private CountryViewHolder(    final View itemView){
      super(itemView);
      vCountryName=(TextView)itemView.findViewById(R.id.country_name);
      vCallingCode=(TextView)itemView.findViewById(R.id.country_calling_code);
    }
    private void populateViews(    final CountryPhoneData country){
      vCountryName.setText(country.getCountryName());
      if (mWithIndicator) {
        vCallingCode.setText(country.getFormattedCallingCode());
      }
      itemView.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          mListener.onSelectCountry(country);
        }
      }
);
    }
  }
public interface OnSelectCountryListener {
    void onSelectCountry(    CountryPhoneData country);
  }
}
