package org.apache.catalina.authenticator;
import java.io.IOException;
import java.security.Principal;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import org.apache.catalina.Container;
import org.apache.catalina.Context;
import org.apache.catalina.Engine;
import org.apache.catalina.LifecycleException;
import org.apache.catalina.Manager;
import org.apache.catalina.Realm;
import org.apache.catalina.Session;
import org.apache.catalina.SessionListener;
import org.apache.catalina.connector.Request;
import org.apache.catalina.connector.Response;
import org.apache.catalina.valves.ValveBase;
import org.apache.tomcat.util.res.StringManager;
public class SingleSignOn extends ValveBase {
  private static final StringManager sm=StringManager.getManager(SingleSignOn.class);
  private Engine engine;
  public SingleSignOn(){
    super(true);
  }
  protected Map<String,SingleSignOnEntry> cache=new ConcurrentHashMap<>();
  private boolean requireReauthentication=false;
  private String cookieDomain;
  public String getCookieDomain(){
    return cookieDomain;
  }
  public void setCookieDomain(  String cookieDomain){
    if (cookieDomain != null && cookieDomain.trim().length() == 0) {
      this.cookieDomain=null;
    }
 else {
      this.cookieDomain=cookieDomain;
    }
  }
  public boolean getRequireReauthentication(){
    return requireReauthentication;
  }
  public void setRequireReauthentication(  boolean required){
    this.requireReauthentication=required;
  }
  @Override public void invoke(  Request request,  Response response) throws IOException, ServletException {
    request.removeNote(Constants.REQ_SSOID_NOTE);
    if (containerLog.isDebugEnabled()) {
      containerLog.debug(sm.getString("singleSignOn.debug.invoke",request.getRequestURI()));
    }
    if (request.getUserPrincipal() != null) {
      if (containerLog.isDebugEnabled()) {
        containerLog.debug(sm.getString("singleSignOn.debug.hasPrincipal",request.getUserPrincipal().getName()));
      }
      getNext().invoke(request,response);
      return;
    }
    if (containerLog.isDebugEnabled()) {
      containerLog.debug(sm.getString("singleSignOn.debug.cookieCheck"));
    }
    Cookie cookie=null;
    Cookie cookies[]=request.getCookies();
    if (cookies != null) {
      for (int i=0; i < cookies.length; i++) {
        if (Constants.SINGLE_SIGN_ON_COOKIE.equals(cookies[i].getName())) {
          cookie=cookies[i];
          break;
        }
      }
    }
    if (cookie == null) {
      if (containerLog.isDebugEnabled()) {
        containerLog.debug(sm.getString("singleSignOn.debug.cookieNotFound"));
      }
      getNext().invoke(request,response);
      return;
    }
    if (containerLog.isDebugEnabled()) {
      containerLog.debug(sm.getString("singleSignOn.debug.principalCheck",cookie.getValue()));
    }
    SingleSignOnEntry entry=cache.get(cookie.getValue());
    if (entry != null) {
      if (containerLog.isDebugEnabled()) {
        containerLog.debug(sm.getString("singleSignOn.debug.principalFound",entry.getPrincipal() != null ? entry.getPrincipal().getName() : "",entry.getAuthType()));
      }
      request.setNote(Constants.REQ_SSOID_NOTE,cookie.getValue());
      if (!getRequireReauthentication()) {
        request.setAuthType(entry.getAuthType());
        request.setUserPrincipal(entry.getPrincipal());
      }
    }
 else {
      if (containerLog.isDebugEnabled()) {
        containerLog.debug(sm.getString("singleSignOn.debug.principalNotFound",cookie.getValue()));
      }
      cookie.setValue("REMOVE");
      cookie.setMaxAge(0);
      cookie.setPath("/");
      String domain=getCookieDomain();
      if (domain != null) {
        cookie.setDomain(domain);
      }
      cookie.setSecure(request.isSecure());
      if (request.getServletContext().getSessionCookieConfig().isHttpOnly() || request.getContext().getUseHttpOnly()) {
        cookie.setHttpOnly(true);
      }
      response.addCookie(cookie);
    }
    getNext().invoke(request,response);
  }
  public void sessionDestroyed(  String ssoId,  Session session){
    if (!getState().isAvailable()) {
      return;
    }
    if (((session.getMaxInactiveInterval() > 0) && (session.getIdleTimeInternal() >= session.getMaxInactiveInterval() * 1000)) || (!session.getManager().getContext().getState().isAvailable())) {
      if (containerLog.isDebugEnabled()) {
        containerLog.debug(sm.getString("singleSignOn.debug.sessionTimeout",ssoId,session));
      }
      removeSession(ssoId,session);
    }
 else {
      if (containerLog.isDebugEnabled()) {
        containerLog.debug(sm.getString("singleSignOn.debug.sessionLogout",ssoId,session));
      }
      removeSession(ssoId,session);
      if (cache.containsKey(ssoId)) {
        deregister(ssoId);
      }
    }
  }
  protected boolean associate(  String ssoId,  Session session){
    SingleSignOnEntry sso=cache.get(ssoId);
    if (sso == null) {
      if (containerLog.isDebugEnabled()) {
        containerLog.debug(sm.getString("singleSignOn.debug.associateFail",ssoId,session));
      }
      return false;
    }
 else {
      if (containerLog.isDebugEnabled()) {
        containerLog.debug(sm.getString("singleSignOn.debug.associate",ssoId,session));
      }
      sso.addSession(this,ssoId,session);
      return true;
    }
  }
  protected void deregister(  String ssoId){
    SingleSignOnEntry sso=cache.remove(ssoId);
    if (sso == null) {
      if (containerLog.isDebugEnabled()) {
        containerLog.debug(sm.getString("singleSignOn.debug.deregisterFail",ssoId));
      }
      return;
    }
    Set<SingleSignOnSessionKey> ssoKeys=sso.findSessions();
    if (ssoKeys.size() == 0) {
      if (containerLog.isDebugEnabled()) {
        containerLog.debug(sm.getString("singleSignOn.debug.deregisterNone",ssoId));
      }
    }
    for (    SingleSignOnSessionKey ssoKey : ssoKeys) {
      if (containerLog.isDebugEnabled()) {
        containerLog.debug(sm.getString("singleSignOn.debug.deregister",ssoKey,ssoId));
      }
      expire(ssoKey);
    }
  }
  private void expire(  SingleSignOnSessionKey key){
    if (engine == null) {
      containerLog.warn(sm.getString("singleSignOn.sessionExpire.engineNull",key));
      return;
    }
    Container host=engine.findChild(key.getHostName());
    if (host == null) {
      containerLog.warn(sm.getString("singleSignOn.sessionExpire.hostNotFound",key));
      return;
    }
    Context context=(Context)host.findChild(key.getContextName());
    if (context == null) {
      containerLog.warn(sm.getString("singleSignOn.sessionExpire.contextNotFound",key));
      return;
    }
    Manager manager=context.getManager();
    if (manager == null) {
      containerLog.warn(sm.getString("singleSignOn.sessionExpire.managerNotFound",key));
      return;
    }
    Session session=null;
    try {
      session=manager.findSession(key.getSessionId());
    }
 catch (    IOException e) {
      containerLog.warn(sm.getString("singleSignOn.sessionExpire.managerError",key),e);
      return;
    }
    if (session == null) {
      containerLog.warn(sm.getString("singleSignOn.sessionExpire.sessionNotFound",key));
      return;
    }
    session.expire();
  }
  protected boolean reauthenticate(  String ssoId,  Realm realm,  Request request){
    if (ssoId == null || realm == null) {
      return false;
    }
    boolean reauthenticated=false;
    SingleSignOnEntry entry=cache.get(ssoId);
    if (entry != null && entry.getCanReauthenticate()) {
      String username=entry.getUsername();
      if (username != null) {
        Principal reauthPrincipal=realm.authenticate(username,entry.getPassword());
        if (reauthPrincipal != null) {
          reauthenticated=true;
          request.setAuthType(entry.getAuthType());
          request.setUserPrincipal(reauthPrincipal);
        }
      }
    }
    return reauthenticated;
  }
  protected void register(  String ssoId,  Principal principal,  String authType,  String username,  String password){
    if (containerLog.isDebugEnabled()) {
      containerLog.debug(sm.getString("singleSignOn.debug.register",ssoId,principal != null ? principal.getName() : "",authType));
    }
    cache.put(ssoId,new SingleSignOnEntry(principal,authType,username,password));
  }
  protected boolean update(  String ssoId,  Principal principal,  String authType,  String username,  String password){
    SingleSignOnEntry sso=cache.get(ssoId);
    if (sso != null && !sso.getCanReauthenticate()) {
      if (containerLog.isDebugEnabled()) {
        containerLog.debug(sm.getString("singleSignOn.debug.update",ssoId,authType));
      }
      sso.updateCredentials(principal,authType,username,password);
      return true;
    }
    return false;
  }
  protected void removeSession(  String ssoId,  Session session){
    if (containerLog.isDebugEnabled()) {
      containerLog.debug(sm.getString("singleSignOn.debug.removeSession",session,ssoId));
    }
    SingleSignOnEntry entry=cache.get(ssoId);
    if (entry == null) {
      return;
    }
    entry.removeSession(session);
    if (entry.findSessions().size() == 0) {
      deregister(ssoId);
    }
  }
  protected SessionListener getSessionListener(  String ssoId){
    return new SingleSignOnListener(ssoId);
  }
  @Override protected synchronized void startInternal() throws LifecycleException {
    Container c=getContainer();
    while (c != null && !(c instanceof Engine)) {
      c=c.getParent();
    }
    if (c instanceof Engine) {
      engine=(Engine)c;
    }
    super.startInternal();
  }
  @Override protected synchronized void stopInternal() throws LifecycleException {
    super.stopInternal();
    engine=null;
  }
}
