package org.elasticsearch.cluster.coordination;
import org.elasticsearch.cluster.node.DiscoveryNode;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.io.stream.StreamOutput;
import org.elasticsearch.transport.TransportResponse;
import java.io.IOException;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
public class PeersResponse extends TransportResponse {
  private final Optional<DiscoveryNode> masterNode;
  private final List<DiscoveryNode> knownPeers;
  private final long term;
  public PeersResponse(  Optional<DiscoveryNode> masterNode,  List<DiscoveryNode> knownPeers,  long term){
  }
  public PeersResponse(  StreamInput in) throws IOException {
  }
  @Override public void writeTo(  StreamOutput out) throws IOException {
    super.writeTo(out);
    out.writeOptionalWriteable(masterNode.orElse(null));
    out.writeList(knownPeers);
    out.writeLong(term);
  }
  public Optional<DiscoveryNode> getMasterNode(){
    return masterNode;
  }
  public List<DiscoveryNode> getKnownPeers(){
    return knownPeers;
  }
  public long getTerm(){
    return term;
  }
  @Override public String toString(){
    return "PeersResponse{" + "masterNode=" + masterNode + ", knownPeers="+ knownPeers+ ", term="+ term+ '}';
  }
  @Override public boolean equals(  Object o){
    if (this == o)     return true;
    if (o == null || getClass() != o.getClass())     return false;
    PeersResponse that=(PeersResponse)o;
    return term == that.term && Objects.equals(masterNode,that.masterNode) && Objects.equals(knownPeers,that.knownPeers);
  }
  @Override public int hashCode(){
    return Objects.hash(masterNode,knownPeers,term);
  }
}
