package org.elasticsearch.discovery.zen.fd;
import org.elasticsearch.ElasticSearchIllegalStateException;
import org.elasticsearch.cluster.node.DiscoveryNode;
import org.elasticsearch.cluster.node.DiscoveryNodes;
import org.elasticsearch.common.component.AbstractComponent;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.io.stream.StreamOutput;
import org.elasticsearch.common.io.stream.Streamable;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.unit.TimeValue;
import org.elasticsearch.discovery.zen.DiscoveryNodesProvider;
import org.elasticsearch.threadpool.ThreadPool;
import org.elasticsearch.transport.*;
import java.io.IOException;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicBoolean;
import org.elasticsearch.common.unit.TimeValue.*;
import org.elasticsearch.transport.TransportRequestOptions.*;
public class MasterFaultDetection extends AbstractComponent {
public static interface Listener {
    void onMasterFailure(    DiscoveryNode masterNode,    String reason);
    void onDisconnectedFromMaster();
  }
  private final ThreadPool threadPool;
  private final TransportService transportService;
  private final DiscoveryNodesProvider nodesProvider;
  private final CopyOnWriteArrayList<Listener> listeners=new CopyOnWriteArrayList<Listener>();
  private final boolean connectOnNetworkDisconnect;
  private final TimeValue pingInterval;
  private final TimeValue pingRetryTimeout;
  private final int pingRetryCount;
  private final boolean registerConnectionListener;
  private final FDConnectionListener connectionListener;
  private volatile MasterPinger masterPinger;
  private final Object masterNodeMutex=new Object();
  private volatile DiscoveryNode masterNode;
  private volatile int retryCount;
  private final AtomicBoolean notifiedMasterFailure=new AtomicBoolean();
  public MasterFaultDetection(  Settings settings,  ThreadPool threadPool,  TransportService transportService,  DiscoveryNodesProvider nodesProvider){
    super(settings);
    this.threadPool=threadPool;
    this.transportService=transportService;
    this.nodesProvider=nodesProvider;
    this.connectOnNetworkDisconnect=componentSettings.getAsBoolean("connect_on_network_disconnect",false);
    this.pingInterval=componentSettings.getAsTime("ping_interval",timeValueSeconds(1));
    this.pingRetryTimeout=componentSettings.getAsTime("ping_timeout",timeValueSeconds(30));
    this.pingRetryCount=componentSettings.getAsInt("ping_retries",3);
    this.registerConnectionListener=componentSettings.getAsBoolean("register_connection_listener",true);
    logger.debug("[master] uses ping_interval [{}], ping_timeout [{}], ping_retries [{}]",pingInterval,pingRetryTimeout,pingRetryCount);
    this.connectionListener=new FDConnectionListener();
    if (registerConnectionListener) {
      transportService.addConnectionListener(connectionListener);
    }
    transportService.registerHandler(MasterPingRequestHandler.ACTION,new MasterPingRequestHandler());
  }
  public DiscoveryNode masterNode(){
    return this.masterNode;
  }
  public void addListener(  Listener listener){
    listeners.add(listener);
  }
  public void removeListener(  Listener listener){
    listeners.remove(listener);
  }
  public void restart(  DiscoveryNode masterNode,  String reason){
synchronized (masterNodeMutex) {
      if (logger.isDebugEnabled()) {
        logger.debug("[master] restarting fault detection against master [{}], reason [{}]",masterNode,reason);
      }
      innerStop();
      innerStart(masterNode);
    }
  }
  public void start(  final DiscoveryNode masterNode,  String reason){
synchronized (masterNodeMutex) {
      if (logger.isDebugEnabled()) {
        logger.debug("[master] starting fault detection against master [{}], reason [{}]",masterNode,reason);
      }
      innerStart(masterNode);
    }
  }
  private void innerStart(  final DiscoveryNode masterNode){
    this.masterNode=masterNode;
    this.retryCount=0;
    this.notifiedMasterFailure.set(false);
    try {
      transportService.connectToNode(masterNode);
    }
 catch (    final Exception e) {
      notifyMasterFailure(masterNode,"failed to perform initial connect [" + e.getMessage() + "]");
      return;
    }
    if (masterPinger != null) {
      masterPinger.stop();
    }
    this.masterPinger=new MasterPinger();
    threadPool.schedule(masterPinger,pingInterval);
  }
  public void stop(  String reason){
synchronized (masterNodeMutex) {
      if (masterNode != null) {
        if (logger.isDebugEnabled()) {
          logger.debug("[master] stopping fault detection against master [{}], reason [{}]",masterNode,reason);
        }
      }
      innerStop();
    }
  }
  private void innerStop(){
    this.retryCount=0;
    if (masterPinger != null) {
      masterPinger.stop();
      masterPinger=null;
    }
    this.masterNode=null;
  }
  public void close(){
    stop("closing");
    this.listeners.clear();
    transportService.removeConnectionListener(connectionListener);
    transportService.removeHandler(MasterPingRequestHandler.ACTION);
  }
  private void handleTransportDisconnect(  DiscoveryNode node){
synchronized (masterNodeMutex) {
      if (!node.equals(this.masterNode)) {
        return;
      }
      if (connectOnNetworkDisconnect) {
        try {
          transportService.connectToNode(node);
        }
 catch (        Exception e) {
          logger.trace("[master] [{}] transport disconnected (with verified connect)",masterNode);
          notifyMasterFailure(masterNode,"transport disconnected (with verified connect)");
        }
      }
 else {
        logger.trace("[master] [{}] transport disconnected",node);
        notifyMasterFailure(node,"transport disconnected");
      }
    }
  }
  private void notifyDisconnectedFromMaster(){
    threadPool.cached().execute(new Runnable(){
      @Override public void run(){
        for (        Listener listener : listeners) {
          listener.onDisconnectedFromMaster();
        }
      }
    }
);
  }
  private void notifyMasterFailure(  final DiscoveryNode masterNode,  final String reason){
    if (notifiedMasterFailure.compareAndSet(false,true)) {
      threadPool.cached().execute(new Runnable(){
        @Override public void run(){
          for (          Listener listener : listeners) {
            listener.onMasterFailure(masterNode,reason);
          }
        }
      }
);
      stop("master failure, " + reason);
    }
  }
private class FDConnectionListener implements TransportConnectionListener {
    @Override public void onNodeConnected(    DiscoveryNode node){
    }
    @Override public void onNodeDisconnected(    DiscoveryNode node){
      handleTransportDisconnect(node);
    }
  }
private class MasterPinger implements Runnable {
    private volatile boolean running=true;
    public void stop(){
      this.running=false;
    }
    @Override public void run(){
      if (!running) {
        return;
      }
      final DiscoveryNode masterToPing=masterNode;
      if (masterToPing == null) {
        threadPool.schedule(MasterPinger.this,pingInterval);
        return;
      }
      transportService.sendRequest(masterToPing,MasterPingRequestHandler.ACTION,new MasterPingRequest(nodesProvider.nodes().localNode().id(),masterToPing.id()),options().withTimeout(pingRetryTimeout),new BaseTransportResponseHandler<MasterPingResponseResponse>(){
        @Override public MasterPingResponseResponse newInstance(){
          return new MasterPingResponseResponse();
        }
        @Override public void handleResponse(        MasterPingResponseResponse response){
          if (!running) {
            return;
          }
          MasterFaultDetection.this.retryCount=0;
          if (masterToPing.equals(MasterFaultDetection.this.masterNode())) {
            if (!response.connectedToMaster) {
              logger.trace("[master] [{}] does not have us registered with it...",masterToPing);
              notifyDisconnectedFromMaster();
            }
            threadPool.schedule(MasterPinger.this,pingInterval);
          }
        }
        @Override public void handleException(        TransportException exp){
          if (!running) {
            return;
          }
synchronized (masterNodeMutex) {
            if (masterToPing.equals(MasterFaultDetection.this.masterNode())) {
              int retryCount=++MasterFaultDetection.this.retryCount;
              logger.trace("[master] failed to ping [{}], retry [{}] out of [{}]",exp,masterNode,retryCount,pingRetryCount);
              if (retryCount >= pingRetryCount) {
                logger.debug("[master] failed to ping [{}], tried [{}] times, each with maximum [{}] timeout",masterNode,pingRetryCount,pingRetryTimeout);
                notifyMasterFailure(masterToPing,"failed to ping, tried [" + pingRetryCount + "] times, each with  maximum ["+ pingRetryTimeout+ "] timeout");
              }
 else {
                transportService.sendRequest(masterToPing,MasterPingRequestHandler.ACTION,new MasterPingRequest(nodesProvider.nodes().localNode().id(),masterToPing.id()),options().withTimeout(pingRetryTimeout),this);
              }
            }
          }
        }
        @Override public boolean spawn(){
          return false;
        }
      }
);
    }
  }
private class MasterPingRequestHandler extends BaseTransportRequestHandler<MasterPingRequest> {
    public static final String ACTION="discovery/zen/fd/masterPing";
    @Override public MasterPingRequest newInstance(){
      return new MasterPingRequest();
    }
    @Override public void messageReceived(    MasterPingRequest request,    TransportChannel channel) throws Exception {
      DiscoveryNodes nodes=nodesProvider.nodes();
      if (!request.masterNodeId.equals(nodes.localNodeId())) {
        throw new ElasticSearchIllegalStateException("Got ping as master with id [" + request.masterNodeId + "], but not master and no id");
      }
      channel.sendResponse(new MasterPingResponseResponse(nodes.nodeExists(request.nodeId)));
    }
    @Override public boolean spawn(){
      return false;
    }
  }
private static class MasterPingRequest implements Streamable {
    private String nodeId;
    private String masterNodeId;
    private MasterPingRequest(){
    }
    private MasterPingRequest(    String nodeId,    String masterNodeId){
      this.nodeId=nodeId;
      this.masterNodeId=masterNodeId;
    }
    @Override public void readFrom(    StreamInput in) throws IOException {
      nodeId=in.readUTF();
      masterNodeId=in.readUTF();
    }
    @Override public void writeTo(    StreamOutput out) throws IOException {
      out.writeUTF(nodeId);
      out.writeUTF(masterNodeId);
    }
  }
private static class MasterPingResponseResponse implements Streamable {
    private boolean connectedToMaster;
    private MasterPingResponseResponse(){
    }
    private MasterPingResponseResponse(    boolean connectedToMaster){
      this.connectedToMaster=connectedToMaster;
    }
    @Override public void readFrom(    StreamInput in) throws IOException {
      connectedToMaster=in.readBoolean();
    }
    @Override public void writeTo(    StreamOutput out) throws IOException {
      out.writeBoolean(connectedToMaster);
    }
  }
}
