package rx.operators;
import rx.Notification;
import rx.Observer;
import rx.Scheduler;
import rx.util.functions.Action0;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.atomic.AtomicInteger;
class ScheduledObserver<T> implements Observer<T> {
  private final Observer<T> underlying;
  private final Scheduler scheduler;
  private final ConcurrentLinkedQueue<Notification<T>> queue=new ConcurrentLinkedQueue<Notification<T>>();
  private final AtomicInteger counter=new AtomicInteger(0);
  public ScheduledObserver(  Observer<T> underlying,  Scheduler scheduler){
    this.underlying=underlying;
    this.scheduler=scheduler;
  }
  @Override public void onCompleted(){
    enqueue(new Notification<T>());
  }
  @Override public void onError(  final Exception e){
    enqueue(new Notification<T>(e));
  }
  @Override public void onNext(  final T args){
    enqueue(new Notification<T>(args));
  }
  private void enqueue(  Notification<T> notification){
    int count=counter.getAndIncrement();
    queue.offer(notification);
    if (count == 0) {
      processQueue();
    }
  }
  private void processQueue(){
    scheduler.schedule(new Action0(){
      @Override public void call(){
        int count=counter.decrementAndGet();
        Notification<T> not=queue.poll();
switch (not.getKind()) {
case OnNext:
          underlying.onNext(not.getValue());
        break;
case OnError:
      underlying.onError(not.getException());
    break;
case OnCompleted:
  underlying.onCompleted();
break;
default :
throw new IllegalStateException("Unknown kind of notification " + not);
}
if (count > 0) {
scheduler.schedule(this);
}
}
}
);
}
}
