package com.taobao.android.builder.dependency.parser.helper;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import com.android.build.gradle.internal.LoggerWrapper;
import com.android.build.gradle.internal.dependency.VariantDependencies;
import com.android.build.gradle.internal.ide.DependencyConvertUtils;
import com.android.builder.model.MavenCoordinates;
import com.android.utils.ILogger;
import com.google.common.collect.LinkedHashMultimap;
import com.google.common.collect.Lists;
import com.google.common.collect.Multimap;
import com.taobao.android.builder.dependency.parser.AtlasDepHelper;
import com.taobao.android.builder.dependency.parser.CircleDependencyCheck;
import com.taobao.android.builder.dependency.parser.CircleDependencyCheck.DependencyNode;
import com.taobao.android.builder.dependency.parser.DependencyLocationManager;
import com.taobao.android.builder.dependency.parser.ResolvedDependencyInfo;
import com.taobao.android.builder.tasks.incremental.ApDependencies;
import org.apache.commons.lang.StringUtils;
import org.gradle.api.Project;
import org.gradle.api.artifacts.ModuleVersionIdentifier;
import org.gradle.api.artifacts.ResolvedArtifact;
import org.gradle.api.artifacts.component.ComponentIdentifier;
import org.gradle.api.artifacts.component.ProjectComponentIdentifier;
import org.gradle.api.artifacts.result.DependencyResult;
import org.gradle.api.artifacts.result.ResolvedComponentResult;
import org.gradle.api.artifacts.result.ResolvedDependencyResult;
import org.gradle.api.internal.artifacts.result.DefaultResolvedComponentResult;
public class DependencyResolver {
  private static final ILogger LOGGER=LoggerWrapper.getLogger(DependencyResolver.class);
  private final ApDependencies apDependencies;
  private final Project project;
  private final VariantDependencies variantDeps;
  private final Map<ModuleVersionIdentifier,List<ResolvedArtifact>> artifacts;
  private final Map<String,Set<String>> bundleProvidedMap;
  private final Set<String> mainDependencies=new HashSet<>();
  private final DefaultResolvedComponentResult compileRootClasspath;
  private final DefaultResolvedComponentResult packageRootClasspath;
  public DependencyResolver(  Project project,  VariantDependencies variantDeps,  Map<ModuleVersionIdentifier,List<ResolvedArtifact>> artifacts,  Map<String,Set<String>> bundleProvidedMap,  ApDependencies apDependencies){
    this.project=project;
    this.variantDeps=variantDeps;
    this.artifacts=artifacts;
    this.bundleProvidedMap=bundleProvidedMap;
    this.apDependencies=apDependencies;
    this.compileRootClasspath=((DefaultResolvedComponentResult)variantDeps.getCompileConfiguration().getIncoming().getResolutionResult().getRoot());
    this.packageRootClasspath=((DefaultResolvedComponentResult)variantDeps.getPackageConfiguration().getIncoming().getResolutionResult().getRoot());
  }
  public List<ResolvedDependencyInfo> resolve(  List<DependencyResult> dependencyResults,  boolean mainBundle){
    Multimap<String,ResolvedDependencyInfo> dependenciesMap=LinkedHashMultimap.create();
    Set<ModuleVersionIdentifier> directDependencies=new HashSet<ModuleVersionIdentifier>();
    Set<String> resolveSets=new HashSet<>();
    for (    DependencyResult dependencyResult : dependencyResults) {
      if (dependencyResult instanceof ResolvedDependencyResult) {
        ModuleVersionIdentifier moduleVersion=((ResolvedDependencyResult)dependencyResult).getSelected().getModuleVersion();
        CircleDependencyCheck circleDependencyCheck=new CircleDependencyCheck(moduleVersion);
        if (!directDependencies.contains(moduleVersion)) {
          directDependencies.add(moduleVersion);
          resolveDependency(null,dependencyResult,((ResolvedDependencyResult)dependencyResult).getSelected(),artifacts,variantDeps,0,circleDependencyCheck,circleDependencyCheck.getRootDependencyNode(),dependenciesMap,resolveSets);
        }
      }
    }
    List<ResolvedDependencyInfo> mainResolvdInfo=resolveAllDependencies(dependenciesMap);
    if (mainBundle) {
      for (      ResolvedDependencyInfo resolvedDependencyInfo : mainResolvdInfo) {
        addMainDependencyInfo(resolvedDependencyInfo);
      }
    }
    return mainResolvdInfo;
  }
  private void addMainDependencyInfo(  ResolvedDependencyInfo resolvedDependencyInfo){
    this.mainDependencies.add(resolvedDependencyInfo.getGroup() + ":" + resolvedDependencyInfo.getName());
    for (    ResolvedDependencyInfo child : resolvedDependencyInfo.getChildren()) {
      addMainDependencyInfo(child);
    }
  }
  private void resolveDependency(  ResolvedDependencyInfo parent,  DependencyResult dependencyResult,  ResolvedComponentResult resolvedComponentResult,  Map<ModuleVersionIdentifier,List<ResolvedArtifact>> artifacts,  VariantDependencies configDependencies,  int indent,  CircleDependencyCheck circleDependencyCheck,  DependencyNode node,  Multimap<String,ResolvedDependencyInfo> dependenciesMap,  Set<String> resolvedDependencies){
    ModuleVersionIdentifier moduleVersion=resolvedComponentResult.getModuleVersion();
    if (checkForExclusion(configDependencies,moduleVersion,resolvedComponentResult,parent)) {
      return;
    }
    if (moduleVersion.getName().equals("support-annotations") && moduleVersion.getGroup().equals("com.android.support")) {
      configDependencies.setAnnotationsPresent(true);
    }
    List<ResolvedArtifact> moduleArtifacts=artifacts.get(moduleVersion);
    ComponentIdentifier id=resolvedComponentResult.getId();
    String gradlePath=(id instanceof ProjectComponentIdentifier) ? ((ProjectComponentIdentifier)id).getProjectPath() : null;
    if (null != moduleArtifacts) {
      for (      ResolvedArtifact resolvedArtifact : moduleArtifacts) {
        String key=moduleVersion.getGroup() + ":" + moduleVersion.getName();
        if (mainDependencies.contains(key)) {
          continue;
        }
        if (resolvedDependencies.contains(key)) {
          continue;
        }
        resolvedDependencies.add(key);
        boolean isAwbBundle=bundleProvidedMap.containsKey(key);
        Set<String> providedDirectDep=bundleProvidedMap.get(key);
        ResolvedDependencyInfo resolvedDependencyInfo=new ResolvedDependencyInfo(moduleVersion.getVersion(),moduleVersion.getGroup(),moduleVersion.getName(),isAwbBundle ? "awb" : resolvedArtifact.getType(),resolvedArtifact.getClassifier());
        resolvedDependencyInfo.setIndent(indent);
        resolvedDependencyInfo.setGradlePath(gradlePath);
        resolvedDependencyInfo.setResolvedArtifact(resolvedArtifact);
        String path=AtlasDepHelper.computeArtifactPath(moduleVersion,resolvedArtifact);
        String name=AtlasDepHelper.computeArtifactName(moduleVersion,resolvedArtifact);
        MavenCoordinates mavenCoordinates=DependencyConvertUtils.convert(resolvedArtifact);
        File explodedDir=DependencyLocationManager.getExploreDir(project,mavenCoordinates,resolvedArtifact.getFile(),resolvedArtifact.getType().toLowerCase(),path);
        resolvedDependencyInfo.setExplodedDir(explodedDir);
        resolvedDependencyInfo.setDependencyName(name);
        if (null == parent) {
          parent=resolvedDependencyInfo;
        }
 else {
          resolvedDependencyInfo.setParent(parent);
          parent.getChildren().add(resolvedDependencyInfo);
        }
        Set<? extends DependencyResult> dependencies=resolvedComponentResult.getDependencies();
        if (null != dependencies) {
          for (          DependencyResult dep : dependencies) {
            if (dep instanceof ResolvedDependencyResult) {
              ResolvedComponentResult childResolvedComponentResult=((ResolvedDependencyResult)dep).getSelected();
              if (isAwbBundle && providedDirectDep.contains(childResolvedComponentResult.getModuleVersion().getGroup() + ":" + childResolvedComponentResult.getModuleVersion().getName())) {
                continue;
              }
              CircleDependencyCheck.DependencyNode childNode=circleDependencyCheck.addDependency(childResolvedComponentResult.getModuleVersion(),node,indent + 1);
              CircleDependencyCheck.CircleResult circleResult=circleDependencyCheck.checkCircle(LOGGER);
              if (circleResult.hasCircle) {
                LOGGER.warning("[CircleDependency]" + StringUtils.join(circleResult.detail,";"));
              }
 else {
                resolveDependency(parent,dep,((ResolvedDependencyResult)dep).getSelected(),artifacts,configDependencies,indent + 1,circleDependencyCheck,childNode,dependenciesMap,resolvedDependencies);
              }
            }
          }
        }
        addDependencyInfo(resolvedDependencyInfo,null,dependenciesMap);
      }
    }
  }
  private boolean checkForExclusion(  VariantDependencies configDependencies,  ModuleVersionIdentifier moduleVersion,  ResolvedComponentResult resolvedComponentResult,  ResolvedDependencyInfo parent){
    if (configDependencies.getChecker().checkForExclusion(moduleVersion)) {
      return true;
    }
    if (apDependencies != null) {
      if (parent == null && apDependencies.isAwbLibrary(moduleVersion.getModule())) {
        return false;
      }
      if (parent != null && parent.getType().equals("awb") && apDependencies.isMainLibrary(moduleVersion.getModule())) {
        return true;
      }
      if (resolvedComponentResult.getId() instanceof ProjectComponentIdentifier) {
        return false;
      }
      if (apDependencies.hasSameResolvedDependency(moduleVersion)) {
        return true;
      }
    }
    return false;
  }
  private void addDependencyToRoot(  DependencyResult dependencyResult){
    compileRootClasspath.addDependency(dependencyResult);
    packageRootClasspath.addDependency(dependencyResult);
  }
  private void addDependencyInfo(  ResolvedDependencyInfo resolvedDependencyInfo,  ResolvedDependencyInfo parent,  Multimap<String,ResolvedDependencyInfo> dependenciesMap){
    dependenciesMap.put(resolvedDependencyInfo.toString(),resolvedDependencyInfo);
    if (null != parent) {
      resolvedDependencyInfo.setParent(parent);
    }
    List<ResolvedDependencyInfo> children=resolvedDependencyInfo.getChildren();
    if (null != children && children.size() > 0) {
      for (      ResolvedDependencyInfo child : children) {
        addDependencyInfo(child,resolvedDependencyInfo,dependenciesMap);
      }
    }
  }
  private List<ResolvedDependencyInfo> resolveAllDependencies(  Multimap<String,ResolvedDependencyInfo> dependenciesMap){
    List<ResolvedDependencyInfo> allResolvedDependencyInfos=new ArrayList<>();
    Multimap<ModuleVersionIdentifier,ResolvedDependencyInfo> resolvedDependenciesMap=LinkedHashMultimap.create();
    Map<ModuleVersionIdentifier,ResolvedDependencyInfo> directDependencies=new HashMap<ModuleVersionIdentifier,ResolvedDependencyInfo>();
    for (    String key : dependenciesMap.keySet()) {
      Collection<ResolvedDependencyInfo> dependencyLevels=dependenciesMap.get(key);
      if (dependencyLevels.size() > 0) {
        List<ResolvedDependencyInfo> resolvedDependencyInfos=Lists.newArrayList();
        resolvedDependencyInfos.addAll(dependencyLevels);
        Collections.sort(resolvedDependencyInfos);
        ResolvedDependencyInfo resolvedDependencyInfo=resolvedDependencyInfos.get(0);
        ResolvedDependencyInfo parent=resolvedDependencyInfo.getParent();
        resolvedDependencyInfo.setChildren(Lists.<ResolvedDependencyInfo>newArrayList());
        if (null != parent) {
          resolvedDependenciesMap.put(parent.getModuleVersionIdentifier(),resolvedDependencyInfo);
        }
 else {
          directDependencies.put(resolvedDependencyInfo.getModuleVersionIdentifier(),resolvedDependencyInfo);
        }
      }
    }
    for (    ModuleVersionIdentifier key : directDependencies.keySet()) {
      ResolvedDependencyInfo resolvedDependencyInfo=directDependencies.get(key);
      resolvedDependencyInfo.setChildren(Lists.<ResolvedDependencyInfo>newArrayList());
      addResolvedDependencyInfo(resolvedDependencyInfo,resolvedDependenciesMap);
      allResolvedDependencyInfos.add(resolvedDependencyInfo);
    }
    return allResolvedDependencyInfos;
  }
  private void addResolvedDependencyInfo(  ResolvedDependencyInfo parentDependency,  Multimap<ModuleVersionIdentifier,ResolvedDependencyInfo> resolvedDependenciesMap){
    int indent=parentDependency.getIndent();
    ModuleVersionIdentifier identifier=parentDependency.getModuleVersionIdentifier();
    Collection<ResolvedDependencyInfo> childDependencies=resolvedDependenciesMap.get(identifier);
    for (    ResolvedDependencyInfo childDependency : childDependencies) {
      if (childDependency.getIndent() > indent) {
        parentDependency.getChildren().add(childDependency);
        if (childDependency.getIndent() <= 1) {
          addResolvedDependencyInfo(childDependency,resolvedDependenciesMap);
        }
      }
    }
  }
}
