package org.apache.flink.streaming.api.operators;
import org.apache.flink.annotation.Internal;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.configuration.MetricOptions;
import org.apache.flink.runtime.jobgraph.OperatorID;
import org.apache.flink.streaming.api.TimeCharacteristic;
import org.apache.flink.streaming.api.functions.source.SourceFunction;
import org.apache.flink.streaming.api.watermark.Watermark;
import org.apache.flink.streaming.runtime.streamrecord.LatencyMarker;
import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;
import org.apache.flink.streaming.runtime.streamstatus.StreamStatusMaintainer;
import org.apache.flink.streaming.runtime.tasks.ProcessingTimeCallback;
import org.apache.flink.streaming.runtime.tasks.ProcessingTimeService;
import java.util.concurrent.ScheduledFuture;
@Internal public class StreamSource<OUT,SRC extends SourceFunction<OUT>> extends AbstractUdfStreamOperator<OUT,SRC> {
  private static final long serialVersionUID=1L;
  private transient SourceFunction.SourceContext<OUT> ctx;
  private transient volatile boolean canceledOrStopped=false;
  public StreamSource(  SRC sourceFunction){
    super(sourceFunction);
    this.chainingStrategy=ChainingStrategy.HEAD;
  }
  public void run(  final Object lockingObject,  final StreamStatusMaintainer streamStatusMaintainer) throws Exception {
    run(lockingObject,streamStatusMaintainer,output);
  }
  public void run(  final Object lockingObject,  final StreamStatusMaintainer streamStatusMaintainer,  final Output<StreamRecord<OUT>> collector) throws Exception {
    final TimeCharacteristic timeCharacteristic=getOperatorConfig().getTimeCharacteristic();
    final Configuration configuration=this.getContainingTask().getEnvironment().getTaskManagerInfo().getConfiguration();
    final long latencyTrackingInterval=getExecutionConfig().isLatencyTrackingConfigured() ? getExecutionConfig().getLatencyTrackingInterval() : configuration.getLong(MetricOptions.LATENCY_INTERVAL);
    LatencyMarksEmitter<OUT> latencyEmitter=null;
    if (latencyTrackingInterval > 0) {
      latencyEmitter=new LatencyMarksEmitter<>(getProcessingTimeService(),collector,latencyTrackingInterval,this.getOperatorID(),getRuntimeContext().getIndexOfThisSubtask());
    }
    final long watermarkInterval=getRuntimeContext().getExecutionConfig().getAutoWatermarkInterval();
    this.ctx=StreamSourceContexts.getSourceContext(timeCharacteristic,getProcessingTimeService(),lockingObject,streamStatusMaintainer,collector,watermarkInterval,-1);
    try {
      userFunction.run(ctx);
      if (!isCanceledOrStopped()) {
        ctx.emitWatermark(Watermark.MAX_WATERMARK);
      }
    }
  finally {
      ctx.close();
      if (latencyEmitter != null) {
        latencyEmitter.close();
      }
    }
  }
  public void cancel(){
    markCanceledOrStopped();
    userFunction.cancel();
    if (ctx != null) {
      ctx.close();
    }
  }
  protected void markCanceledOrStopped(){
    this.canceledOrStopped=true;
  }
  protected boolean isCanceledOrStopped(){
    return canceledOrStopped;
  }
private static class LatencyMarksEmitter<OUT> {
    private final ScheduledFuture<?> latencyMarkTimer;
    public LatencyMarksEmitter(    final ProcessingTimeService processingTimeService,    final Output<StreamRecord<OUT>> output,    long latencyTrackingInterval,    final OperatorID operatorId,    final int subtaskIndex){
      latencyMarkTimer=processingTimeService.scheduleAtFixedRate(new ProcessingTimeCallback(){
        @Override public void onProcessingTime(        long timestamp) throws Exception {
          try {
            output.emitLatencyMarker(new LatencyMarker(timestamp,operatorId,subtaskIndex));
          }
 catch (          Throwable t) {
            LOG.warn("Error while emitting latency marker.",t);
          }
        }
      }
,0L,latencyTrackingInterval);
    }
    public void close(){
      latencyMarkTimer.cancel(true);
    }
  }
}
