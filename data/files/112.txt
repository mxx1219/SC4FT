package com.facebook.buck.httpserver;
import com.facebook.buck.artifact_cache.CacheResultType;
import com.facebook.buck.core.build.event.BuildEvent;
import com.facebook.buck.core.build.event.BuildRuleEvent;
import com.facebook.buck.core.test.event.IndividualTestEvent;
import com.facebook.buck.core.test.event.TestRunEvent;
import com.facebook.buck.event.BuckEventListener;
import com.facebook.buck.event.CompilerErrorEvent;
import com.facebook.buck.event.ConsoleEvent;
import com.facebook.buck.event.InstallEvent;
import com.facebook.buck.event.ProgressEvent;
import com.facebook.buck.event.ProjectGenerationEvent;
import com.facebook.buck.event.external.events.BuckEventExternalInterface;
import com.facebook.buck.event.listener.stats.cache.CacheRateStatsKeeper;
import com.facebook.buck.parser.ParseEvent;
import com.facebook.buck.parser.events.ParseBuckFileEvent;
import com.facebook.buck.util.timing.Clock;
import com.google.common.eventbus.Subscribe;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import javax.annotation.concurrent.GuardedBy;
public class WebServerBuckEventListener implements BuckEventListener {
  private final StreamingWebSocketServlet streamingWebSocketServlet;
  private final Clock clock;
  private final ScheduledExecutorService executorService=Executors.newSingleThreadScheduledExecutor();
  @GuardedBy("this") private ScheduledFuture<?> buildStatusFuture;
  @GuardedBy("this") BuildState buildState=null;
  @GuardedBy("this") private int numberOfRules=0;
  @GuardedBy("this") private int numberOfFinishedRules=0;
  @GuardedBy("this") private int numberOfUpdatedRules=0;
  @GuardedBy("this") private int numberOfParsedRules=0;
  @GuardedBy("this") private int numberOfParsedFiles=0;
  WebServerBuckEventListener(  StreamingWebSocketServlet streamingWebSocketServlet,  Clock clock){
    this.streamingWebSocketServlet=streamingWebSocketServlet;
    this.clock=clock;
  }
  @Subscribe public void parseStarted(  ParseEvent.Started started){
    streamingWebSocketServlet.tellClients(started);
synchronized (this) {
      buildState=BuildState.PARSING;
      scheduleBuildStatusEvent();
    }
  }
  @Subscribe public void parseFinished(  ParseEvent.Finished finished){
    streamingWebSocketServlet.tellClients(finished);
synchronized (this) {
      buildState=BuildState.BUILDING_ACTION_GRAPH;
      scheduleBuildStatusEvent();
    }
  }
  @Subscribe public void buildStarted(  BuildEvent.Started started){
    streamingWebSocketServlet.tellClients(started);
    resetBuildState(BuildState.STARTING);
    scheduleBuildStatusEvent();
  }
  @Subscribe public void cacheRateStatsUpdate(  CacheRateStatsKeeper.CacheRateStatsUpdateEvent cacheRateStatsUpdate){
    streamingWebSocketServlet.tellClients(cacheRateStatsUpdate);
  }
  @Subscribe public void buildFinished(  BuildEvent.Finished finished){
synchronized (this) {
      buildStatusFuture.cancel(false);
      buildStatusFuture=null;
    }
    resetBuildState(null);
    streamingWebSocketServlet.tellClients(finished);
  }
  @Subscribe public void testRunStarted(  TestRunEvent.Started event){
    streamingWebSocketServlet.tellClients(event);
  }
  @Subscribe public void testRunCompleted(  TestRunEvent.Finished event){
    streamingWebSocketServlet.tellClients(event);
  }
  @Subscribe public void testAwaitingResults(  IndividualTestEvent.Started event){
    streamingWebSocketServlet.tellClients(event);
  }
  @Subscribe public void testResultsAvailable(  IndividualTestEvent.Finished event){
    streamingWebSocketServlet.tellClients(event);
  }
  @Subscribe public void installEventFinished(  InstallEvent.Finished event){
    streamingWebSocketServlet.tellClients(event);
  }
  @Subscribe public void compilerErrorEvent(  CompilerErrorEvent event){
    streamingWebSocketServlet.tellClients(event);
  }
  @Subscribe public void consoleEvent(  ConsoleEvent event){
    streamingWebSocketServlet.tellClients(event);
  }
  @Subscribe public void buildProgressUpdated(  ProgressEvent.BuildProgressUpdated event){
    streamingWebSocketServlet.tellClients(event);
  }
  @Subscribe public void parsingProgressUpdated(  ProgressEvent.ParsingProgressUpdated event){
    streamingWebSocketServlet.tellClients(event);
  }
  @Subscribe public void projectGenerationProgressUpdated(  ProgressEvent.ProjectGenerationProgressUpdated event){
    streamingWebSocketServlet.tellClients(event);
  }
  @Subscribe public void projectGenerationStarted(  ProjectGenerationEvent.Started event){
    streamingWebSocketServlet.tellClients(event);
  }
  @Subscribe public void projectGenerationFinished(  ProjectGenerationEvent.Finished event){
    streamingWebSocketServlet.tellClients(event);
  }
  @Subscribe private synchronized void ruleParseFinished(  ParseBuckFileEvent.Finished ruleParseFinished){
    numberOfParsedFiles++;
    numberOfParsedRules+=ruleParseFinished.getNumRules();
    scheduleBuildStatusEvent();
  }
  @Subscribe public synchronized void ruleCountCalculated(  BuildEvent.RuleCountCalculated calculated){
    numberOfRules=calculated.getNumRules();
    scheduleBuildStatusEvent();
  }
  @Subscribe public synchronized void ruleCountUpdated(  BuildEvent.UnskippedRuleCountUpdated updated){
    numberOfRules=updated.getNumRules();
    scheduleBuildStatusEvent();
  }
  @Subscribe public synchronized void buildRuleFinished(  BuildRuleEvent.Finished finished){
    if (buildState == BuildState.BUILDING_ACTION_GRAPH) {
      buildState=BuildState.BUILDING;
    }
    numberOfFinishedRules++;
    if (finished.getCacheResult().getType() != CacheResultType.LOCAL_KEY_UNCHANGED_HIT) {
      numberOfUpdatedRules++;
    }
    scheduleBuildStatusEvent();
  }
  private synchronized void resetBuildState(  BuildState newBuildState){
    buildState=newBuildState;
    numberOfRules=0;
    numberOfFinishedRules=0;
    numberOfUpdatedRules=0;
    numberOfParsedRules=0;
    numberOfParsedFiles=0;
  }
  private synchronized void scheduleBuildStatusEvent(){
    if (buildStatusFuture != null) {
      return;
    }
    buildStatusFuture=executorService.schedule(null,500,TimeUnit.MILLISECONDS);
  }
  private void sendBuildStatusEventInternal(){
    BuildStatusEvent event;
synchronized (this) {
      if (buildState == null) {
        return;
      }
      buildStatusFuture=null;
      event=new BuildStatusEvent(clock.currentTimeMillis(),buildState,numberOfRules,numberOfFinishedRules,numberOfUpdatedRules,numberOfParsedRules,numberOfParsedFiles);
    }
    streamingWebSocketServlet.tellClients(event);
  }
  @Override public void close(){
    executorService.shutdown();
    try {
      executorService.awaitTermination(1000,TimeUnit.MILLISECONDS);
    }
 catch (    InterruptedException e) {
    }
  }
@SuppressWarnings("unused") private static class BuildStatusEvent implements BuckEventExternalInterface {
    private final long timestamp;
    public final BuildState state;
    public final int totalRulesCount;
    public final int finishedRulesCount;
    public final int updatedRulesCount;
    public final int parsedRulesCount;
    public final int parsedFilesCount;
    public BuildStatusEvent(    long timestamp,    BuildState state,    int totalRulesCount,    int finishedRulesCount,    int updatedRulesCount,    int parsedRulesCount,    int parsedFilesCount){
      this.timestamp=timestamp;
      this.state=state;
      this.totalRulesCount=totalRulesCount;
      this.finishedRulesCount=finishedRulesCount;
      this.updatedRulesCount=updatedRulesCount;
      this.parsedRulesCount=parsedRulesCount;
      this.parsedFilesCount=parsedFilesCount;
    }
    @Override public long getTimestampMillis(){
      return timestamp;
    }
    @Override public String getEventName(){
      return BuckEventExternalInterface.BUILD_STATUS_EVENT;
    }
    @Override public boolean storeLastInstanceAndReplayForNewClients(){
      return true;
    }
  }
  private enum BuildState;
{
  }
}
