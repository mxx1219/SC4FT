package com.ichi2.anki;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.content.res.TypedArray;
import android.graphics.Typeface;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.ActionBarDrawerToggle;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.ListView;
import android.widget.TextView;
import com.ichi2.anim.ActivityTransitionAnimation;
import com.ichi2.anki.stats.AnkiStatsActivity;
import com.ichi2.anki.stats.AnkiStatsTaskHandler;
public class NavigationDrawerActivity extends AnkiActivity {
  protected CharSequence mTitle;
  protected Boolean mFragmented=false;
  private DrawerLayout mDrawerLayout;
  private ListView mDrawerList;
  private ActionBarDrawerToggle mDrawerToggle;
  private String[] mNavigationTitles;
  private TypedArray mNavigationImages;
  private String mOldColPath;
  protected static final int DRAWER_DECK_PICKER=0;
  protected static final int DRAWER_BROWSER=1;
  protected static final int DRAWER_STATISTICS=2;
  protected static final int DRAWER_SETTINGS=3;
  protected static final int DRAWER_HELP=4;
  protected static final int DRAWER_FEEDBACK=5;
  public static final int REQUEST_PREFERENCES_UPDATE=100;
  public static final int REQUEST_BROWSE_CARDS=101;
  protected void initNavigationDrawer(  View mainView){
    mDrawerLayout=(DrawerLayout)mainView.findViewById(R.id.drawer_layout);
    mDrawerList=(ListView)mainView.findViewById(R.id.left_drawer);
    mTitle=getTitle();
    mNavigationTitles=getResources().getStringArray(R.array.navigation_titles);
    mNavigationImages=getResources().obtainTypedArray(R.array.drawer_images);
    mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
    mDrawerList.setAdapter(new NavDrawerListAdapter(this,mNavigationTitles,mNavigationImages));
    mDrawerList.setOnItemClickListener(new DrawerItemClickListener());
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    getSupportActionBar().setHomeButtonEnabled(true);
    mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.drawable.ic_drawer,R.string.drawer_open,R.string.drawer_close){
      public void onDrawerClosed(      View view){
        getSupportActionBar().setTitle(mTitle);
        supportInvalidateOptionsMenu();
      }
      public void onDrawerOpened(      View drawerView){
        getSupportActionBar().setTitle(getResources().getString(R.string.app_name));
        supportInvalidateOptionsMenu();
      }
    }
;
    mDrawerLayout.setDrawerListener(mDrawerToggle);
  }
private class DrawerItemClickListener implements ListView.OnItemClickListener {
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      selectNavigationItem(position);
    }
  }
  protected void selectNavigationItem(  int position){
    mDrawerList.setItemChecked(position,true);
    setTitle(mNavigationTitles[position]);
    mDrawerLayout.closeDrawer(mDrawerList);
switch (position) {
case DRAWER_DECK_PICKER:
      if (!(this instanceof DeckPicker)) {
        Intent deckPicker=new Intent(this,DeckPicker.class);
        deckPicker.putExtra("viaNavigationDrawer",true);
        deckPicker.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivityWithAnimation(deckPicker,ActivityTransitionAnimation.LEFT);
      }
    break;
case DRAWER_BROWSER:
  Intent cardBrowser=new Intent(this,CardBrowser.class);
if (!(this instanceof CardBrowser)) {
  if (this instanceof DeckPicker && !mFragmented) {
    cardBrowser.putExtra("fromDeckpicker",true);
  }
  startActivityForResultWithAnimation(cardBrowser,REQUEST_BROWSE_CARDS,ActivityTransitionAnimation.LEFT);
}
break;
case DRAWER_STATISTICS:
boolean selectAllDecksButton=false;
if (!(this instanceof AnkiStatsActivity)) {
if ((this instanceof DeckPicker && !mFragmented)) {
selectAllDecksButton=true;
}
AnkiStatsTaskHandler.setIsWholeCollection(selectAllDecksButton);
Intent intent=new Intent(this,AnkiStatsActivity.class);
startActivityWithAnimation(intent,ActivityTransitionAnimation.DOWN);
}
break;
case DRAWER_SETTINGS:
mOldColPath=AnkiDroidApp.getSharedPrefs(this).getString("deckPath","oldPath");
startActivityForResultWithAnimation(new Intent(this,Preferences.class),REQUEST_PREFERENCES_UPDATE,ActivityTransitionAnimation.LEFT);
break;
case DRAWER_HELP:
Intent helpIntent=new Intent("android.intent.action.VIEW",Uri.parse(getResources().getString(R.string.link_manual)));
startActivityWithoutAnimation(helpIntent);
break;
case DRAWER_FEEDBACK:
Intent feedbackIntent=new Intent("android.intent.action.VIEW",Uri.parse(getResources().getString(R.string.link_help)));
startActivityWithoutAnimation(feedbackIntent);
break;
default :
break;
}
}
protected void deselectAllNavigationItems(){
for (int i=0; i < mDrawerList.getCount(); i++) {
mDrawerList.setItemChecked(i,false);
}
}
@Override public void setTitle(CharSequence title){
mTitle=title;
getSupportActionBar().setTitle(mTitle);
}
@Override protected void onPostCreate(Bundle savedInstanceState){
super.onPostCreate(savedInstanceState);
mDrawerToggle.syncState();
}
@Override public void onConfigurationChanged(Configuration newConfig){
super.onConfigurationChanged(newConfig);
mDrawerToggle.onConfigurationChanged(newConfig);
}
private class NavDrawerListAdapter extends BaseAdapter {
private Context context;
private String[] navDrawerTitles;
private TypedArray navDrawerImages;
public NavDrawerListAdapter(Context context,String[] navDrawerTitles,TypedArray navDrawerImages){
this.context=context;
this.navDrawerTitles=navDrawerTitles;
this.navDrawerImages=navDrawerImages;
}
@Override public int getCount(){
return navDrawerTitles.length;
}
@Override public Object getItem(int position){
return navDrawerTitles[position];
}
@Override public long getItemId(int position){
return position;
}
@Override public View getView(int position,View convertView,ViewGroup parent){
if (convertView == null) {
LayoutInflater mInflater=(LayoutInflater)context.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
if (position > DRAWER_STATISTICS) {
convertView=mInflater.inflate(R.layout.drawer_submenu_list_item,null);
}
 else {
convertView=mInflater.inflate(R.layout.drawer_list_item,null);
}
}
TextView txtTitle=(TextView)convertView.findViewById(R.id.drawer_list_item_text);
txtTitle.setText(navDrawerTitles[position]);
txtTitle.setCompoundDrawablesWithIntrinsicBounds(navDrawerImages.getResourceId(position,-1),0,0,0);
if (NavigationDrawerActivity.this.mDrawerList.getCheckedItemPosition() == position) {
txtTitle.setTypeface(null,Typeface.BOLD);
}
 else {
txtTitle.setTypeface(null,Typeface.NORMAL);
}
return convertView;
}
}
@Override protected void onDestroy(){
super.onDestroy();
mNavigationImages.recycle();
}
public DrawerLayout getDrawerLayout(){
return mDrawerLayout;
}
public ListView getDrawerList(){
return mDrawerList;
}
public ActionBarDrawerToggle getDrawerToggle(){
return mDrawerToggle;
}
protected void disableDrawerSwipe(){
if (mDrawerLayout != null) {
mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);
}
}
protected void enableDrawerSwipe(){
if (mDrawerLayout != null) {
mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED);
}
}
@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
if (requestCode == REQUEST_PREFERENCES_UPDATE) {
String newPath=AnkiDroidApp.getSharedPrefs(this).getString("deckPath","");
if (mOldColPath != null && newPath.equals(mOldColPath)) {
restartActivity();
}
 else {
Intent deckPicker=new Intent(this,DeckPicker.class);
deckPicker.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
startActivityWithoutAnimation(deckPicker);
}
}
 else {
super.onActivityResult(requestCode,resultCode,data);
}
}
}
