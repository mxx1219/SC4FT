package org.apereo.cas.ticket.registry;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apereo.cas.ticket.Ticket;
import org.springframework.data.redis.core.RedisTemplate;
import java.util.Collection;
import java.util.Objects;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
@Slf4j @AllArgsConstructor public class RedisTicketRegistry extends AbstractTicketRegistry {
  private static final String CAS_TICKET_PREFIX="CAS_TICKET:";
  private final RedisTemplate<String,Ticket> client;
  @Override public long deleteAll(){
    final var redisKeys=this.client.keys(getPatternTicketRedisKey());
    final var size=redisKeys.size();
    this.client.delete(redisKeys);
    return size;
  }
  @Override public boolean deleteSingleTicket(  final String ticketId){
    try {
      final var redisKey=getTicketRedisKey(ticketId);
      this.client.delete(redisKey);
      return true;
    }
 catch (    final Exception e) {
      LOGGER.error("Ticket not found or is already removed. Failed deleting [{}]",ticketId,e);
    }
    return false;
  }
  @Override public void addTicket(  final Ticket ticket){
    try {
      LOGGER.debug("Adding ticket [{}]",ticket);
      final var redisKey=getTicketRedisKey(ticket.getId());
      final var encodeTicket=this.encodeTicket(ticket);
      this.client.boundValueOps(redisKey).set(encodeTicket,getTimeout(ticket),TimeUnit.SECONDS);
    }
 catch (    final Exception e) {
      LOGGER.error("Failed to add [{}]",ticket,e);
    }
  }
  @Override public Ticket getTicket(  final String ticketId){
    try {
      final var redisKey=getTicketRedisKey(ticketId);
      final var t=this.client.boundValueOps(redisKey).get();
      if (t != null) {
        final var result=decodeTicket(t);
        if (result != null && result.isExpired()) {
          LOGGER.debug("Ticket [{}] has expired and is now removed from the cache",result.getId());
          deleteSingleTicket(ticketId);
          return null;
        }
        return result;
      }
    }
 catch (    final Exception e) {
      LOGGER.error("Failed fetching [{}] ",ticketId,e);
    }
    return null;
  }
  @Override public Collection<Ticket> getTickets(){
    return this.client.keys(getPatternTicketRedisKey()).stream().map(null).filter(null).map(null).collect(Collectors.toSet());
  }
  @Override public Ticket updateTicket(  final Ticket ticket){
    try {
      LOGGER.debug("Updating ticket [{}]",ticket);
      final var encodeTicket=this.encodeTicket(ticket);
      final var redisKey=getTicketRedisKey(ticket.getId());
      this.client.boundValueOps(redisKey).set(encodeTicket,getTimeout(ticket),TimeUnit.SECONDS);
      return encodeTicket;
    }
 catch (    final Exception e) {
      LOGGER.error("Failed to update [{}]",ticket,e);
    }
    return null;
  }
  private static int getTimeout(  final Ticket ticket){
    final var ttl=ticket.getExpirationPolicy().getTimeToLive().intValue();
    if (ttl == 0) {
      return 1;
    }
    return ttl;
  }
  private static String getTicketRedisKey(  final String ticketId){
    return CAS_TICKET_PREFIX + ticketId;
  }
  private static String getPatternTicketRedisKey(){
    return CAS_TICKET_PREFIX + "*";
  }
}
