package org.nutz.mvc;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.servlet.ServletContext;
import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.nutz.ioc.Ioc;
import org.nutz.ioc.IocContext;
import org.nutz.json.Json;
import org.nutz.json.JsonFormat;
import org.nutz.lang.Lang;
import org.nutz.lang.Strings;
import org.nutz.lang.util.Context;
import org.nutz.mvc.config.AtMap;
import org.nutz.mvc.impl.NutMessageMap;
import org.nutz.mvc.ioc.SessionIocContext;
public abstract class Mvcs {
  public static final String DEFAULT_MSGS="$default";
  public static final String MSG="msg";
  public static final String LOCALE_KEY="nutz_mvc_localization_key";
  public static Map<String,Object> getLocaleMessage(  String key){
    Map<String,Map<String,Object>> msgss=getMessageSet();
    if (null != msgss)     return msgss.get(key);
    return null;
  }
  @SuppressWarnings("unchecked") public static Map<String,String> getMessages(  ServletRequest req){
    return (Map<String,String>)req.getAttribute(MSG);
  }
  public static NutMessageMap getMessageMap(  ServletRequest req){
    return (NutMessageMap)req.getAttribute(MSG);
  }
  public static String getMessage(  ServletRequest req,  String key){
    Map<String,String> map=getMessages(req);
    if (null != map)     return map.get(key);
    return null;
  }
  public static String getLocalizationKey(){
    HttpSession sess=getHttpSession();
    return null == sess ? null : (String)sess.getAttribute(LOCALE_KEY);
  }
  public static boolean setLocalizationKey(  String key){
    HttpSession sess=getHttpSession();
    if (null == sess)     return false;
    sess.setAttribute(LOCALE_KEY,key);
    return true;
  }
  public static Set<String> getLocalizationKeySet(){
    Map<String,Map<String,Object>> msgss=getMessageSet();
    if (null == msgss)     return new HashSet<String>();
    return msgss.keySet();
  }
  private static String default_localization_key=null;
  public static void setDefaultLocalizationKey(  String key){
    default_localization_key=key;
  }
  public static String getDefaultLocalizationKey(){
    return default_localization_key;
  }
  public static void updateRequestAttributes(  HttpServletRequest req){
    Map<String,Map<String,Object>> msgss=getMessageSet();
    if (null != msgss) {
      Map<String,Object> msgs=null;
      String lKey=Strings.sBlank(Mvcs.getLocalizationKey(),getDefaultLocalizationKey());
      if (!Strings.isBlank(lKey))       msgs=msgss.get(lKey);
      if (null == msgs) {
        if (msgss.size() > 0)         msgs=msgss.values().iterator().next();
      }
      req.setAttribute(MSG,msgs);
    }
    req.setAttribute("base",req.getContextPath());
    req.setAttribute("$request",req);
  }
  public static String getRequestPath(  HttpServletRequest req){
    return getRequestPathObject(req).getPath();
  }
  public static RequestPath getRequestPathObject(  HttpServletRequest req){
    String url=req.getPathInfo();
    if (null == url)     url=req.getServletPath();
    return getRequestPathObject(url);
  }
  public static RequestPath getRequestPathObject(  String url){
    RequestPath rr=new RequestPath();
    rr.setUrl(url);
    if (null != url) {
      int lio=0;
      if (!url.endsWith("/")) {
        int ll=url.lastIndexOf('/');
        lio=url.lastIndexOf('.');
        if (lio < ll)         lio=-1;
      }
      if (lio > 0) {
        rr.setPath(url.substring(0,lio));
        rr.setSuffix(url.substring(lio + 1));
      }
 else {
        rr.setPath(url);
        rr.setSuffix("");
      }
    }
 else {
      rr.setPath("");
      rr.setSuffix("");
    }
    return rr;
  }
  public static void deposeSession(  HttpSession session){
    if (session != null)     new SessionIocContext(session).depose();
  }
  public static void write(  HttpServletResponse resp,  Object obj,  JsonFormat format) throws IOException {
    resp.setHeader("Cache-Control","no-cache");
    resp.setContentType("text/plain");
    Json.toJson(resp.getWriter(),obj,format);
    resp.flushBuffer();
  }
  private static final ThreadLocal<String> NAME=new ThreadLocal<String>();
  public static NutMvcContext ctx=new NutMvcContext();
  private static ServletContext servletContext;
  public static final HttpServletRequest getReq(){
    return ctx.reqThreadLocal.get().getAs(HttpServletRequest.class,"req");
  }
  public static final HttpServletResponse getResp(){
    return ctx.reqThreadLocal.get().getAs(HttpServletResponse.class,"resp");
  }
  public static final String getName(){
    return NAME.get();
  }
  public static final ActionContext getActionContext(){
    return ctx.reqThreadLocal.get().getAs(ActionContext.class,"ActionContext");
  }
  public static void set(  String name,  HttpServletRequest req,  HttpServletResponse resp){
    NAME.set(name);
    ctx.reqThreadLocal.get().set("req",req);
    ctx.reqThreadLocal.get().set("resp",resp);
  }
  public static void setServletContext(  ServletContext servletContext){
    Mvcs.servletContext=servletContext;
  }
  public static void setActionContext(  ActionContext actionContext){
    ctx.reqThreadLocal.get().set("ActionContext",actionContext);
  }
  public static ServletContext getServletContext(){
    return servletContext;
  }
  public static void setIocContext(  IocContext iocContext){
    ctx.reqThreadLocal.get().set("IocContext",iocContext);
  }
  public static IocContext getIocContext(){
    return ctx.reqThreadLocal.get().getAs(IocContext.class,"IocContext");
  }
  public static Ioc getIoc(){
    return ctx.iocs.get(getName());
  }
  public static void setIoc(  Ioc ioc){
    ctx.iocs.put(getName(),ioc);
  }
  public static AtMap getAtMap(){
    return ctx.atMaps.get(getName());
  }
  public static void setAtMap(  AtMap atmap){
    ctx.atMaps.put(getName(),atmap);
  }
  public static Map<String,Map<String,Object>> getMessageSet(){
    return ctx.localizations.get(getName());
  }
  public static void setMessageSet(  Map<String,Map<String,Object>> messageSet){
    ctx.localizations.put(getName(),messageSet);
  }
  public static void setNutConfig(  NutConfig config){
    ctx.nutConfigs.put(getName(),config);
  }
  public static NutConfig getNutConfig(){
    return ctx.nutConfigs.get(getName());
  }
  public static Context resetALL(){
    Context context=ctx.reqThreadLocal.get();
    NAME.set(null);
    ctx.reqThreadLocal.set(Lang.context());
    return context;
  }
  public static HttpSession getHttpSession(){
    return getHttpSession(true);
  }
  public static HttpSession getHttpSession(  boolean createNew){
    HttpServletRequest req=getReq();
    if (null == req)     return null;
    return req.getSession(createNew);
  }
  public static void close(){
    ctx.clear();
    ctx.close();
  }
}
