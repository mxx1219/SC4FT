package org.apache.jmeter.report.core;
import java.io.BufferedReader;
import java.io.Closeable;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import org.apache.jmeter.samplers.SampleSaveConfiguration;
import org.apache.jmeter.save.CSVSaveService;
import org.apache.jmeter.util.JMeterUtils;
import org.apache.jorphan.util.JOrphanUtils;
public class CsvSampleReader implements Closeable {
  private static final int BUF_SIZE=10000;
  private static final String CHARSET="ISO8859-1";
  private static final char DEFAULT_SEPARATOR=JMeterUtils.getPropDefault("jmeter.save.saveservice.default_delimiter",",").charAt(0);
  private File file;
  private BufferedReader reader;
  private char separator;
  private long row;
  private SampleMetadata metadata;
  private int columnCount;
  private Sample lastSampleRead;
  public CsvSampleReader(  File inputFile,  char separator,  boolean useSaveSampleCfg){
    this(inputFile,null,separator,useSaveSampleCfg);
  }
  public CsvSampleReader(  File inputFile,  SampleMetadata metadata){
    this(inputFile,metadata,DEFAULT_SEPARATOR,false);
  }
  private CsvSampleReader(  File inputFile,  SampleMetadata metadata,  char separator,  boolean useSaveSampleCfg){
    if (inputFile == null) {
      throw new ArgumentNullException("inputFile");
    }
    if (!(inputFile.isFile() && inputFile.canRead())) {
      throw new IllegalArgumentException(inputFile.getAbsolutePath() + "does not exist or is not readable");
    }
    this.file=inputFile;
    try {
      this.reader=new BufferedReader(new InputStreamReader(new FileInputStream(file),CHARSET),BUF_SIZE);
    }
 catch (    FileNotFoundException|UnsupportedEncodingException ex) {
      throw new SampleException("Could not create file reader !",ex);
    }
    if (metadata == null) {
      metadata=readMetadata(separator,useSaveSampleCfg);
    }
    this.metadata=metadata;
    this.columnCount=metadata.getColumnCount();
    this.separator=metadata.getSeparator();
    this.row=0;
    this.lastSampleRead=nextSample();
  }
  private SampleMetadata readMetadata(  char separator,  boolean useSaveSampleCfg){
    try {
      SampleMetadata metadata;
      String line=reader.readLine();
      if (useSaveSampleCfg && CSVSaveService.getSampleSaveConfiguration(line,file.getAbsolutePath()) == null) {
        metadata=new SampleMetadata(SampleSaveConfiguration.staticConfig());
      }
 else {
        metadata=new SampleMetaDataParser(separator).parse(line);
      }
      return metadata;
    }
 catch (    Exception e) {
      throw new SampleException("Could not read metadata !",e);
    }
  }
  public SampleMetadata getMetadata(){
    return metadata;
  }
  private Sample nextSample(){
    String[] data;
    try {
      data=CSVSaveService.csvReadFile(reader,separator);
      Sample sample=null;
      if (data.length > 0) {
        if (data.length < columnCount) {
          String[] filler=new String[columnCount];
          System.arraycopy(data,0,filler,0,data.length);
          for (int i=data.length; i < columnCount; i++) {
            filler[i]="";
          }
          data=filler;
        }
        sample=new Sample(row,metadata,data);
      }
      return sample;
    }
 catch (    IOException e) {
      throw new SampleException("Could not read sample <" + row + ">",e);
    }
  }
  public Sample readSample(){
    Sample out=lastSampleRead;
    lastSampleRead=nextSample();
    return out;
  }
  public Sample peek(){
    return lastSampleRead;
  }
  public boolean hasNext(){
    return lastSampleRead != null;
  }
  @Override public void close(){
    JOrphanUtils.closeQuietly(reader);
  }
}
