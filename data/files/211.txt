package org.graalvm.visualvm.lib.profiler.snaptracer;
import java.text.NumberFormat;
public abstract class ItemValueFormatter {
  public static final int FORMAT_TOOLTIP=0;
  public static final int FORMAT_UNITS=1;
  public static final int FORMAT_DETAILS=2;
  public static final int FORMAT_EXPORT=3;
  public static final ItemValueFormatter SIMPLE=new ItemValueFormatter(){
    public String formatValue(    long value,    int format){
      return Long.toString(value);
    }
    public String getUnits(    int format){
      return null;
    }
  }
;
  public static final ItemValueFormatter DEFAULT_DECIMAL=new Decimal();
  public static final ItemValueFormatter DEFAULT_BYTES=new Bytes();
  public static final ItemValueFormatter DEFAULT_PERCENT=new Percent();
  public abstract String formatValue(  long value,  int format);
  public abstract String getUnits(  int format);
public static final class Decimal extends ItemValueFormatter {
    private static final NumberFormat FORMAT=NumberFormat.getInstance();
    private final int factor;
    private final String units;
    Decimal(){
      this(1,null);
    }
    public Decimal(    int factor,    String units){
      this.factor=factor;
      this.units=units;
    }
    public String formatValue(    long value,    int format){
      return FORMAT.format(value / factor);
    }
    public String getUnits(    int format){
      return units;
    }
  }
private static final class Bytes extends ItemValueFormatter {
    private static final NumberFormat FORMAT=NumberFormat.getInstance();
    Bytes(){
    }
    public String formatValue(    long value,    int format){
switch (format) {
case FORMAT_TOOLTIP:
case FORMAT_DETAILS:
case FORMAT_EXPORT:
        return FORMAT.format(value);
case FORMAT_UNITS:
      String est=value == 0 ? "" : "~";
    return est + FORMAT.format(Math.round(value / 1024 / 1024));
default :
  return null;
}
}
public String getUnits(int format){
switch (format) {
case FORMAT_TOOLTIP:
case FORMAT_DETAILS:
case FORMAT_EXPORT:
return "B";
case FORMAT_UNITS:
return "MB";
default :
return null;
}
}
}
public static final class Percent extends ItemValueFormatter {
private static final NumberFormat PERCENT_FORMAT;
private static final NumberFormat NUMBER_FORMAT;
static {
PERCENT_FORMAT=NumberFormat.getPercentInstance();
PERCENT_FORMAT.setMinimumFractionDigits(1);
PERCENT_FORMAT.setMaximumIntegerDigits(3);
NUMBER_FORMAT=NumberFormat.getInstance();
NUMBER_FORMAT.setMinimumFractionDigits(1);
NUMBER_FORMAT.setMaximumIntegerDigits(3);
}
private double factor;
Percent(){
this(3);
}
public Percent(int decexp){
factor=Math.pow(10,decexp);
}
public String formatValue(long value,int format){
switch (format) {
case FORMAT_TOOLTIP:
case FORMAT_UNITS:
return PERCENT_FORMAT.format(value / factor);
case FORMAT_DETAILS:
case FORMAT_EXPORT:
return NUMBER_FORMAT.format(value * 100 / factor);
default :
return null;
}
}
public String getUnits(int format){
switch (format) {
case FORMAT_TOOLTIP:
case FORMAT_UNITS:
return null;
case FORMAT_DETAILS:
case FORMAT_EXPORT:
return "%";
default :
return null;
}
}
}
}
