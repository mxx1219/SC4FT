package groovy.lang;
import java.util.AbstractList;
import java.util.List;
import org.codehaus.groovy.runtime.InvokerHelper;
import org.codehaus.groovy.runtime.IteratorClosureAdapter;
public class ObjectRange extends AbstractList implements Range {
  private Comparable from;
  private Comparable to;
  private int size=-1;
  public ObjectRange(  Comparable from,  Comparable to){
    this.from=from;
    this.to=to;
  }
  public int hashCode(){
    return from.hashCode() ^ to.hashCode();
  }
  public boolean equals(  Object that){
    if (that instanceof ObjectRange) {
      return equals((ObjectRange)that);
    }
 else     if (that instanceof List) {
      return equals((List)that);
    }
    return false;
  }
  public boolean equals(  ObjectRange that){
    return InvokerHelper.compareEqual(this.from,that.from) && InvokerHelper.compareEqual(this.to,that.to);
  }
  public boolean equals(  List that){
    int size=size();
    if (that.size() == size) {
      for (int i=0; i < size; i++) {
        if (!InvokerHelper.compareEqual(get(i),that.get(i))) {
          return false;
        }
      }
      return true;
    }
    return false;
  }
  public Comparable getFrom(){
    return from;
  }
  public Comparable getTo(){
    return to;
  }
  public Object get(  int index){
    if (index < 0) {
      throw new IndexOutOfBoundsException("Index: " + index + " should not be negative");
    }
    Object value=from;
    for (int i=0; i < index; i++) {
      value=increment(value);
    }
    if (index >= size()) {
      throw new IndexOutOfBoundsException("Index: " + index + " is too big for range: "+ this);
    }
    return value;
  }
  public int size(){
    if (size == -1) {
      size=0;
      Object value=from;
      while (to.compareTo(value) >= 0) {
        value=increment(value);
        size++;
      }
    }
    return size;
  }
  public List subList(  int fromIndex,  int toIndex){
    if (fromIndex < 0) {
      throw new IndexOutOfBoundsException("fromIndex = " + fromIndex);
    }
    int size=size();
    if (toIndex > size) {
      throw new IndexOutOfBoundsException("toIndex = " + toIndex);
    }
    if (fromIndex > toIndex) {
      throw new IllegalArgumentException("fromIndex(" + fromIndex + ") > toIndex("+ toIndex+ ")");
    }
    if (--toIndex >= size) {
      return new ObjectRange((Comparable)get(fromIndex),(Comparable)getTo());
    }
 else {
      return new ObjectRange((Comparable)get(fromIndex),(Comparable)get(toIndex));
    }
  }
  public String toString(){
    return "" + from + ".."+ to;
  }
  public boolean contains(  Comparable value){
    int result=from.compareTo(value);
    if (result == 0) {
      return true;
    }
    return result < 0 && to.compareTo(value) > 0;
  }
  public void step(  int step,  Closure closure){
    if (step >= 0) {
      Comparable value=from;
      while (value.compareTo(to) <= 0) {
        closure.call(value);
        for (int i=0; i < step; i++) {
          value=(Comparable)increment(value);
        }
      }
    }
 else {
      step=-step;
      Comparable value=to;
      while (value.compareTo(from) >= 0) {
        closure.call(value);
        for (int i=0; i < step; i++) {
          value=(Comparable)decrement(value);
        }
      }
    }
  }
  public List step(  int step){
    IteratorClosureAdapter adapter=new IteratorClosureAdapter(this);
    step(step,adapter);
    return adapter.asList();
  }
  protected Object increment(  Object value){
    return InvokerHelper.invokeMethod(value,"increment",null);
  }
  protected Object decrement(  Object value){
    return InvokerHelper.invokeMethod(value,"decrement",null);
  }
}
