package cn.bingoogolapple.photopicker.activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.view.ViewCompat;
import android.support.v7.app.AppCompatDialog;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import java.io.File;
import java.util.ArrayList;
import cn.bingoogolapple.androidcommon.adapter.BGAOnItemChildClickListener;
import cn.bingoogolapple.photopicker.R;
import cn.bingoogolapple.photopicker.adapter.BGAPhotoPickerAdapter;
import cn.bingoogolapple.photopicker.model.BGAImageFolderModel;
import cn.bingoogolapple.photopicker.pw.BGAPhotoFolderPw;
import cn.bingoogolapple.photopicker.util.BGAAsyncTask;
import cn.bingoogolapple.photopicker.util.BGAImageCaptureManager;
import cn.bingoogolapple.photopicker.util.BGALoadPhotoTask;
import cn.bingoogolapple.photopicker.util.BGAPhotoPickerUtil;
import cn.bingoogolapple.photopicker.util.BGASpaceItemDecoration;
public class BGAPhotoPickerActivity extends BGAPPToolbarActivity implements BGAOnItemChildClickListener, BGAAsyncTask.Callback<ArrayList<BGAImageFolderModel>> {
  private static final String EXTRA_IMAGE_DIR="EXTRA_IMAGE_DIR";
  private static final String EXTRA_SELECTED_IMAGES="EXTRA_SELECTED_IMAGES";
  private static final String EXTRA_MAX_CHOOSE_COUNT="EXTRA_MAX_CHOOSE_COUNT";
  private static final int REQUEST_CODE_TAKE_PHOTO=1;
  private static final int REQUEST_CODE_PREVIEW=2;
  private TextView mTitleTv;
  private ImageView mArrowIv;
  private TextView mSubmitTv;
  private RecyclerView mContentRv;
  private BGAImageFolderModel mCurrentImageFolderModel;
  private boolean mTakePhotoEnabled;
  private int mMaxChooseCount=1;
  private String mTopRightBtnText;
  private ArrayList<BGAImageFolderModel> mImageFolderModels;
  private BGAPhotoPickerAdapter mPicAdapter;
  private BGAImageCaptureManager mImageCaptureManager;
  private BGAPhotoFolderPw mPhotoFolderPw;
  private long mLastShowPhotoFolderTime;
  private BGALoadPhotoTask mLoadPhotoTask;
  private AppCompatDialog mLoadingDialog;
  public static Intent newIntent(  Context context,  File imageDir,  int maxChooseCount,  ArrayList<String> selectedImages){
    Intent intent=new Intent(context,BGAPhotoPickerActivity.class);
    intent.putExtra(EXTRA_IMAGE_DIR,imageDir);
    intent.putExtra(EXTRA_MAX_CHOOSE_COUNT,maxChooseCount);
    intent.putStringArrayListExtra(EXTRA_SELECTED_IMAGES,selectedImages);
    return intent;
  }
  public static ArrayList<String> getSelectedImages(  Intent intent){
    return intent.getStringArrayListExtra(EXTRA_SELECTED_IMAGES);
  }
  @Override protected void initView(  Bundle savedInstanceState){
    setContentView(R.layout.bga_pp_activity_photo_picker);
    mContentRv=getViewById(R.id.rv_photo_picker_content);
  }
  @Override protected void setListener(){
    mPicAdapter=new BGAPhotoPickerAdapter(this,mContentRv);
    mPicAdapter.setOnItemChildClickListener(this);
  }
  @Override protected void processLogic(  Bundle savedInstanceState){
    File imageDir=(File)getIntent().getSerializableExtra(EXTRA_IMAGE_DIR);
    if (imageDir != null) {
      mTakePhotoEnabled=true;
      mImageCaptureManager=new BGAImageCaptureManager(this,imageDir);
    }
    mMaxChooseCount=getIntent().getIntExtra(EXTRA_MAX_CHOOSE_COUNT,1);
    if (mMaxChooseCount < 1) {
      mMaxChooseCount=1;
    }
    mTopRightBtnText=getString(R.string.bga_pp_confirm);
    GridLayoutManager layoutManager=new GridLayoutManager(this,BGASpaceItemDecoration.SPAN_COUNT,LinearLayoutManager.VERTICAL,false);
    mContentRv.setLayoutManager(layoutManager);
    mContentRv.addItemDecoration(new BGASpaceItemDecoration(getResources().getDimensionPixelSize(R.dimen.bga_pp_size_photo_divider)));
    ArrayList<String> selectedImages=getIntent().getStringArrayListExtra(EXTRA_SELECTED_IMAGES);
    if (selectedImages != null && selectedImages.size() > mMaxChooseCount) {
      String selectedPhoto=selectedImages.get(0);
      selectedImages.clear();
      selectedImages.add(selectedPhoto);
    }
    mContentRv.setAdapter(mPicAdapter);
    mPicAdapter.setSelectedImages(selectedImages);
  }
  @Override protected void onStart(){
    super.onStart();
    showLoadingDialog();
    mLoadPhotoTask=new BGALoadPhotoTask(this,this,mTakePhotoEnabled).perform();
  }
  private void showLoadingDialog(){
    if (mLoadingDialog == null) {
      mLoadingDialog=new AppCompatDialog(this);
      mLoadingDialog.setContentView(R.layout.bga_pp_dialog_loading);
      mLoadingDialog.setCancelable(false);
    }
    mLoadingDialog.show();
  }
  private void dismissLoadingDialog(){
    if (mLoadingDialog != null && mLoadingDialog.isShowing()) {
      mLoadingDialog.dismiss();
    }
  }
  @Override public boolean onCreateOptionsMenu(  Menu menu){
    getMenuInflater().inflate(R.menu.bga_pp_menu_photo_picker,menu);
    MenuItem menuItem=menu.findItem(R.id.item_photo_picker_title);
    View actionView=menuItem.getActionView();
    mTitleTv=(TextView)actionView.findViewById(R.id.tv_photo_picker_title);
    mArrowIv=(ImageView)actionView.findViewById(R.id.iv_photo_picker_arrow);
    mSubmitTv=(TextView)actionView.findViewById(R.id.tv_photo_picker_submit);
    mTitleTv.setOnClickListener(this);
    mArrowIv.setOnClickListener(this);
    mSubmitTv.setOnClickListener(this);
    mTitleTv.setText(R.string.bga_pp_all_image);
    if (mCurrentImageFolderModel != null) {
      mTitleTv.setText(mCurrentImageFolderModel.name);
    }
    renderTopRightBtn();
    return true;
  }
  @Override public void onClick(  View v){
    if ((v.getId() == R.id.tv_photo_picker_title || v.getId() == R.id.iv_photo_picker_arrow) && mImageFolderModels != null && mImageFolderModels.size() > 0 && System.currentTimeMillis() - mLastShowPhotoFolderTime > BGAPhotoFolderPw.ANIM_DURATION) {
      showPhotoFolderPw();
      mLastShowPhotoFolderTime=System.currentTimeMillis();
    }
 else     if (v.getId() == R.id.tv_photo_picker_submit) {
      returnSelectedImages(mPicAdapter.getSelectedImages());
    }
  }
  private void returnSelectedImages(  ArrayList<String> selectedImages){
    Intent intent=new Intent();
    intent.putStringArrayListExtra(EXTRA_SELECTED_IMAGES,selectedImages);
    setResult(RESULT_OK,intent);
    finish();
  }
  private void showPhotoFolderPw(){
    if (mPhotoFolderPw == null) {
      mPhotoFolderPw=new BGAPhotoFolderPw(this,mToolbar,new BGAPhotoFolderPw.Delegate(){
        @Override public void onSelectedFolder(        int position){
          reloadPhotos(position);
        }
        @Override public void executeDismissAnim(){
          ViewCompat.animate(mArrowIv).setDuration(BGAPhotoFolderPw.ANIM_DURATION).rotation(0).start();
        }
      }
);
    }
    mPhotoFolderPw.setDatas(mImageFolderModels);
    mPhotoFolderPw.show();
    ViewCompat.animate(mArrowIv).setDuration(BGAPhotoFolderPw.ANIM_DURATION).rotation(-180).start();
  }
  private void toastMaxCountTip(){
    BGAPhotoPickerUtil.show(this,getString(R.string.bga_pp_toast_photo_picker_max,mMaxChooseCount));
  }
  private void takePhoto(){
    try {
      startActivityForResult(mImageCaptureManager.getTakePictureIntent(),REQUEST_CODE_TAKE_PHOTO);
    }
 catch (    Exception e) {
      BGAPhotoPickerUtil.show(this,R.string.bga_pp_photo_not_support);
    }
  }
  @Override protected void onActivityResult(  int requestCode,  int resultCode,  Intent data){
    super.onActivityResult(requestCode,resultCode,data);
    if (resultCode == RESULT_OK) {
      if (requestCode == REQUEST_CODE_TAKE_PHOTO) {
        ArrayList<String> photos=new ArrayList<>();
        photos.add(mImageCaptureManager.getCurrentPhotoPath());
        startActivityForResult(BGAPhotoPickerPreviewActivity.newIntent(this,1,photos,photos,0,true),REQUEST_CODE_PREVIEW);
      }
 else       if (requestCode == REQUEST_CODE_PREVIEW) {
        if (BGAPhotoPickerPreviewActivity.getIsFromTakePhoto(data)) {
          mImageCaptureManager.refreshGallery();
        }
        returnSelectedImages(BGAPhotoPickerPreviewActivity.getSelectedImages(data));
      }
    }
 else     if (resultCode == RESULT_CANCELED && requestCode == REQUEST_CODE_PREVIEW) {
      if (BGAPhotoPickerPreviewActivity.getIsFromTakePhoto(data)) {
        mImageCaptureManager.deletePhotoFile();
      }
 else {
        mPicAdapter.setSelectedImages(BGAPhotoPickerPreviewActivity.getSelectedImages(data));
        renderTopRightBtn();
      }
    }
  }
  private void renderTopRightBtn(){
    if (mPicAdapter.getSelectedCount() == 0) {
      mSubmitTv.setEnabled(false);
      mSubmitTv.setText(mTopRightBtnText);
    }
 else {
      mSubmitTv.setEnabled(true);
      mSubmitTv.setText(mTopRightBtnText + "(" + mPicAdapter.getSelectedCount()+ "/"+ mMaxChooseCount+ ")");
    }
  }
  @Override public void onSaveInstanceState(  Bundle outState){
    if (mTakePhotoEnabled) {
      mImageCaptureManager.onSaveInstanceState(outState);
    }
    super.onSaveInstanceState(outState);
  }
  @Override protected void onRestoreInstanceState(  Bundle savedInstanceState){
    if (mTakePhotoEnabled) {
      mImageCaptureManager.onRestoreInstanceState(savedInstanceState);
    }
    super.onRestoreInstanceState(savedInstanceState);
  }
  @Override public void onItemChildClick(  ViewGroup viewGroup,  View view,  int position){
    if (view.getId() == R.id.iv_item_photo_picker_flag) {
      handleClickSelectFlagIv(position);
    }
 else     if (view.getId() == R.id.iv_item_photo_picker_photo) {
      handleClickPreviewIv(position);
    }
  }
  private void handleClickSelectFlagIv(  int position){
    String currentImage=mPicAdapter.getItem(position);
    if (mMaxChooseCount == 1) {
      if (mPicAdapter.getSelectedCount() > 0) {
        String selectedImage=mPicAdapter.getSelectedImages().remove(0);
        if (TextUtils.equals(selectedImage,currentImage)) {
          mPicAdapter.notifyItemChanged(position);
        }
 else {
          int preSelectedImagePosition=mPicAdapter.getDatas().indexOf(selectedImage);
          mPicAdapter.notifyItemChanged(preSelectedImagePosition);
          mPicAdapter.getSelectedImages().add(currentImage);
          mPicAdapter.notifyItemChanged(position);
        }
      }
 else {
        mPicAdapter.getSelectedImages().add(currentImage);
        mPicAdapter.notifyItemChanged(position);
      }
      renderTopRightBtn();
    }
 else {
      if (!mPicAdapter.getSelectedImages().contains(currentImage) && mPicAdapter.getSelectedCount() == mMaxChooseCount) {
        toastMaxCountTip();
      }
 else {
        if (mPicAdapter.getSelectedImages().contains(currentImage)) {
          mPicAdapter.getSelectedImages().remove(currentImage);
        }
 else {
          mPicAdapter.getSelectedImages().add(currentImage);
        }
        mPicAdapter.notifyItemChanged(position);
        renderTopRightBtn();
      }
    }
  }
  private void handleClickPreviewIv(  int position){
    if (mMaxChooseCount == 1) {
      if (mCurrentImageFolderModel.isTakePhotoEnabled() && position == 0) {
        takePhoto();
      }
 else {
        changeToPreview(position);
      }
    }
 else {
      if (mCurrentImageFolderModel.isTakePhotoEnabled() && position == 0) {
        if (mPicAdapter.getSelectedCount() == mMaxChooseCount) {
          toastMaxCountTip();
        }
 else {
          takePhoto();
        }
      }
 else {
        changeToPreview(position);
      }
    }
  }
  private void changeToPreview(  int position){
    int currentPosition=position;
    if (mCurrentImageFolderModel.isTakePhotoEnabled()) {
      currentPosition--;
    }
    startActivityForResult(BGAPhotoPickerPreviewActivity.newIntent(this,mMaxChooseCount,mPicAdapter.getSelectedImages(),(ArrayList<String>)mPicAdapter.getDatas(),currentPosition,false),REQUEST_CODE_PREVIEW);
  }
  private void reloadPhotos(  int position){
    mCurrentImageFolderModel=mImageFolderModels.get(position);
    if (mTitleTv != null) {
      mTitleTv.setText(mCurrentImageFolderModel.name);
    }
    mPicAdapter.setImageFolderModel(mCurrentImageFolderModel);
  }
  @Override public void onPostExecute(  ArrayList<BGAImageFolderModel> imageFolderModels){
    dismissLoadingDialog();
    mLoadPhotoTask=null;
    mImageFolderModels=imageFolderModels;
    reloadPhotos(mPhotoFolderPw == null ? 0 : mPhotoFolderPw.getCurrentPosition());
  }
  @Override public void onTaskCancelled(){
    dismissLoadingDialog();
    mLoadPhotoTask=null;
  }
  private void cancelLoadPhotoTask(){
    if (mLoadPhotoTask != null) {
      mLoadPhotoTask.cancelTask();
      mLoadPhotoTask=null;
    }
  }
  @Override protected void onDestroy(){
    dismissLoadingDialog();
    cancelLoadPhotoTask();
    mTitleTv=null;
    mArrowIv=null;
    mSubmitTv=null;
    mContentRv=null;
    mCurrentImageFolderModel=null;
    mTopRightBtnText=null;
    mImageFolderModels=null;
    mPicAdapter=null;
    mImageCaptureManager=null;
    mPhotoFolderPw=null;
    super.onDestroy();
  }
}
