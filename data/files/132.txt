package im.vector.adapters;
import android.content.Context;
import android.support.annotation.CallSuper;
import android.support.annotation.LayoutRes;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Filter;
import org.matrix.androidsdk.data.Room;
import java.util.ArrayList;
import java.util.List;
import im.vector.R;
import im.vector.util.RoomUtils;
public class HomeRoomAdapter extends AbsFilterableAdapter<RoomViewHolder> {
  private static final String LOG_TAG=HomeRoomAdapter.class.getSimpleName();
  private final int mLayoutRes;
  private final List<Room> mRooms;
  private final List<Room> mFilteredRooms;
  private final OnSelectRoomListener mListener;
  private final AbsAdapter.MoreRoomActionListener mMoreActionListener;
  public HomeRoomAdapter(  final Context context,  @LayoutRes final int layoutRes,  final OnSelectRoomListener listener,  final AbsAdapter.InvitationListener invitationListener,  final AbsAdapter.MoreRoomActionListener moreActionListener){
    super(context,invitationListener,moreActionListener);
    mRooms=new ArrayList<>();
    mFilteredRooms=new ArrayList<>();
    mLayoutRes=layoutRes;
    mListener=listener;
    mMoreActionListener=moreActionListener;
  }
  @Override public RoomViewHolder onCreateViewHolder(  ViewGroup viewGroup,  int viewType){
    final LayoutInflater layoutInflater=LayoutInflater.from(viewGroup.getContext());
    final View view=layoutInflater.inflate(mLayoutRes,viewGroup,false);
    return mLayoutRes == R.layout.adapter_item_room_invite ? new InvitationViewHolder(view) : new RoomViewHolder(view);
  }
  @Override public void onBindViewHolder(  final RoomViewHolder viewHolder,  int position){
    final Room room=mFilteredRooms.get(position);
    if (mLayoutRes == R.layout.adapter_item_room_invite) {
      final InvitationViewHolder invitationViewHolder=(InvitationViewHolder)viewHolder;
      invitationViewHolder.populateViews(mContext,mSession,room,mInvitationListener,mMoreActionListener);
    }
 else {
      viewHolder.populateViews(mContext,mSession,room,mSession.getDirectChatRoomIdsList().contains(room.getRoomId()),false,mMoreActionListener);
      viewHolder.itemView.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          mListener.onSelectRoom(room,viewHolder.getAdapterPosition());
        }
      }
);
      viewHolder.itemView.setOnLongClickListener(new View.OnLongClickListener(){
        @Override public boolean onLongClick(        View v){
          mListener.onLongClickRoom(v,room,viewHolder.getAdapterPosition());
          return true;
        }
      }
);
    }
  }
  @Override public int getItemCount(){
    return mFilteredRooms.size();
  }
  @Override protected Filter createFilter(){
    return new Filter(){
      @Override protected FilterResults performFiltering(      CharSequence constraint){
        final FilterResults results=new FilterResults();
        filterRooms(constraint);
        results.values=mFilteredRooms;
        results.count=mFilteredRooms.size();
        return results;
      }
      @Override protected void publishResults(      CharSequence constraint,      FilterResults results){
        onFilterDone(constraint);
        notifyDataSetChanged();
      }
    }
;
  }
  @CallSuper public void setRooms(  final List<Room> rooms){
    if (rooms != null) {
      mRooms.clear();
      mRooms.addAll(rooms);
      filterRooms(mCurrentFilterPattern);
    }
    notifyDataSetChanged();
  }
  public Room getRoom(  int position){
    if (position < mRooms.size()) {
      return mRooms.get(position);
    }
    return null;
  }
  public boolean isEmpty(){
    return mRooms.isEmpty();
  }
  public boolean hasNoResult(){
    return mFilteredRooms.isEmpty();
  }
  public int getBadgeCount(){
    int badgeCount=0;
    for (    Room room : mFilteredRooms) {
      if (null != room.getDataHandler() && (null != room.getDataHandler().getBingRulesManager())) {
        if (room.getDataHandler().getBingRulesManager().isRoomMentionOnly(room.getRoomId())) {
          badgeCount+=room.getHighlightCount();
        }
 else {
          badgeCount+=room.getNotificationCount();
        }
      }
    }
    return badgeCount;
  }
  private void filterRooms(  CharSequence constraint){
    mFilteredRooms.clear();
    mFilteredRooms.addAll(RoomUtils.getFilteredRooms(mContext,mSession,mRooms,constraint));
  }
public interface OnSelectRoomListener {
    void onSelectRoom(    Room room,    int position);
    void onLongClickRoom(    View v,    Room room,    int position);
  }
}
