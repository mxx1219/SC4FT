package com.android.systemui.statusbar.car;
import android.car.Car;
import android.car.CarNotConnectedException;
import android.car.drivingstate.CarDrivingStateEvent;
import android.car.drivingstate.CarDrivingStateManager;
import android.car.drivingstate.CarDrivingStateManager.CarDrivingStateEventListener;
import android.content.ComponentName;
import android.content.Context;
import android.content.ServiceConnection;
import android.os.IBinder;
import android.util.Log;
import androidx.annotation.NonNull;
public class DrivingStateHelper {
  public static final String TAG="DrivingStateHelper";
  private final Context mContext;
  private CarDrivingStateManager mDrivingStateManager;
  private Car mCar;
  private CarDrivingStateEventListener mDrivingStateHandler;
  public DrivingStateHelper(  Context context,  @NonNull CarDrivingStateEventListener drivingStateHandler){
    mContext=context;
    mDrivingStateHandler=drivingStateHandler;
  }
  public boolean isCurrentlyDriving(){
    try {
      CarDrivingStateEvent currentState=mDrivingStateManager.getCurrentCarDrivingState();
      if (currentState != null) {
        return currentState.eventValue == CarDrivingStateEvent.DRIVING_STATE_IDLING || currentState.eventValue == CarDrivingStateEvent.DRIVING_STATE_MOVING;
      }
    }
 catch (    CarNotConnectedException e) {
      Log.e(TAG,"Cannot determine current driving state. Car not connected",e);
    }
    return false;
  }
  public void connectToCarService(){
    mCar=Car.createCar(mContext,mCarConnectionListener);
    if (mCar != null) {
      mCar.connect();
    }
  }
  public void disconnectFromCarService(){
    if (mCar != null) {
      mCar.disconnect();
    }
  }
  private final ServiceConnection mCarConnectionListener=new ServiceConnection(){
    public void onServiceConnected(    ComponentName name,    IBinder service){
      logD("Car Service connected");
      try {
        mDrivingStateManager=(CarDrivingStateManager)mCar.getCarManager(Car.CAR_DRIVING_STATE_SERVICE);
        if (mDrivingStateManager != null) {
          mDrivingStateManager.registerListener(mDrivingStateHandler);
          mDrivingStateHandler.onDrivingStateChanged(mDrivingStateManager.getCurrentCarDrivingState());
        }
 else {
          Log.e(TAG,"CarDrivingStateService service not available");
        }
      }
 catch (      CarNotConnectedException e) {
        Log.e(TAG,"Car not connected",e);
      }
    }
    @Override public void onServiceDisconnected(    ComponentName name){
      destroyDrivingStateManager();
    }
  }
;
  private void destroyDrivingStateManager(){
    try {
      if (mDrivingStateManager != null) {
        mDrivingStateManager.unregisterListener();
      }
    }
 catch (    CarNotConnectedException e) {
      Log.e(TAG,"Error unregistering listeners",e);
    }
  }
  private void logD(  String message){
    if (Log.isLoggable(TAG,Log.DEBUG)) {
      Log.d(TAG,message);
    }
  }
}
