package io.strimzi.operator.common.operator.resource;
import io.fabric8.kubernetes.api.model.rbac.ClusterRole;
import io.fabric8.kubernetes.api.model.rbac.ClusterRoleBuilder;
import io.fabric8.kubernetes.api.model.rbac.ClusterRoleList;
import io.fabric8.kubernetes.api.model.rbac.DoneableClusterRole;
import io.fabric8.kubernetes.api.model.rbac.PolicyRule;
import io.fabric8.kubernetes.api.model.rbac.PolicyRuleBuilder;
import io.fabric8.kubernetes.client.KubernetesClient;
import io.fabric8.kubernetes.client.dsl.Resource;
import io.vertx.junit5.VertxExtension;
import io.vertx.junit5.VertxTestContext;
import org.junit.jupiter.api.extension.ExtendWith;
import java.util.Collections.singletonMap;
import org.hamcrest.CoreMatchers.is;
import org.hamcrest.MatcherAssert.assertThat;
import org.hamcrest.Matchers.hasSize;
@ExtendWith(VertxExtension.class) public class ClusterRoleOperatorIT extends AbstractNonNamespacedResourceOperatorIT<KubernetesClient,ClusterRole,ClusterRoleList,DoneableClusterRole,Resource<ClusterRole,DoneableClusterRole>> {
  @Override protected AbstractNonNamespacedResourceOperator<KubernetesClient,ClusterRole,ClusterRoleList,DoneableClusterRole,Resource<ClusterRole,DoneableClusterRole>> operator(){
  }
  @Override protected ClusterRole getOriginal(){
    PolicyRule rule=new PolicyRuleBuilder().withApiGroups("").withResources("nodes").withVerbs("get").build();
    return new ClusterRoleBuilder().withNewMetadata().withName(resourceName).withLabels(singletonMap("state","new")).endMetadata().withRules(rule).build();
  }
  @Override protected ClusterRole getModified(){
    PolicyRule rule=new PolicyRuleBuilder().withApiGroups("").withResources("nodes").withVerbs("get","list").build();
    return new ClusterRoleBuilder().withNewMetadata().withName(resourceName).withLabels(singletonMap("state","modified")).endMetadata().withRules(rule).build();
  }
  @Override protected void assertResources(  VertxTestContext context,  ClusterRole expected,  ClusterRole actual){
    context.verify(null);
  }
}
