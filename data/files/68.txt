package org.ehcache.clustered.common.internal.messages;
import org.junit.Test;
import java.util.UUID;
import org.mockito.Matchers.any;
import org.mockito.Mockito.mock;
import org.mockito.Mockito.never;
import org.mockito.Mockito.only;
import org.mockito.Mockito.times;
import org.mockito.Mockito.verify;
public class EhcacheCodecTest {
  private static final UUID CLIENT_ID=UUID.randomUUID();
  @Test public void encodeMessage() throws Exception {
    ServerStoreOpCodec serverStoreOpCodec=mock(ServerStoreOpCodec.class);
    LifeCycleMessageCodec lifeCycleMessageCodec=mock(LifeCycleMessageCodec.class);
    StateRepositoryOpCodec stateRepositoryOpCodec=mock(StateRepositoryOpCodec.class);
    ClientIDTrackerMessageCodec clientIDTrackerMessageCodec=mock(ClientIDTrackerMessageCodec.class);
    EhcacheCodec codec=new EhcacheCodec(serverStoreOpCodec,lifeCycleMessageCodec,stateRepositoryOpCodec,null,clientIDTrackerMessageCodec);
    LifecycleMessage.DestroyServerStore lifecycleMessage=new LifecycleMessage.DestroyServerStore("foo",CLIENT_ID);
    codec.encodeMessage(lifecycleMessage);
    verify(lifeCycleMessageCodec,only()).encode(any(LifecycleMessage.class));
    verify(serverStoreOpCodec,never()).encode(any(ServerStoreOpMessage.class));
    verify(stateRepositoryOpCodec,never()).encode(any(StateRepositoryOpMessage.class));
    verify(clientIDTrackerMessageCodec,never()).encode(any(ClientIDTrackerMessage.class));
    ServerStoreOpMessage.ClearMessage serverStoreOpMessage=new ServerStoreOpMessage.ClearMessage("foo",CLIENT_ID);
    codec.encodeMessage(serverStoreOpMessage);
    verify(lifeCycleMessageCodec,only()).encode(any(LifecycleMessage.class));
    verify(serverStoreOpCodec,only()).encode(any(ServerStoreOpMessage.class));
    verify(stateRepositoryOpCodec,never()).encode(any(StateRepositoryOpMessage.class));
    verify(clientIDTrackerMessageCodec,never()).encode(any(ClientIDTrackerMessage.class));
    StateRepositoryOpMessage.EntrySetMessage stateRepositoryOpMessage=new StateRepositoryOpMessage.EntrySetMessage("foo","bar",CLIENT_ID);
    codec.encodeMessage(stateRepositoryOpMessage);
    verify(lifeCycleMessageCodec,only()).encode(any(LifecycleMessage.class));
    verify(serverStoreOpCodec,only()).encode(any(ServerStoreOpMessage.class));
    verify(stateRepositoryOpCodec,only()).encode(any(StateRepositoryOpMessage.class));
    verify(clientIDTrackerMessageCodec,never()).encode(any(ClientIDTrackerMessage.class));
    ClientIDTrackerMessage clientIDTrackerMessage=new ClientIDTrackerMessage(20L,CLIENT_ID);
    codec.encodeMessage(clientIDTrackerMessage);
    verify(lifeCycleMessageCodec,only()).encode(any(LifecycleMessage.class));
    verify(serverStoreOpCodec,only()).encode(any(ServerStoreOpMessage.class));
    verify(stateRepositoryOpCodec,only()).encode(any(StateRepositoryOpMessage.class));
    verify(clientIDTrackerMessageCodec,only()).encode(any(ClientIDTrackerMessage.class));
  }
  @Test public void decodeMessage() throws Exception {
    ServerStoreOpCodec serverStoreOpCodec=mock(ServerStoreOpCodec.class);
    LifeCycleMessageCodec lifeCycleMessageCodec=mock(LifeCycleMessageCodec.class);
    StateRepositoryOpCodec stateRepositoryOpCodec=mock(StateRepositoryOpCodec.class);
    ClientIDTrackerMessageCodec clientIDTrackerMessageCodec=mock(ClientIDTrackerMessageCodec.class);
    EhcacheCodec codec=new EhcacheCodec(serverStoreOpCodec,lifeCycleMessageCodec,stateRepositoryOpCodec,null,clientIDTrackerMessageCodec);
    byte[] payload=new byte[1];
    for (byte i=1; i <= EhcacheEntityMessage.Type.LIFECYCLE_OP.getCode(); i++) {
      payload[0]=i;
      codec.decodeMessage(payload);
    }
    verify(lifeCycleMessageCodec,times(10)).decode(payload);
    verify(serverStoreOpCodec,never()).decode(payload);
    verify(stateRepositoryOpCodec,never()).decode(payload);
    verify(clientIDTrackerMessageCodec,never()).decode(payload);
    for (byte i=11; i <= EhcacheEntityMessage.Type.SERVER_STORE_OP.getCode(); i++) {
      payload[0]=i;
      codec.decodeMessage(payload);
    }
    verify(lifeCycleMessageCodec,times(10)).decode(payload);
    verify(serverStoreOpCodec,times(10)).decode(payload);
    verify(stateRepositoryOpCodec,never()).decode(payload);
    verify(clientIDTrackerMessageCodec,never()).decode(payload);
    for (byte i=21; i <= EhcacheEntityMessage.Type.STATE_REPO_OP.getCode(); i++) {
      payload[0]=i;
      codec.decodeMessage(payload);
    }
    verify(lifeCycleMessageCodec,times(10)).decode(payload);
    verify(serverStoreOpCodec,times(10)).decode(payload);
    verify(stateRepositoryOpCodec,times(10)).decode(payload);
    verify(clientIDTrackerMessageCodec,never()).decode(payload);
    for (byte i=31; i <= EhcacheEntityMessage.Type.REPLICATION_OP.getCode(); i++) {
      payload[0]=i;
      codec.decodeMessage(payload);
    }
    verify(lifeCycleMessageCodec,times(10)).decode(payload);
    verify(serverStoreOpCodec,times(10)).decode(payload);
    verify(stateRepositoryOpCodec,times(10)).decode(payload);
    verify(clientIDTrackerMessageCodec,times(10)).decode(payload);
  }
}
