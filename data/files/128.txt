package org.elasticsearch.action.get;
import org.elasticsearch.action.ActionListener;
import org.elasticsearch.action.RoutingMissingException;
import org.elasticsearch.action.support.ActionFilters;
import org.elasticsearch.action.support.single.shard.TransportSingleShardAction;
import org.elasticsearch.cluster.ClusterState;
import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;
import org.elasticsearch.cluster.routing.ShardIterator;
import org.elasticsearch.cluster.service.ClusterService;
import org.elasticsearch.common.inject.Inject;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.index.IndexService;
import org.elasticsearch.index.get.GetResult;
import org.elasticsearch.index.shard.IndexShard;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.indices.IndicesService;
import org.elasticsearch.threadpool.ThreadPool;
import org.elasticsearch.transport.TransportService;
import java.io.IOException;
public class TransportGetAction extends TransportSingleShardAction<GetRequest,GetResponse> {
  private final IndicesService indicesService;
  @Inject public TransportGetAction(  Settings settings,  ClusterService clusterService,  TransportService transportService,  IndicesService indicesService,  ThreadPool threadPool,  ActionFilters actionFilters,  IndexNameExpressionResolver indexNameExpressionResolver){
    super(settings,GetAction.NAME,threadPool,clusterService,transportService,actionFilters,indexNameExpressionResolver,null,ThreadPool.Names.GET);
    this.indicesService=indicesService;
  }
  @Override protected boolean resolveIndex(  GetRequest request){
    return true;
  }
  @Override protected ShardIterator shards(  ClusterState state,  InternalRequest request){
    return clusterService.operationRouting().getShards(clusterService.state(),request.concreteIndex(),request.request().id(),request.request().routing(),request.request().preference());
  }
  @Override protected void resolveRequest(  ClusterState state,  InternalRequest request){
    request.request().routing(state.metaData().resolveIndexRouting(request.request().parent(),request.request().routing(),request.request().index()));
    if (request.request().routing() == null && state.getMetaData().routingRequired(request.concreteIndex(),request.request().type())) {
      throw new RoutingMissingException(request.concreteIndex(),request.request().type(),request.request().id());
    }
  }
  @Override protected void asyncShardOperation(  GetRequest request,  ShardId shardId,  ActionListener<GetResponse> listener) throws IOException {
    IndexService indexService=indicesService.indexServiceSafe(shardId.getIndex());
    IndexShard indexShard=indexService.getShard(shardId.id());
    if (request.realtime()) {
      listener.onResponse(shardOperation(request,shardId));
    }
 else {
      indexShard.awaitShardSearchActive(null);
    }
  }
  @Override protected GetResponse shardOperation(  GetRequest request,  ShardId shardId){
    IndexService indexService=indicesService.indexServiceSafe(shardId.getIndex());
    IndexShard indexShard=indexService.getShard(shardId.id());
    if (request.refresh() && !request.realtime()) {
      indexShard.refresh("refresh_flag_get");
    }
    GetResult result=indexShard.getService().get(request.type(),request.id(),request.storedFields(),request.realtime(),request.version(),request.versionType(),request.fetchSourceContext());
    return new GetResponse(result);
  }
  @Override protected GetResponse newResponse(){
    return new GetResponse();
  }
}
