package org.killbill.billing.catalog;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import javax.annotation.Nullable;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlRootElement;
import org.joda.time.DateTime;
import org.killbill.billing.ErrorCode;
import org.killbill.billing.catalog.api.BillingActionPolicy;
import org.killbill.billing.catalog.api.BillingAlignment;
import org.killbill.billing.catalog.api.CatalogApiException;
import org.killbill.billing.catalog.api.Currency;
import org.killbill.billing.catalog.api.Listing;
import org.killbill.billing.catalog.api.Plan;
import org.killbill.billing.catalog.api.PlanAlignmentCreate;
import org.killbill.billing.catalog.api.PlanChangeResult;
import org.killbill.billing.catalog.api.PlanPhase;
import org.killbill.billing.catalog.api.PlanPhasePriceOverridesWithCallContext;
import org.killbill.billing.catalog.api.PlanPhaseSpecifier;
import org.killbill.billing.catalog.api.PlanSpecifier;
import org.killbill.billing.catalog.api.PriceList;
import org.killbill.billing.catalog.api.PriceListSet;
import org.killbill.billing.catalog.api.Product;
import org.killbill.billing.catalog.api.StaticCatalog;
import org.killbill.billing.catalog.api.Unit;
import org.killbill.billing.catalog.api.VersionedCatalog;
import org.killbill.clock.Clock;
import org.killbill.xmlloader.ValidatingConfig;
import org.killbill.xmlloader.ValidationError;
import org.killbill.xmlloader.ValidationErrors;
import org.killbill.billing.ErrorCode.CAT_NO_SUCH_PLAN;
@XmlRootElement(name="catalogs") @XmlAccessorType(XmlAccessType.NONE) public class DefaultVersionedCatalog extends ValidatingConfig<DefaultVersionedCatalog> implements VersionedCatalog<StandaloneCatalog>, Externalizable {
  private static final long serialVersionUID=3181874902672322725L;
  private Clock clock;
  @XmlElementWrapper(name="versions",required=true) @XmlElement(name="version",required=true) private final List<StandaloneCatalog> versions;
  @XmlElement(required=true) private String catalogName;
  public DefaultVersionedCatalog(){
    this.clock=null;
    this.versions=new ArrayList<StandaloneCatalog>();
  }
  public DefaultVersionedCatalog(  final Clock clock){
    this.clock=clock;
    this.versions=new ArrayList<StandaloneCatalog>();
  }
  private StandaloneCatalog versionForDate(  final DateTime date) throws CatalogApiException {
    return versions.get(indexOfVersionForDate(date.toDate()));
  }
  private List<StandaloneCatalog> versionsBeforeDate(  final Date date) throws CatalogApiException {
    final List<StandaloneCatalog> result=new ArrayList<StandaloneCatalog>();
    final int index=indexOfVersionForDate(date);
    for (int i=0; i <= index; i++) {
      result.add(versions.get(i));
    }
    return result;
  }
  private int indexOfVersionForDate(  final Date date) throws CatalogApiException {
    for (int i=versions.size() - 1; i >= 0; i--) {
      final StandaloneCatalog c=versions.get(i);
      if (c.getEffectiveDate().getTime() <= date.getTime()) {
        return i;
      }
    }
    if (!versions.isEmpty()) {
      return 0;
    }
    throw new CatalogApiException(ErrorCode.CAT_NO_CATALOG_FOR_GIVEN_DATE,date.toString());
  }
  private CatalogPlanEntry findCatalogPlanEntry(  final PlanRequestWrapper wrapper,  final DateTime requestedDate,  final DateTime subscriptionChangePlanDate) throws CatalogApiException {
    final List<StandaloneCatalog> catalogs=versionsBeforeDate(requestedDate.toDate());
    if (catalogs.isEmpty()) {
      throw new CatalogApiException(ErrorCode.CAT_NO_CATALOG_FOR_GIVEN_DATE,requestedDate.toDate().toString());
    }
    CatalogPlanEntry candidateInSubsequentCatalog=null;
    for (int i=catalogs.size() - 1; i >= 0; i--) {
      final StandaloneCatalog c=catalogs.get(i);
      final Plan plan;
      try {
        plan=wrapper.findPlan(c);
      }
 catch (      final CatalogApiException e) {
        if (e.getCode() != CAT_NO_SUCH_PLAN.getCode() && e.getCode() != ErrorCode.CAT_PLAN_NOT_FOUND.getCode()) {
          throw e;
        }
 else {
          continue;
        }
      }
      final boolean oldestCatalog=(i == 0);
      final DateTime catalogEffectiveDate=CatalogDateHelper.toUTCDateTime(c.getEffectiveDate());
      final boolean catalogOlderThanSubscriptionChangePlanDate=!subscriptionChangePlanDate.isBefore(catalogEffectiveDate);
      if (oldestCatalog || catalogOlderThanSubscriptionChangePlanDate) {
        return new CatalogPlanEntry(c,plan);
      }
 else {
        if (plan.getEffectiveDateForExistingSubscriptions() != null) {
          final DateTime existingSubscriptionDate=CatalogDateHelper.toUTCDateTime(plan.getEffectiveDateForExistingSubscriptions());
          if (requestedDate.compareTo(existingSubscriptionDate) >= 0) {
            return new CatalogPlanEntry(c,plan);
          }
        }
 else         if (candidateInSubsequentCatalog == null) {
          candidateInSubsequentCatalog=new CatalogPlanEntry(c,plan);
        }
      }
    }
    if (candidateInSubsequentCatalog != null) {
      return candidateInSubsequentCatalog;
    }
    final PlanSpecifier spec=wrapper.getSpec();
    throw new CatalogApiException(ErrorCode.CAT_PLAN_NOT_FOUND,spec.getPlanName() != null ? spec.getPlanName() : "undefined",spec.getProductName() != null ? spec.getProductName() : "undefined",spec.getBillingPeriod() != null ? spec.getBillingPeriod() : "undefined",spec.getPriceListName() != null ? spec.getPriceListName() : "undefined");
  }
  public Clock getClock(){
    return clock;
  }
  @Override public List<StandaloneCatalog> getVersions(){
    return versions;
  }
  public void add(  final StandaloneCatalog e){
    if (catalogName == null && e.getCatalogName() != null) {
      catalogName=e.getCatalogName();
    }
    versions.add(e);
    Collections.sort(versions,new Comparator<StandaloneCatalog>(){
      @Override public int compare(      final StandaloneCatalog c1,      final StandaloneCatalog c2){
        return c1.getEffectiveDate().compareTo(c2.getEffectiveDate());
      }
    }
);
  }
  @Override public String getCatalogName(){
    return catalogName;
  }
  @Override public Collection<Product> getProducts(  final DateTime requestedDate) throws CatalogApiException {
    return versionForDate(requestedDate).getCurrentProducts();
  }
  @Override public Currency[] getSupportedCurrencies(  final DateTime requestedDate) throws CatalogApiException {
    return versionForDate(requestedDate).getCurrentSupportedCurrencies();
  }
  @Override public Unit[] getUnits(  final DateTime requestedDate) throws CatalogApiException {
    return versionForDate(requestedDate).getCurrentUnits();
  }
  @Override public Collection<Plan> getPlans(  final DateTime requestedDate) throws CatalogApiException {
    return versionForDate(requestedDate).getCurrentPlans();
  }
  @Override public PriceListSet getPriceLists(  final DateTime requestedDate) throws CatalogApiException {
    return versionForDate(requestedDate).getPriceLists();
  }
  @Override public Plan findPlan(  final String name,  final DateTime requestedDate) throws CatalogApiException {
    return versionForDate(requestedDate).findCurrentPlan(name);
  }
  @Override public Plan createOrFindPlan(  final PlanSpecifier spec,  final PlanPhasePriceOverridesWithCallContext overrides,  final DateTime requestedDate) throws CatalogApiException {
    return versionForDate(requestedDate).createOrFindCurrentPlan(spec,overrides);
  }
  @Override public Plan findPlan(  final String name,  final DateTime requestedDate,  final DateTime subscriptionChangePlanDate) throws CatalogApiException {
    final CatalogPlanEntry entry=findCatalogPlanEntry(new PlanRequestWrapper(name),requestedDate,subscriptionChangePlanDate);
    return entry.getPlan();
  }
  @Override public Plan createOrFindPlan(  final PlanSpecifier spec,  final PlanPhasePriceOverridesWithCallContext overrides,  final DateTime requestedDate,  final DateTime subscriptionChangePlanDate) throws CatalogApiException {
    final CatalogPlanEntry entry=findCatalogPlanEntry(new PlanRequestWrapper(spec,overrides),requestedDate,subscriptionChangePlanDate);
    return entry.getPlan();
  }
  @Override public Product findProduct(  final String name,  final DateTime requestedDate) throws CatalogApiException {
    return versionForDate(requestedDate).findCurrentProduct(name);
  }
  @Override public PlanPhase findPhase(  final String phaseName,  final DateTime requestedDate,  final DateTime subscriptionChangePlanDate) throws CatalogApiException {
    final String planName=DefaultPlanPhase.planName(phaseName);
    final Plan plan=findPlan(planName,requestedDate,subscriptionChangePlanDate);
    return plan.findPhase(phaseName);
  }
  @Override public PriceList findPriceListForPlan(  final String planName,  final DateTime requestedDate,  final DateTime subscriptionChangePlanDate) throws CatalogApiException {
    final CatalogPlanEntry entry=findCatalogPlanEntry(new PlanRequestWrapper(planName),requestedDate,subscriptionChangePlanDate);
    return entry.getStaticCatalog().findCurrentPricelist(entry.getPlan().getPriceListName());
  }
  @Override public BillingActionPolicy planCancelPolicy(  final PlanPhaseSpecifier planPhase,  final DateTime requestedDate,  final DateTime subscriptionChangePlanDate) throws CatalogApiException {
    final StaticCatalog staticCatalog=getStaticCatalog(planPhase,requestedDate,subscriptionChangePlanDate);
    return staticCatalog.planCancelPolicy(planPhase);
  }
  @Override public PlanAlignmentCreate planCreateAlignment(  final PlanSpecifier specifier,  final DateTime requestedDate,  final DateTime subscriptionChangePlanDate) throws CatalogApiException {
    final StaticCatalog staticCatalog=getStaticCatalog(specifier,requestedDate,subscriptionChangePlanDate);
    return staticCatalog.planCreateAlignment(specifier);
  }
  @Override public BillingAlignment billingAlignment(  final PlanPhaseSpecifier planPhase,  final DateTime requestedDate,  final DateTime subscriptionChangePlanDate) throws CatalogApiException {
    final StaticCatalog staticCatalog=getStaticCatalog(planPhase,requestedDate,subscriptionChangePlanDate);
    return staticCatalog.billingAlignment(planPhase);
  }
  @Override public PlanChangeResult planChange(  final PlanPhaseSpecifier from,  final PlanSpecifier to,  final DateTime requestedDate) throws CatalogApiException {
    final StaticCatalog staticCatalog=versionForDate(requestedDate);
    return staticCatalog.planChange(from,to);
  }
  private StaticCatalog getStaticCatalog(  final PlanSpecifier spec,  final DateTime requestedDate,  final DateTime subscriptionChangePlanDate) throws CatalogApiException {
    final CatalogPlanEntry entry=findCatalogPlanEntry(new PlanRequestWrapper(spec),requestedDate,subscriptionChangePlanDate);
    return entry.getStaticCatalog();
  }
  @Override public void initialize(  final DefaultVersionedCatalog catalog){
    super.initialize(catalog);
    CatalogSafetyInitializer.initializeNonRequiredNullFieldsWithDefaultValue(this);
  }
  @Override public ValidationErrors validate(  final DefaultVersionedCatalog catalog,  final ValidationErrors errors){
    final Set<Date> effectiveDates=new TreeSet<Date>();
    for (    final StandaloneCatalog c : versions) {
      if (effectiveDates.contains(c.getEffectiveDate())) {
        errors.add(new ValidationError(String.format("Catalog effective date '%s' already exists for a previous version",c.getEffectiveDate()),VersionedCatalog.class,""));
      }
 else {
        effectiveDates.add(c.getEffectiveDate());
      }
      if (!c.getCatalogName().equals(catalogName)) {
        errors.add(new ValidationError(String.format("Catalog name '%s' is not consistent across versions ",c.getCatalogName()),VersionedCatalog.class,""));
      }
      errors.addAll(c.validate(c,errors));
    }
    validateUniformPlanShapeAcrossVersions(errors);
    return errors;
  }
  private void validateUniformPlanShapeAcrossVersions(  final ValidationErrors errors){
    for (int i=0; i < versions.size(); i++) {
      final StandaloneCatalog c=versions.get(i);
      for (      final Plan plan : c.getPlans()) {
        for (int j=i + 1; j < versions.size(); j++) {
          final StandaloneCatalog next=versions.get(j);
          final Plan targetPlan=next.getPlans().findByName(plan.getName());
          if (targetPlan != null) {
            validatePlanShape(plan,targetPlan,errors);
          }
        }
      }
    }
  }
  private void validatePlanShape(  final Plan plan,  final Plan targetPlan,  final ValidationErrors errors){
    if (plan.getAllPhases().length != targetPlan.getAllPhases().length) {
      errors.add(new ValidationError(String.format("Number of phases for plan '%s' differs between version '%s' and '%s'",plan.getName(),plan.getCatalog().getEffectiveDate(),targetPlan.getCatalog().getEffectiveDate()),VersionedCatalog.class,""));
    }
    for (int i=0; i < plan.getAllPhases().length; i++) {
      final PlanPhase cur=plan.getAllPhases()[i];
      final PlanPhase target=targetPlan.getAllPhases()[i];
      if (!cur.getName().equals(target.getName())) {
        errors.add(new ValidationError(String.format("Phase '%s'for plan '%s' in version '%s' does not exist in version '%s'",cur.getName(),plan.getName(),plan.getCatalog().getEffectiveDate(),targetPlan.getCatalog().getEffectiveDate()),VersionedCatalog.class,""));
      }
    }
  }
  @Override public Plan getNextPlanVersion(  final Plan curPlan){
    boolean foundCurVersion=false;
    StandaloneCatalog nextCatalogVersion=null;
    for (int i=0; i < versions.size(); i++) {
      final StandaloneCatalog curCatalogversion=versions.get(i);
      if (foundCurVersion) {
        nextCatalogVersion=curCatalogversion;
        break;
      }
      if (curCatalogversion.getEffectiveDate().compareTo(curPlan.getCatalog().getEffectiveDate()) == 0) {
        foundCurVersion=true;
      }
    }
    if (nextCatalogVersion == null) {
      return null;
    }
    return nextCatalogVersion.getPlans().findByName(curPlan.getName());
  }
  @Override public Date getEffectiveDate(){
    final DateTime utcNow=clock.getUTCNow();
    try {
      return versionForDate(utcNow).getEffectiveDate();
    }
 catch (    final CatalogApiException e) {
      throw new IllegalStateException(String.format("Catalog misconfiguration: there is no active catalog version for now=%s",utcNow),e);
    }
  }
  @Override public Date getStandaloneCatalogEffectiveDate(  final DateTime requestedDate) throws CatalogApiException {
    return versionForDate(requestedDate).getEffectiveDate();
  }
  @Override public Currency[] getCurrentSupportedCurrencies() throws CatalogApiException {
    return versionForDate(clock.getUTCNow()).getCurrentSupportedCurrencies();
  }
  @Override public Collection<Product> getCurrentProducts() throws CatalogApiException {
    return versionForDate(clock.getUTCNow()).getCurrentProducts();
  }
  @Override public Unit[] getCurrentUnits() throws CatalogApiException {
    return versionForDate(clock.getUTCNow()).getCurrentUnits();
  }
  @Override public Collection<Plan> getCurrentPlans() throws CatalogApiException {
    return versionForDate(clock.getUTCNow()).getCurrentPlans();
  }
  @Override public Plan createOrFindCurrentPlan(  final PlanSpecifier spec,  final PlanPhasePriceOverridesWithCallContext overrides) throws CatalogApiException {
    return versionForDate(clock.getUTCNow()).createOrFindCurrentPlan(spec,overrides);
  }
  @Override public Plan findCurrentPlan(  final String name) throws CatalogApiException {
    return versionForDate(clock.getUTCNow()).findCurrentPlan(name);
  }
  @Override public Product findCurrentProduct(  final String name) throws CatalogApiException {
    return versionForDate(clock.getUTCNow()).findCurrentProduct(name);
  }
  @Override public PlanPhase findCurrentPhase(  final String name) throws CatalogApiException {
    return versionForDate(clock.getUTCNow()).findCurrentPhase(name);
  }
  @Override public PriceList findCurrentPricelist(  final String name) throws CatalogApiException {
    return versionForDate(clock.getUTCNow()).findCurrentPriceList(name);
  }
  @Override public PlanChangeResult planChange(  final PlanPhaseSpecifier from,  final PlanSpecifier to) throws CatalogApiException {
    return versionForDate(clock.getUTCNow()).planChange(from,to);
  }
  @Override public BillingActionPolicy planCancelPolicy(  final PlanPhaseSpecifier planPhase) throws CatalogApiException {
    return versionForDate(clock.getUTCNow()).planCancelPolicy(planPhase);
  }
  @Override public PlanAlignmentCreate planCreateAlignment(  final PlanSpecifier specifier) throws CatalogApiException {
    return versionForDate(clock.getUTCNow()).planCreateAlignment(specifier);
  }
  @Override public BillingAlignment billingAlignment(  final PlanPhaseSpecifier planPhase) throws CatalogApiException {
    return versionForDate(clock.getUTCNow()).billingAlignment(planPhase);
  }
  @Override public List<Listing> getAvailableAddOnListings(  final String baseProductName,  @Nullable final String priceListName) throws CatalogApiException {
    return versionForDate(clock.getUTCNow()).getAvailableAddOnListings(baseProductName,priceListName);
  }
  @Override public List<Listing> getAvailableBasePlanListings() throws CatalogApiException {
    return versionForDate(clock.getUTCNow()).getAvailableBasePlanListings();
  }
  @Override public void readExternal(  final ObjectInput in) throws IOException, ClassNotFoundException {
    this.catalogName=in.readBoolean() ? in.readUTF() : null;
    this.versions.addAll((Collection<? extends StandaloneCatalog>)in.readObject());
  }
  @Override public void writeExternal(  final ObjectOutput oo) throws IOException {
    oo.writeBoolean(catalogName != null);
    if (catalogName != null) {
      oo.writeUTF(catalogName);
    }
    oo.writeObject(versions);
  }
  @Override public boolean equals(  final Object o){
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    final DefaultVersionedCatalog that=(DefaultVersionedCatalog)o;
    if (versions != null ? !versions.equals(that.versions) : that.versions != null) {
      return false;
    }
    return catalogName != null ? catalogName.equals(that.catalogName) : that.catalogName == null;
  }
  @Override public int hashCode(){
    int result=versions != null ? versions.hashCode() : 0;
    result=31 * result + (catalogName != null ? catalogName.hashCode() : 0);
    return result;
  }
  public void initialize(  final Clock clock,  final DefaultVersionedCatalog tenantCatalog){
    this.clock=clock;
    initialize(tenantCatalog);
  }
private static class CatalogPlanEntry {
    private final StaticCatalog staticCatalog;
    private final Plan plan;
    public CatalogPlanEntry(    final StaticCatalog staticCatalog,    final Plan plan){
      this.staticCatalog=staticCatalog;
      this.plan=plan;
    }
    public StaticCatalog getStaticCatalog(){
      return staticCatalog;
    }
    public Plan getPlan(){
      return plan;
    }
  }
private class PlanRequestWrapper {
    private final PlanSpecifier spec;
    private final PlanPhasePriceOverridesWithCallContext overrides;
    public PlanRequestWrapper(    final String planName){
      this(new PlanSpecifier(planName));
    }
    public PlanRequestWrapper(    final PlanSpecifier spec){
      this(spec,null);
    }
    public PlanRequestWrapper(    final PlanSpecifier spec,    final PlanPhasePriceOverridesWithCallContext overrides){
      this.spec=spec;
      this.overrides=overrides;
    }
    public Plan findPlan(    final StandaloneCatalog catalog) throws CatalogApiException {
      return catalog.createOrFindCurrentPlan(spec,overrides);
    }
    public PlanSpecifier getSpec(){
      return spec;
    }
  }
}
