package org.nd4j.linalg.ops.transforms;
import org.nd4j.linalg.api.buffer.DataBuffer;
import org.nd4j.linalg.api.complex.IComplexNDArray;
import org.nd4j.linalg.api.complex.IComplexNumber;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.convolution.Convolution;
import org.nd4j.linalg.factory.Nd4j;
import org.nd4j.linalg.indexing.NDArrayIndex;
import org.nd4j.linalg.ops.ArrayOps;
import org.nd4j.linalg.ops.BaseElementWiseOp;
import org.nd4j.linalg.ops.ElementWiseOp;
import org.nd4j.linalg.util.ArrayUtil;
public class Transforms {
  public static INDArray maxPool(  INDArray input,  int[] ds,  boolean ignoreBorder){
  }
  public static INDArray downSample(  INDArray d1,  int[] stride){
    INDArray d=Nd4j.ones(stride);
    d.divi(ArrayUtil.prod(stride));
    INDArray ret=Convolution.convn(d1,d,Convolution.Type.VALID);
    ret=ret.get(NDArrayIndex.interval(0,stride[0]),NDArrayIndex.interval(0,stride[1]));
    return ret;
  }
  public static INDArray pool(  INDArray toPool,  int[] stride){
  }
  public static INDArray upSample(  INDArray d,  INDArray scale){
    INDArray idx=Nd4j.create(d.shape().length,1);
    for (int i=0; i < d.shape().length; i++) {
      INDArray tmp=Nd4j.zeros(d.size(i) * (int)scale.getDouble(i),1);
      int[] indices=ArrayUtil.range(0,(int)scale.getDouble(i) * d.size(i),(int)scale.getDouble(i));
      tmp.putScalar(indices,1.0f);
      idx.put(i,tmp.cumsum(Integer.MAX_VALUE).sum(Integer.MAX_VALUE));
    }
    return idx;
  }
  public static double cosineSim(  INDArray d1,  INDArray d2){
    d1=unitVec(d1.dup());
    d2=unitVec(d2.dup());
    double ret=Nd4j.getBlasWrapper().dot(d1,d2);
    return ret;
  }
  public static INDArray normalizeZeroMeanAndUnitVariance(  INDArray toNormalize){
    INDArray columnMeans=toNormalize.mean(0);
    INDArray columnStds=toNormalize.std(0);
    toNormalize.subiRowVector(columnMeans);
    columnStds.addi(Nd4j.EPS_THRESHOLD);
    toNormalize.diviRowVector(columnStds);
    return toNormalize;
  }
  public static INDArray unitVec(  INDArray toScale){
    double length=toScale.norm2(Integer.MAX_VALUE).getDouble(0);
    if (length > 0) {
      if (toScale.data().dataType().equals(DataBuffer.FLOAT))       return Nd4j.getBlasWrapper().scal(1.0f / length,toScale);
 else       return Nd4j.getBlasWrapper().scal(1.0 / length,toScale);
    }
    return toScale;
  }
  public static INDArray neg(  INDArray ndArray){
    return neg(ndArray,true);
  }
  public static IComplexNDArray neg(  IComplexNDArray ndArray){
    return neg(ndArray,true);
  }
  public static INDArray eq(  INDArray ndArray){
    return eq(ndArray,true);
  }
  public static IComplexNDArray eq(  IComplexNDArray ndArray){
    return eq(ndArray,true);
  }
  public static INDArray neq(  INDArray ndArray){
    return neq(ndArray,true);
  }
  public static IComplexNDArray neq(  IComplexNDArray ndArray){
    return neq(ndArray,true);
  }
  public static INDArray floor(  INDArray ndArray){
    return floor(ndArray,true);
  }
  public static INDArray sign(  IComplexNDArray toSign){
    return sign(toSign,true);
  }
  public static INDArray sign(  INDArray toSign){
    return sign(toSign,true);
  }
  public static IComplexNDArray floor(  IComplexNDArray ndArray){
    return floor(ndArray,true);
  }
  public static INDArray gt(  INDArray ndArray){
    return gt(ndArray,true);
  }
  public static IComplexNDArray gt(  IComplexNDArray ndArray){
    return gt(ndArray,true);
  }
  public static INDArray lt(  INDArray ndArray){
    return lt(ndArray,true);
  }
  public static IComplexNDArray lt(  IComplexNDArray ndArray){
    return lt(ndArray,true);
  }
  public static INDArray stabilize(  INDArray ndArray,  double k){
    return stabilize(ndArray,k,true);
  }
  public static IComplexNDArray stabilize(  IComplexNDArray ndArray,  double k){
    return stabilize(ndArray,k,true);
  }
  public static INDArray abs(  INDArray ndArray){
    return abs(ndArray,true);
  }
  public static IComplexNDArray abs(  IComplexNDArray ndArray){
    return abs(ndArray,true);
  }
  public static INDArray exp(  INDArray ndArray){
    return exp(ndArray,true);
  }
  public static IComplexNDArray exp(  IComplexNDArray ndArray){
    return exp(ndArray,true);
  }
  public static INDArray hardTanh(  INDArray ndArray){
    return hardTanh(ndArray,true);
  }
  public static IComplexNDArray hardTanh(  IComplexNDArray ndArray){
    return hardTanh(ndArray,true);
  }
  public static INDArray identity(  INDArray ndArray){
    return identity(ndArray,true);
  }
  public static IComplexNDArray identity(  IComplexNDArray ndArray){
    return identity(ndArray,true);
  }
  public static INDArray max(  INDArray ndArray){
    return max(ndArray,true);
  }
  public static INDArray max(  INDArray ndArray,  double max){
    return max(ndArray,max,true);
  }
  public static IComplexNDArray max(  IComplexNDArray ndArray,  double max){
    return max(ndArray,max,true);
  }
  public static IComplexNDArray max(  IComplexNDArray ndArray){
    return max(ndArray,true);
  }
  public static INDArray pow(  INDArray ndArray,  Number power){
    return pow(ndArray,power,true);
  }
  public static IComplexNDArray pow(  IComplexNDArray ndArray,  IComplexNumber power){
    return pow(ndArray,power,true);
  }
  public static INDArray round(  INDArray ndArray){
    return round(ndArray,true);
  }
  public static IComplexNDArray round(  IComplexNDArray ndArray){
    return round(ndArray,true);
  }
  public static INDArray sigmoid(  INDArray ndArray){
    return sigmoid(ndArray,true);
  }
  public static IComplexNDArray sigmoid(  IComplexNDArray ndArray){
    return sigmoid(ndArray,true);
  }
  public static INDArray sqrt(  INDArray ndArray){
    return sqrt(ndArray,true);
  }
  public static IComplexNDArray sqrt(  IComplexNDArray ndArray){
    return sqrt(ndArray,true);
  }
  public static INDArray tanh(  INDArray ndArray){
    return tanh(ndArray,true);
  }
  public static IComplexNDArray tanh(  IComplexNDArray ndArray){
    return tanh(ndArray,true);
  }
  public static INDArray log(  INDArray ndArray){
    return log(ndArray,true);
  }
  public static IComplexNDArray log(  IComplexNDArray ndArray){
    return log(ndArray,true);
  }
  public static INDArray eq(  INDArray ndArray,  boolean dup){
    return exec(ndArray,EqualTo.class,null,dup);
  }
  public static IComplexNDArray eq(  IComplexNDArray ndArray,  boolean dup){
    return exec(ndArray,EqualTo.class,null,dup);
  }
  public static INDArray neq(  INDArray ndArray,  boolean dup){
    return exec(ndArray,NotEqualTo.class,null,dup);
  }
  public static IComplexNDArray neq(  IComplexNDArray ndArray,  boolean dup){
    return exec(ndArray,NotEqualTo.class,null,dup);
  }
  public static INDArray floor(  INDArray ndArray,  boolean dup){
    return exec(ndArray,Floor.class,null,dup);
  }
  public static INDArray sign(  IComplexNDArray toSign,  boolean dup){
    return exec(toSign,Sign.class,null,dup);
  }
  public static INDArray sign(  INDArray toSign,  boolean dup){
    return exec(toSign,Sign.class,null,dup);
  }
  public static IComplexNDArray floor(  IComplexNDArray ndArray,  boolean dup){
    return exec(ndArray,Floor.class,null,dup);
  }
  public static INDArray gt(  INDArray ndArray,  boolean dup){
    return exec(ndArray,GreaterThan.class,null,dup);
  }
  public static IComplexNDArray gt(  IComplexNDArray ndArray,  boolean dup){
    return exec(ndArray,GreaterThan.class,null,dup);
  }
  public static INDArray lt(  INDArray ndArray,  boolean dup){
    return exec(ndArray,LessThan.class,null,dup);
  }
  public static IComplexNDArray lt(  IComplexNDArray ndArray,  boolean dup){
    return exec(ndArray,LessThan.class,null,dup);
  }
  public static INDArray stabilize(  INDArray ndArray,  double k,  boolean dup){
    return exec(ndArray,Stabilize.class,new Object[]{k},dup);
  }
  public static IComplexNDArray stabilize(  IComplexNDArray ndArray,  double k,  boolean dup){
    return exec(ndArray,Stabilize.class,new Object[]{k},dup);
  }
  public static INDArray abs(  INDArray ndArray,  boolean dup){
    return exec(ndArray,Abs.class,null,dup);
  }
  public static IComplexNDArray abs(  IComplexNDArray ndArray,  boolean dup){
    return exec(ndArray,Abs.class,null,dup);
  }
  public static INDArray exp(  INDArray ndArray,  boolean dup){
    return exec(ndArray,Exp.class,null,dup);
  }
  public static IComplexNDArray exp(  IComplexNDArray ndArray,  boolean dup){
    return exec(ndArray,Exp.class,null,dup);
  }
  public static INDArray hardTanh(  INDArray ndArray,  boolean dup){
    return exec(ndArray,HardTanh.class,null,dup);
  }
  public static IComplexNDArray hardTanh(  IComplexNDArray ndArray,  boolean dup){
    return exec(ndArray,HardTanh.class,null,dup);
  }
  public static INDArray identity(  INDArray ndArray,  boolean dup){
    return exec(ndArray,Identity.class,null,dup);
  }
  public static IComplexNDArray identity(  IComplexNDArray ndArray,  boolean dup){
    return exec(ndArray,Identity.class,null,dup);
  }
  public static INDArray max(  INDArray ndArray,  boolean dup){
    return exec(ndArray,Max.class,null,dup);
  }
  public static INDArray max(  INDArray ndArray,  double max,  boolean dup){
    return exec(ndArray,Max.class,new Object[]{max},dup);
  }
  public static IComplexNDArray max(  IComplexNDArray ndArray,  double max,  boolean dup){
    return exec(ndArray,Max.class,null,dup);
  }
  public static IComplexNDArray max(  IComplexNDArray ndArray,  boolean dup){
    return exec(ndArray,Max.class,null,dup);
  }
  public static INDArray pow(  INDArray ndArray,  Number power,  boolean dup){
    return exec(ndArray,Pow.class,new Object[]{power},dup);
  }
  public static IComplexNDArray pow(  IComplexNDArray ndArray,  IComplexNumber power,  boolean dup){
    return exec(ndArray,Pow.class,new Object[]{power},dup);
  }
  public static INDArray round(  INDArray ndArray,  boolean dup){
    return exec(ndArray,Round.class,null,dup);
  }
  public static IComplexNDArray round(  IComplexNDArray ndArray,  boolean dup){
    return exec(ndArray,Round.class,null,dup);
  }
  public static INDArray sigmoid(  INDArray ndArray,  boolean dup){
    return exec(ndArray,Sigmoid.class,null,dup);
  }
  public static IComplexNDArray sigmoid(  IComplexNDArray ndArray,  boolean dup){
    return exec(ndArray,Sigmoid.class,null,dup);
  }
  public static INDArray sqrt(  INDArray ndArray,  boolean dup){
    return exec(ndArray,Sqrt.class,null,dup);
  }
  public static IComplexNDArray sqrt(  IComplexNDArray ndArray,  boolean dup){
    return exec(ndArray,Sqrt.class,null,dup);
  }
  public static INDArray tanh(  INDArray ndArray,  boolean dup){
    return exec(ndArray,Tanh.class,null,dup);
  }
  public static IComplexNDArray tanh(  IComplexNDArray ndArray,  boolean dup){
    return exec(ndArray,Tanh.class,null,dup);
  }
  public static INDArray log(  INDArray ndArray,  boolean dup){
    return exec(ndArray,Log.class,null,dup);
  }
  public static IComplexNDArray log(  IComplexNDArray ndArray,  boolean dup){
    return exec(ndArray,Log.class,null,dup);
  }
  public static INDArray neg(  INDArray ndArray,  boolean dup){
    return exec(ndArray,Negative.class,null,dup);
  }
  public static IComplexNDArray neg(  IComplexNDArray ndArray,  boolean dup){
    return exec(ndArray,Negative.class,null,dup);
  }
  private static INDArray exec(  INDArray indArray,  Class<? extends BaseElementWiseOp> clazz,  Object[] extraArgs,  boolean dup){
    ElementWiseOp ops=new ArrayOps().from(dup ? indArray.dup() : indArray).op(clazz).extraArgs(extraArgs).build();
    ops.exec();
    return ops.from();
  }
  private static IComplexNDArray exec(  IComplexNDArray indArray,  Class<? extends BaseElementWiseOp> clazz,  Object[] extraArgs,  boolean dup){
    ElementWiseOp ops=new ArrayOps().from(dup ? indArray.dup() : indArray).op(clazz).extraArgs(extraArgs).build();
    ops.exec();
    IComplexNDArray n=(IComplexNDArray)ops.from();
    return n;
  }
}
