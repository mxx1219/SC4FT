package org.apache.solr.cloud;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import org.apache.lucene.util.TestUtil;
import org.apache.solr.SolrTestCaseJ4;
import org.apache.solr.common.cloud.CompositeIdRouter;
import org.apache.solr.common.cloud.DocCollection;
import org.apache.solr.common.cloud.DocRouter;
import org.apache.solr.common.cloud.DocRouter.Range;
import org.apache.solr.common.cloud.PlainIdRouter;
import org.apache.solr.common.cloud.Slice;
import org.apache.solr.common.util.Hash;
import org.apache.solr.common.util.StrUtils;
public class TestHashPartitioner extends SolrTestCaseJ4 {
  public void testMapHashes() throws Exception {
    DocRouter hp=DocRouter.DEFAULT;
    List<Range> ranges;
    ranges=hp.partitionRange(2,hp.fullRange());
    assertEquals(Integer.MIN_VALUE,ranges.get(0).min);
    assertEquals(0x80000000,ranges.get(0).min);
    assertEquals(0xffffffff,ranges.get(0).max);
    assertEquals(0x00000000,ranges.get(1).min);
    assertEquals(0x7fffffff,ranges.get(1).max);
    ranges=hp.partitionRange(2,new DocRouter.Range(0,0x7fffffff));
    assertEquals(0x00000000,ranges.get(0).min);
    assertEquals(0x3fffffff,ranges.get(0).max);
    assertEquals(0x40000000,ranges.get(1).min);
    assertEquals(0x7fffffff,ranges.get(1).max);
    int defaultLowerBits=0x0000ffff;
    for (int i=1; i <= 30000; i++) {
      if (i > 100)       i+=13;
 else       if (i > 1000)       i+=31;
 else       if (i > 5000)       i+=101;
      long rangeSize=0x0000000100000000L / i;
      ranges=hp.partitionRange(i,hp.fullRange());
      assertEquals(i,ranges.size());
      assertTrue("First range does not start before " + Integer.MIN_VALUE + " it is:"+ ranges.get(0).min,ranges.get(0).min <= Integer.MIN_VALUE);
      assertTrue("Last range does not end after " + Integer.MAX_VALUE + " it is:"+ ranges.get(ranges.size() - 1).max,ranges.get(ranges.size() - 1).max >= Integer.MAX_VALUE);
      for (      Range range : ranges) {
        String s=range.toString();
        Range newRange=hp.fromString(s);
        assertEquals(range,newRange);
      }
      int lastEnd=Integer.MIN_VALUE - 1;
      for (      Range range : ranges) {
        int currStart=range.min;
        int currEnd=range.max;
        assertEquals(lastEnd + 1,currStart);
        if (ranges.size() < 4000) {
          assertEquals(defaultLowerBits,currEnd & defaultLowerBits);
          long currRangeSize=(long)currEnd - (long)currStart;
          long error=Math.abs(rangeSize - currRangeSize);
          assertTrue(error < rangeSize / 16);
        }
        lastEnd=currEnd;
      }
    }
  }
  public int hash(  String id){
    return Hash.murmurhash3_x86_32(id,0,id.length(),0);
  }
  public void testHashCodes() throws Exception {
    DocRouter router=DocRouter.getDocRouter(PlainIdRouter.NAME);
    assertTrue(router instanceof PlainIdRouter);
    DocCollection coll=createCollection(4,router);
    doNormalIdHashing(coll);
  }
  public void doNormalIdHashing(  DocCollection coll) throws Exception {
    assertEquals(4,coll.getSlices().size());
    doId(coll,"b","shard1");
    doId(coll,"c","shard2");
    doId(coll,"d","shard3");
    doId(coll,"e","shard4");
  }
  public void doId(  DocCollection coll,  String id,  String expectedShard){
    doIndex(coll,id,expectedShard);
    doQuery(coll,id,expectedShard);
  }
  public void doIndex(  DocCollection coll,  String id,  String expectedShard){
    DocRouter router=coll.getRouter();
    Slice target=router.getTargetSlice(id,null,null,null,coll);
    assertEquals(expectedShard,target.getName());
  }
  public void doQuery(  DocCollection coll,  String id,  String expectedShards){
    DocRouter router=coll.getRouter();
    Collection<Slice> slices=router.getSearchSlices(id,null,coll);
    List<String> expectedShardStr=StrUtils.splitSmart(expectedShards,",",true);
    HashSet<String> expectedSet=new HashSet<>(expectedShardStr);
    HashSet<String> obtainedSet=new HashSet<>();
    for (    Slice slice : slices) {
      obtainedSet.add(slice.getName());
    }
    assertEquals(slices.size(),obtainedSet.size());
    assertEquals(expectedSet,obtainedSet);
  }
  public void testCompositeHashCodes() throws Exception {
    DocRouter router=DocRouter.getDocRouter(CompositeIdRouter.NAME);
    assertTrue(router instanceof CompositeIdRouter);
    router=DocRouter.DEFAULT;
    assertTrue(router instanceof CompositeIdRouter);
    DocCollection coll=createCollection(4,router);
    doNormalIdHashing(coll);
    doId(coll,"b!foo","shard1");
    doId(coll,"c!bar","shard2");
    doId(coll,"d!baz","shard3");
    doId(coll,"e!qux","shard4");
    doId(coll,"b/2!foo","shard1");
    doId(coll,"c/2!bar","shard2");
    doId(coll,"d/2!baz","shard3");
    doId(coll,"e/2!qux","shard4");
    doId(coll,"b/32!foo","shard1");
    doId(coll,"c/32!bar","shard2");
    doId(coll,"d/32!baz","shard3");
    doId(coll,"e/32!qux","shard4");
    doIndex(coll,"foo/0!b","shard1");
    doIndex(coll,"foo/0!c","shard2");
    doIndex(coll,"foo/0!d","shard3");
    doIndex(coll,"foo/0!e","shard4");
    doQuery(coll,"foo/0!","shard1,shard2,shard3,shard4");
    doQuery(coll,"b/1!","shard1,shard2");
    doQuery(coll,"d/1!","shard3,shard4");
  }
  public void testNonConformingCompositeIds() throws Exception {
    DocRouter router=DocRouter.getDocRouter(CompositeIdRouter.NAME);
    DocCollection coll=createCollection(4,router);
    String[] ids={"A!B!C!D","!!!!!!","A!!!!B","A!!B!!C","A/59!B","A/8/!B/19/","A!B/-5","!/130!","!!A/1000","A//8!B///10!C////"};
    for (int i=0; i < ids.length; ++i) {
      try {
        Slice targetSlice=coll.getRouter().getTargetSlice(ids[i],null,null,null,coll);
        assertNotNull(targetSlice);
      }
 catch (      Exception e) {
        throw new Exception("Exception routing id '" + ids[i] + "'",e);
      }
    }
  }
  public void testRandomCompositeIds() throws Exception {
    DocRouter router=DocRouter.getDocRouter(CompositeIdRouter.NAME);
    DocCollection coll=createCollection(TestUtil.nextInt(random(),1,10),router);
    StringBuilder idBuilder=new StringBuilder();
    for (int i=0; i < 10000; ++i) {
      idBuilder.setLength(0);
      int numParts=TestUtil.nextInt(random(),1,30);
      for (int part=0; part < numParts; ++part) {
switch (random().nextInt(5)) {
case 0:
          idBuilder.append('!');
        break;
case 1:
      idBuilder.append('/');
    break;
case 2:
  idBuilder.append(TestUtil.nextInt(random(),-100,1000));
break;
default :
{
int length=TestUtil.nextInt(random(),1,10);
char[] str=new char[length];
TestUtil.randomFixedLengthUnicodeString(random(),str,0,length);
idBuilder.append(str);
break;
}
}
}
String id=idBuilder.toString();
try {
Slice targetSlice=router.getTargetSlice(id,null,null,null,coll);
assertNotNull(targetSlice);
}
 catch (Exception e) {
throw new Exception("Exception routing id '" + id + "'",e);
}
}
}
DocCollection createCollection(int nSlices,DocRouter router){
List<Range> ranges=router.partitionRange(nSlices,router.fullRange());
Map<String,Slice> slices=new HashMap<>();
for (int i=0; i < ranges.size(); i++) {
Range range=ranges.get(i);
Slice slice=new Slice("shard" + (i + 1),null,map("range",range),"collections1");
slices.put(slice.getName(),slice);
}
DocCollection coll=new DocCollection("collection1",slices,null,router);
return coll;
}
}
