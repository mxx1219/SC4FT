package soot.asm;
import java.util.ArrayList;
import java.util.List;
import soot.*;
class AsmUtil {
  public static boolean isDWord(  Type type){
    return type instanceof LongType || type instanceof DoubleType;
  }
  public static Type toBaseType(  String internal){
    if (internal.charAt(0) == '[') {
      internal=internal.substring(internal.lastIndexOf('[') + 1,internal.length());
      if (internal.charAt(internal.length() - 1) == ';')       internal=internal.substring(0,internal.length() - 1);
    }
switch (internal.charAt(0)) {
case 'Z':
      return BooleanType.v();
case 'B':
    return ByteType.v();
case 'C':
  return CharType.v();
case 'S':
return ShortType.v();
case 'I':
return IntType.v();
case 'F':
return FloatType.v();
case 'J':
return LongType.v();
case 'D':
return DoubleType.v();
case 'L':
internal=internal.substring(1,internal.length());
internal=toQualifiedName(internal);
return RefType.v(internal);
default :
internal=toQualifiedName(internal);
return RefType.v(internal);
}
}
public static String toQualifiedName(String internal){
return internal.replace('/','.');
}
public static String toInternalName(String qual){
return qual.replace('.','/');
}
public static String toInternalName(SootClass cls){
return toInternalName(cls.getName());
}
public static Type toJimpleRefType(String desc){
return desc.charAt(0) == '[' ? toJimpleType(desc) : RefType.v(toQualifiedName(desc));
}
public static Type toJimpleType(String desc){
int idx=desc.lastIndexOf('[');
int nrDims=idx + 1;
if (nrDims > 0) {
if (desc.charAt(0) != '[') throw new AssertionError("Invalid array descriptor: " + desc);
desc=desc.substring(idx + 1);
}
Type baseType;
switch (desc.charAt(0)) {
case 'Z':
baseType=BooleanType.v();
break;
case 'B':
baseType=ByteType.v();
break;
case 'C':
baseType=CharType.v();
break;
case 'S':
baseType=ShortType.v();
break;
case 'I':
baseType=IntType.v();
break;
case 'F':
baseType=FloatType.v();
break;
case 'J':
baseType=LongType.v();
break;
case 'D':
baseType=DoubleType.v();
break;
case 'L':
if (desc.charAt(desc.length() - 1) != ';') throw new AssertionError("Invalid reference descriptor: " + desc);
String name=desc.substring(1,desc.length() - 1);
name=toQualifiedName(name);
baseType=RefType.v(name);
break;
default :
throw new AssertionError("Unknown descriptor: " + desc);
}
if (!(baseType instanceof RefLikeType) && desc.length() > 1) throw new AssertionError("Invalid primitive type descriptor: " + desc);
return nrDims > 0 ? ArrayType.v(baseType,nrDims) : baseType;
}
public static List<Type> toJimpleDesc(String desc){
ArrayList<Type> types=new ArrayList<Type>(2);
int len=desc.length();
int idx=0;
all: while (idx != len) {
int nrDims=0;
Type baseType=null;
this_type: while (idx != len) {
char c=desc.charAt(idx++);
switch (c) {
case '(':
case ')':
continue all;
case '[':
++nrDims;
continue this_type;
case 'Z':
baseType=BooleanType.v();
break this_type;
case 'B':
baseType=ByteType.v();
break this_type;
case 'C':
baseType=CharType.v();
break this_type;
case 'S':
baseType=ShortType.v();
break this_type;
case 'I':
baseType=IntType.v();
break this_type;
case 'F':
baseType=FloatType.v();
break this_type;
case 'J':
baseType=LongType.v();
break this_type;
case 'D':
baseType=DoubleType.v();
break this_type;
case 'V':
baseType=VoidType.v();
break this_type;
case 'L':
int begin=idx;
while (desc.charAt(++idx) != ';') ;
String cls=desc.substring(begin,idx++);
baseType=RefType.v(toQualifiedName(cls));
break this_type;
default :
throw new AssertionError("Unknown type: " + c);
}
}
if (nrDims > 0) types.add(ArrayType.v(baseType,nrDims));
 else types.add(baseType);
}
return types;
}
public static String baseTypeName(String s){
int index=s.indexOf("[");
if (index < 0) {
return s;
}
 else {
return s.substring(0,index);
}
}
private AsmUtil(){
}
}
